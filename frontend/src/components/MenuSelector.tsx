import { useState, useEffect } from 'react';
import { apiClient, MenuItem } from '../utils/api';

interface MenuSelectorProps {
  onSelectionChange: (selectedItems: MenuItem[]) => void;
}

export default function MenuSelector({ onSelectionChange }: MenuSelectorProps) {
  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
  const [selectedDay, setSelectedDay] = useState<string>('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫');
  const [selectedItems, setSelectedItems] = useState<Set<number>>(new Set());
  const [loading, setLoading] = useState(true);
  const [msg, setMsg] = useState('');

  const days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];

  useEffect(() => {
    loadMenu();
  }, []);

  useEffect(() => {
    const selected = menuItems.filter(item => selectedItems.has(item.id));
    onSelectionChange(selected);
  }, [selectedItems, menuItems, onSelectionChange]);

  const loadMenu = async () => {
    try {
      setLoading(true);
      const data = await apiClient.getMenu();
      setMenuItems(data);
    } catch (error: any) {
      setMsg(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const toggleItem = (itemId: number) => {
    const newSelected = new Set(selectedItems);
    if (newSelected.has(itemId)) {
      newSelected.delete(itemId);
    } else {
      newSelected.add(itemId);
    }
    setSelectedItems(newSelected);
  };

  const getItemsForDay = (day: string) => {
    return menuItems.filter(item => item.day_of_week === day);
  };

  const getItemsForMeal = (day: string, mealType: string) => {
    return getItemsForDay(day).filter(item => item.meal_type === mealType);
  };

  const clearAllSelections = () => {
    setSelectedItems(new Set());
    setMsg('‚úÖ –í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω');
  };

  if (loading) {
    return (
      <div style={{ textAlign: 'center', padding: '50px' }}>
        <div>‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é...</div>
      </div>
    );
  }

  return (
    <div className="parent-menu-selector">
      {msg && (
        <div style={{
          padding: '10px',
          margin: '10px 0',
          borderRadius: '5px',
          backgroundColor: msg.includes('‚ùå') ? '#fee' : '#efe',
          border: `1px solid ${msg.includes('‚ùå') ? '#fcc' : '#cfc'}`,
          color: msg.includes('‚ùå') ? '#c33' : '#363'
        }}>
          {msg}
        </div>
      )}

      {/* –í—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ */}
      <div className="day-selector">
        <h2>üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏</h2>
        <div className="day-buttons">
          {days.map(day => (
            <button
              key={day}
              onClick={() => setSelectedDay(day)}
              className={selectedDay === day ? 'active' : ''}
            >
              {day.charAt(0).toUpperCase() + day.slice(1)}
            </button>
          ))}
        </div>
      </div>

      {/* –ú–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å */}
      <div className="menu-layout">
        {/* –ó–∞–≤—Ç—Ä–∞–∫ */}
        <div className="meal-column">
          <div className="meal-header">
            <h3>üåÖ –ó–∞–≤—Ç—Ä–∞–∫</h3>
            <div className="item-count">
              {getItemsForMeal(selectedDay, '–∑–∞–≤—Ç—Ä–∞–∫').length}
            </div>
          </div>
          <div className="meal-items">
            {getItemsForMeal(selectedDay, '–∑–∞–≤—Ç—Ä–∞–∫').map(item => (
              <div
                key={item.id}
                className={`menu-item ${selectedItems.has(item.id) ? 'selected' : ''}`}
                onClick={() => toggleItem(item.id)}
              >
                <div className="item-checkbox">
                  {selectedItems.has(item.id) ? '‚úÖ' : '‚òê'}
                </div>
                <div className="item-content">
                  <div className="item-name">{item.name}</div>
                  {item.description && (
                    <div className="item-description">{item.description}</div>
                  )}
                  {item.price && (
                    <div className="item-price">{item.price} ‚ÇΩ</div>
                  )}
                </div>
              </div>
            ))}
            {getItemsForMeal(selectedDay, '–∑–∞–≤—Ç—Ä–∞–∫').length === 0 && (
              <div className="no-items">–ù–µ—Ç –±–ª—é–¥ –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞</div>
            )}
          </div>
        </div>

        {/* –û–±–µ–¥ */}
        <div className="meal-column">
          <div className="meal-header">
            <h3>üçΩÔ∏è –û–±–µ–¥</h3>
            <div className="item-count">
              {getItemsForMeal(selectedDay, '–æ–±–µ–¥').length}
            </div>
          </div>
          <div className="meal-items">
            {getItemsForMeal(selectedDay, '–æ–±–µ–¥').map(item => (
              <div
                key={item.id}
                className={`menu-item ${selectedItems.has(item.id) ? 'selected' : ''}`}
                onClick={() => toggleItem(item.id)}
              >
                <div className="item-checkbox">
                  {selectedItems.has(item.id) ? '‚úÖ' : '‚òê'}
                </div>
                <div className="item-content">
                  <div className="item-name">{item.name}</div>
                  {item.description && (
                    <div className="item-description">{item.description}</div>
                  )}
                  {item.price && (
                    <div className="item-price">{item.price} ‚ÇΩ</div>
                  )}
                </div>
              </div>
            ))}
            {getItemsForMeal(selectedDay, '–æ–±–µ–¥').length === 0 && (
              <div className="no-items">–ù–µ—Ç –±–ª—é–¥ –¥–ª—è –æ–±–µ–¥–∞</div>
            )}
          </div>
        </div>

        {/* –ü–æ–ª–¥–Ω–∏–∫ */}
        <div className="meal-column">
          <div className="meal-header">
            <h3>üçé –ü–æ–ª–¥–Ω–∏–∫</h3>
            <div className="item-count">
              {getItemsForMeal(selectedDay, '–ø–æ–ª–¥–Ω–∏–∫').length}
            </div>
          </div>
          <div className="meal-items">
            {getItemsForMeal(selectedDay, '–ø–æ–ª–¥–Ω–∏–∫').map(item => (
              <div
                key={item.id}
                className={`menu-item ${selectedItems.has(item.id) ? 'selected' : ''}`}
                onClick={() => toggleItem(item.id)}
              >
                <div className="item-checkbox">
                  {selectedItems.has(item.id) ? '‚úÖ' : '‚òê'}
                </div>
                <div className="item-content">
                  <div className="item-name">{item.name}</div>
                  {item.description && (
                    <div className="item-description">{item.description}</div>
                  )}
                  {item.price && (
                    <div className="item-price">{item.price} ‚ÇΩ</div>
                  )}
                </div>
              </div>
            ))}
            {getItemsForMeal(selectedDay, '–ø–æ–ª–¥–Ω–∏–∫').length === 0 && (
              <div className="no-items">–ù–µ—Ç –±–ª—é–¥ –¥–ª—è –ø–æ–ª–¥–Ω–∏–∫–∞</div>
            )}
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div style={{
        display: 'flex',
        gap: '10px',
        justifyContent: 'center',
        marginTop: '20px',
        flexWrap: 'wrap'
      }}>
        <button
          onClick={clearAllSelections}
          style={{
            padding: '10px 20px',
            backgroundColor: '#6b7280',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            fontSize: '14px',
            fontWeight: '600'
          }}
        >
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä
        </button>
        
        <button
          onClick={loadMenu}
          style={{
            padding: '10px 20px',
            backgroundColor: '#3b82f6',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            fontSize: '14px',
            fontWeight: '600'
          }}
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é
        </button>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–µ */}
      {selectedItems.size > 0 && (
        <div style={{
          marginTop: '20px',
          padding: '15px',
          backgroundColor: '#f0f9ff',
          border: '2px solid #0ea5e9',
          borderRadius: '10px',
          textAlign: 'center'
        }}>
          <div style={{ fontSize: '16px', fontWeight: '600', color: '#0c4a6e' }}>
            ‚úÖ –í—ã–±—Ä–∞–Ω–æ –±–ª—é–¥: {selectedItems.size}
          </div>
        </div>
      )}
    </div>
  );
}