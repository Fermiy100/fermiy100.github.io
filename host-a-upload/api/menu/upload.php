<?php
header('Content-Type: application/json; charset=utf-8');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type, Authorization');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit();
}

if (!isset($_FILES['file']) || $_FILES['file']['error'] !== UPLOAD_ERR_OK) {
    http_response_code(400);
    echo json_encode(['error' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.']);
    exit();
}

$file = $_FILES['file'];
$filePath = $file['tmp_name'];
$originalFileName = $file['name'];

// üî• –£–ú–ù–´–ô –ü–ê–†–°–ï–† EXCEL - –ù–ê–•–û–î–ò–¢ –í–°–ï –ë–õ–Æ–î–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò! üî•
// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –í–°–ï –±–ª—é–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

try {
    // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    $excelData = readExcelFile($filePath);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    $analysis = analyzeExcelStructure($excelData);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï –±–ª—é–¥–∞
    $allDishes = extractAllDishesFromExcel($excelData, $analysis);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
    $validation = validateDishExtraction($allDishes, $analysis);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ menu_data.json
    $dataFile = __DIR__ . '/../menu_data.json';
    $result = file_put_contents($dataFile, json_encode($allDishes, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT));
    
    if ($result === false) {
        throw new Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
    
    echo json_encode([
        'success' => true,
        'message' => "Excel —Ñ–∞–π–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ù–∞–π–¥–µ–Ω–æ " . count($allDishes) . " –±–ª—é–¥",
        'count' => count($allDishes),
        'analysis' => $analysis,
        'validation' => $validation,
        'dishes' => $allDishes
    ]);
    
} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()]);
}

function readExcelFile($filePath) {
    // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç –∏ –ø–∞—Ä—Å–∏–º
    $content = file_get_contents($filePath);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    $lines = explode("\n", $content);
    $excelData = [];
    
    foreach ($lines as $line) {
        $line = trim($line);
        if (!empty($line)) {
            // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —è—á–µ–π–∫–∏ (–ø–æ —Ç–∞–±—É–ª—è—Ü–∏–∏ –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π)
            $cells = preg_split('/[\t,]/', $line);
            $excelData[] = $cells;
        }
    }
    
    return $excelData;
}

function analyzeExcelStructure($excelData) {
    $analysis = [
        'total_rows' => count($excelData),
        'total_columns' => 0,
        'meal_type_columns' => [],
        'day_columns' => [],
        'dish_cells_found' => 0,
        'structure_type' => 'unknown'
    ];
    
    if (empty($excelData)) {
        return $analysis;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
    $maxColumns = 0;
    foreach ($excelData as $row) {
        $maxColumns = max($maxColumns, count($row));
    }
    $analysis['total_columns'] = $maxColumns;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫)
    for ($i = 0; $i < min(3, count($excelData)); $i++) {
        $row = $excelData[$i];
        foreach ($row as $colIndex => $cell) {
            $cellLower = strtolower(trim($cell));
            
            // –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å —Ç–∏–ø–∞–º–∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
            if (strpos($cellLower, '–∑–∞–≤—Ç—Ä–∞–∫') !== false) {
                $analysis['meal_type_columns'][$colIndex] = '–∑–∞–≤—Ç—Ä–∞–∫';
            } elseif (strpos($cellLower, '–æ–±–µ–¥') !== false) {
                $analysis['meal_type_columns'][$colIndex] = '–æ–±–µ–¥';
            } elseif (strpos($cellLower, '–ø–æ–ª–¥–Ω–∏–∫') !== false) {
                $analysis['meal_type_columns'][$colIndex] = '–ø–æ–ª–¥–Ω–∏–∫';
            }
            
            // –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
            $days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];
            foreach ($days as $day) {
                if (strpos($cellLower, $day) !== false) {
                    $analysis['day_columns'][$colIndex] = $day;
                }
            }
        }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if (!empty($analysis['meal_type_columns'])) {
        $analysis['structure_type'] = 'meal_type_columns';
    } elseif (!empty($analysis['day_columns'])) {
        $analysis['structure_type'] = 'day_columns';
    } else {
        $analysis['structure_type'] = 'mixed';
    }
    
    return $analysis;
}

function extractAllDishesFromExcel($excelData, $analysis) {
    $allDishes = [];
    $dishId = 1;
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –∏ —Å—Ç–æ–ª–±—Ü–∞–º
    foreach ($excelData as $rowIndex => $row) {
        foreach ($row as $colIndex => $cell) {
            $cellValue = trim($cell);
            
            if (isValidDishCell($cellValue)) {
                $dish = parseDishFromCell($cellValue, $rowIndex, $colIndex, $analysis);
                if ($dish) {
                    $dish['id'] = $dishId++;
                    $allDishes[] = $dish;
                    $analysis['dish_cells_found']++;
                }
            }
        }
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    $allDishes = removeDuplicateDishes($allDishes);
    
    return $allDishes;
}

function isValidDishCell($cellValue) {
    if (empty($cellValue) || strlen($cellValue) < 3) {
        return false;
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —è—á–µ–π–∫–∏
    $excludePatterns = [
        '–Ω–µ–¥–µ–ª—è', '–∑–∞–∫–∞–∑', '–∫–æ–ø–∏—è', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞',
        '–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫', '—É–∂–∏–Ω', '—à–∫–æ–ª–∞', '–∫–ª–∞—Å—Å', '—É—á–µ–Ω–∏–∫', '—Ä–æ–¥–∏—Ç–µ–ª—å',
        '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '—É—á–∏—Ç–µ–ª—å', '–º–µ–Ω—é', '–ø–∏—Ç–∞–Ω–∏–µ', '—Å—Ç–æ–ª–æ–≤–∞—è', '–∫—É—Ö–Ω—è', '–≤—Ä–µ–º—è', '–¥–∞—Ç–∞',
        '–≤—Å–µ–≥–æ', '–∏—Ç–æ–≥–æ', '—Å—É–º–º–∞', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–Ω–æ–º–µ—Ä', '–Ω–∞–∑–≤–∞–Ω–∏–µ'
    ];
    
    $cellLower = strtolower($cellValue);
    
    foreach ($excludePatterns as $pattern) {
        if (strpos($cellLower, $pattern) !== false) {
            return false;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
    return preg_match('/[–ê-–Ø–∞-—è]{3,}/u', $cellValue);
}

function parseDishFromCell($cellValue, $rowIndex, $colIndex, $analysis) {
    $dish = [
        'name' => '',
        'description' => '–ë–ª—é–¥–æ –∏–∑ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é Excel —Ñ–∞–π–ª–∞',
        'price' => 0,
        'meal_type' => '–∑–∞–≤—Ç—Ä–∞–∫',
        'day_of_week' => 1,
        'weight' => '100 –≥',
        'recipe_number' => '1/1',
        'school_id' => 1,
        'week_start' => '2025-10-03',
        'created_at' => date('Y-m-d\TH:i:s\Z')
    ];
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
    $dish['name'] = extractDishName($cellValue);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å
    $dish['weight'] = extractWeight($cellValue);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞
    $dish['recipe_number'] = extractRecipeNumber($cellValue);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    $dish['meal_type'] = determineMealTypeFromContext($colIndex, $analysis, $cellValue);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    $dish['day_of_week'] = determineDayFromContext($colIndex, $analysis);
    
    return $dish;
}

function extractDishName($cellValue) {
    $name = $cellValue;
    
    // –£–±–∏—Ä–∞–µ–º –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "225 –≥", "2 —à—Ç")
    $name = preg_replace('/\s+\d+[–≥–º–ª—à—Ç\.]+/u', '', $name);
    
    // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "‚Ññ 1/6", "‚Ññ 11/2")
    $name = preg_replace('/\s*‚Ññ?\s*\d+\/\d+/u', '', $name);
    $name = preg_replace('/\s*‚Ññ?\s*\d+/u', '', $name);
    
    return trim($name);
}

function extractWeight($cellValue) {
    // –ò—â–µ–º –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "225 –≥", "2 —à—Ç", "200 –º–ª"
    if (preg_match('/(\d+[–≥–º–ª—à—Ç\.]+)/u', $cellValue, $matches)) {
        return $matches[1];
    }
    
    return '100 –≥';
}

function extractRecipeNumber($cellValue) {
    // –ò—â–µ–º –Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1/6", "11/2"
    if (preg_match('/(\d+\/\d+)/u', $cellValue, $matches)) {
        return $matches[1];
    }
    
    // –ò—â–µ–º –ø—Ä–æ—Å—Ç–æ–π –Ω–æ–º–µ—Ä
    if (preg_match('/‚Ññ?\s*(\d+)/u', $cellValue, $matches)) {
        return $matches[1] . '/1';
    }
    
    return '1/1';
}

function determineMealTypeFromContext($colIndex, $analysis, $cellValue) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å—Ç–æ–ª–±—Ü—É
    if (isset($analysis['meal_type_columns'][$colIndex])) {
        return $analysis['meal_type_columns'][$colIndex];
    }
    
    // –ó–∞—Ç–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —è—á–µ–π–∫–∏
    $cellLower = strtolower($cellValue);
    
    $breakfastPatterns = ['–∫–∞—à–∞', '–æ–º–ª–µ—Ç', '—è–∏—á–Ω–∏—Ü', '—Å—ã—Ä–Ω–∏–∫', '–æ–ª–∞–¥—å–∏', '–±–ª–∏–Ω—ã', '—Ç–≤–æ—Ä–æ–≥', '–∫–∞–∫–∞–æ', '–º–æ–ª–æ–∫–æ', '—á–∞–π'];
    $lunchPatterns = ['—Å—É–ø', '–±–æ—Ä—â', '—â–∏', '–∫–æ—Ç–ª–µ—Ç', '–º—è—Å–æ', '—Ä—ã–±–∞', '—Å–∞–ª–∞—Ç', '–∫–æ–º–ø–æ—Ç', '–±–∏—Ç–æ—á–∫', '—Ç–µ—Ñ—Ç–µ–ª'];
    $snackPatterns = ['–∫–µ—Ñ–∏—Ä', '–π–æ–≥—É—Ä—Ç', '–ø–µ—á–µ–Ω—å–µ', '—Ñ—Ä—É–∫—Ç', '—Å–æ–∫', '–ø—Ä—è–Ω–∏–∫', '–≤–∞—Ñ–ª'];
    
    foreach ($breakfastPatterns as $pattern) {
        if (strpos($cellLower, $pattern) !== false) {
            return '–∑–∞–≤—Ç—Ä–∞–∫';
        }
    }
    
    foreach ($lunchPatterns as $pattern) {
        if (strpos($cellLower, $pattern) !== false) {
            return '–æ–±–µ–¥';
        }
    }
    
    foreach ($snackPatterns as $pattern) {
        if (strpos($cellLower, $pattern) !== false) {
            return '–ø–æ–ª–¥–Ω–∏–∫';
        }
    }
    
    return '–∑–∞–≤—Ç—Ä–∞–∫'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

function determineDayFromContext($colIndex, $analysis) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ —Å—Ç–æ–ª–±—Ü—É
    if (isset($analysis['day_columns'][$colIndex])) {
        $day = $analysis['day_columns'][$colIndex];
        $dayMap = [
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' => 1,
            '–≤—Ç–æ—Ä–Ω–∏–∫' => 2,
            '—Å—Ä–µ–¥–∞' => 3,
            '—á–µ—Ç–≤–µ—Ä–≥' => 4,
            '–ø—è—Ç–Ω–∏—Ü–∞' => 5
        ];
        return $dayMap[$day] ?? 1;
    }
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
    return ($colIndex % 5) + 1;
}

function removeDuplicateDishes($dishes) {
    $uniqueDishes = [];
    $seenNames = [];
    
    foreach ($dishes as $dish) {
        $nameKey = strtolower(trim($dish['name']));
        if (!in_array($nameKey, $seenNames)) {
            $seenNames[] = $nameKey;
            $uniqueDishes[] = $dish;
        }
    }
    
    return $uniqueDishes;
}

function validateDishExtraction($dishes, $analysis) {
    $validation = [
        'total_dishes_found' => count($dishes),
        'total_excel_cells' => $analysis['total_rows'] * $analysis['total_columns'],
        'dish_cells_found' => $analysis['dish_cells_found'],
        'validation_passed' => false,
        'message' => '',
        'dish_types' => [],
        'day_distribution' => [],
        'extraction_efficiency' => 0
    ];
    
    $found = count($dishes);
    $totalCells = $analysis['total_rows'] * $analysis['total_columns'];
    
    if ($found > 0) {
        $validation['validation_passed'] = true;
        $validation['extraction_efficiency'] = round(($found / $totalCells) * 100, 2);
        $validation['message'] = "–£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {$found} –±–ª—é–¥ –∏–∑ {$totalCells} —è—á–µ–µ–∫ Excel —Ñ–∞–π–ª–∞";
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –±–ª—é–¥
        $mealTypes = [];
        $days = [];
        
        foreach ($dishes as $dish) {
            $mealTypes[$dish['meal_type']] = ($mealTypes[$dish['meal_type']] ?? 0) + 1;
            $days[$dish['day_of_week']] = ($days[$dish['day_of_week']] ?? 0) + 1;
        }
        
        $validation['dish_types'] = $mealTypes;
        $validation['day_distribution'] = $days;
    } else {
        $validation['message'] = "–ë–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞.";
    }
    
    return $validation;
}
?>