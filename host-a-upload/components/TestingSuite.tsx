import React, { useState, useEffect } from 'react';
import { useMobile } from './MobileOptimized';

interface TestResult {
  name: string;
  status: 'pending' | 'running' | 'passed' | 'failed';
  message: string;
  duration?: number;
}

export default function TestingSuite() {
  const [tests, setTests] = useState<TestResult[]>([]);
  const [isRunning, setIsRunning] = useState(false);
  const [overallStatus, setOverallStatus] = useState<'idle' | 'running' | 'passed' | 'failed'>('idle');
  const isMobile = useMobile();

  const testDefinitions = [
    {
      name: 'API Health Check',
      test: async () => {
        const response = await fetch('/api/health.php');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const data = await response.json();
        if (data.status !== 'OK') throw new Error('API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
        return 'API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ';
      }
    },
    {
      name: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞',
      test: async () => {
        const response = await fetch('/api/auth/login.php', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            email: 'director@school.test',
            password: 'password123'
          })
        });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const data = await response.json();
        if (!data.success) throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return `–î–∏—Ä–µ–∫—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${data.user.name}`;
      }
    },
    {
      name: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è',
      test: async () => {
        const response = await fetch('/api/auth/login.php', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            email: 'parent@school.test',
            password: 'password123'
          })
        });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const data = await response.json();
        if (!data.success) throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return `–†–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${data.user.name}`;
      }
    },
    {
      name: '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      test: async () => {
        const response = await fetch('/api/users.php');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const data = await response.json();
        if (!Array.isArray(data)) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
        return `–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.length}`;
      }
    },
    {
      name: '–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é',
      test: async () => {
        const response = await fetch('/api/menu.php');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const data = await response.json();
        if (!Array.isArray(data)) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
        return `–ó–∞–≥—Ä—É–∂–µ–Ω–æ –±–ª—é–¥: ${data.length}`;
      }
    },
    {
      name: '–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤',
      test: async () => {
        const response = await fetch('/api/orders.php');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const data = await response.json();
        if (!Array.isArray(data)) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
        return `–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${data.length}`;
      }
    },
    {
      name: '–ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å',
      test: async () => {
        const isMobile = window.innerWidth <= 768;
        const hasResponsiveElements = document.querySelectorAll('[style*="flexDirection"]').length > 0;
        if (!hasResponsiveElements) throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã');
        return `–ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å: ${isMobile ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–¥–µ—Å–∫—Ç–æ–ø'}`;
      }
    },
    {
      name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏',
      test: async () => {
        const startTime = performance.now();
        await fetch('/api/health.php');
        const endTime = performance.now();
        const duration = endTime - startTime;
        if (duration > 5000) throw new Error(`–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${duration.toFixed(0)}ms`);
        return `–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${duration.toFixed(0)}ms`;
      }
    }
  ];

  const runTests = async () => {
    setIsRunning(true);
    setOverallStatus('running');
    
    const testResults: TestResult[] = testDefinitions.map(test => ({
      name: test.name,
      status: 'pending',
      message: '–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
    }));
    
    setTests(testResults);

    let passedTests = 0;
    let failedTests = 0;

    for (let i = 0; i < testDefinitions.length; i++) {
      const test = testDefinitions[i];
      const startTime = performance.now();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
      setTests(prev => prev.map((t, index) => 
        index === i ? { ...t, status: 'running', message: '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' } : t
      ));

      try {
        const result = await test.test();
        const endTime = performance.now();
        const duration = endTime - startTime;
        
        setTests(prev => prev.map((t, index) => 
          index === i ? { 
            ...t, 
            status: 'passed', 
            message: result,
            duration: Math.round(duration)
          } : t
        ));
        
        passedTests++;
      } catch (error: any) {
        const endTime = performance.now();
        const duration = endTime - startTime;
        
        setTests(prev => prev.map((t, index) => 
          index === i ? { 
            ...t, 
            status: 'failed', 
            message: error.message,
            duration: Math.round(duration)
          } : t
        ));
        
        failedTests++;
      }
    }

    setOverallStatus(failedTests === 0 ? 'passed' : 'failed');
    setIsRunning(false);
  };

  const getStatusIcon = (status: TestResult['status']) => {
    switch (status) {
      case 'pending': return '‚è≥';
      case 'running': return 'üîÑ';
      case 'passed': return '‚úÖ';
      case 'failed': return '‚ùå';
      default: return '‚ùì';
    }
  };

  const getStatusColor = (status: TestResult['status']) => {
    switch (status) {
      case 'pending': return '#6c757d';
      case 'running': return '#007bff';
      case 'passed': return '#28a745';
      case 'failed': return '#dc3545';
      default: return '#6c757d';
    }
  };

  return (
    <div style={{
      padding: isMobile ? '10px' : '20px',
      maxWidth: '800px',
      margin: '0 auto',
      background: 'white',
      borderRadius: isMobile ? '10px' : '15px',
      boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
      width: '100%',
      boxSizing: 'border-box'
    }}>
      <div style={{
        textAlign: 'center',
        marginBottom: '30px'
      }}>
        <h1 style={{
          fontSize: isMobile ? '1.5rem' : '2rem',
          margin: '0 0 10px 0',
          color: '#333'
        }}>
          üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        </h1>
        <p style={{ color: '#666', margin: 0 }}>
          –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        </p>
      </div>

      {/* –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å */}
      <div style={{
        padding: '20px',
        borderRadius: '10px',
        marginBottom: '30px',
        background: overallStatus === 'passed' ? '#d4edda' : 
                   overallStatus === 'failed' ? '#f8d7da' : 
                   overallStatus === 'running' ? '#d1ecf1' : '#e9ecef',
        border: `1px solid ${
          overallStatus === 'passed' ? '#c3e6cb' : 
          overallStatus === 'failed' ? '#f5c6cb' : 
          overallStatus === 'running' ? '#bee5eb' : '#dee2e6'
        }`,
        textAlign: 'center'
      }}>
        <div style={{ fontSize: '2rem', marginBottom: '10px' }}>
          {overallStatus === 'passed' ? '‚úÖ' : 
           overallStatus === 'failed' ? '‚ùå' : 
           overallStatus === 'running' ? 'üîÑ' : '‚è≥'}
        </div>
        <h3 style={{
          margin: '0 0 10px 0',
          color: overallStatus === 'passed' ? '#155724' : 
                 overallStatus === 'failed' ? '#721c24' : 
                 overallStatus === 'running' ? '#0c5460' : '#495057'
        }}>
          {overallStatus === 'passed' ? '–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!' : 
           overallStatus === 'failed' ? '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏' : 
           overallStatus === 'running' ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é'}
        </h3>
        <p style={{
          margin: 0,
          color: overallStatus === 'passed' ? '#155724' : 
                 overallStatus === 'failed' ? '#721c24' : 
                 overallStatus === 'running' ? '#0c5460' : '#495057'
        }}>
          {overallStatus === 'passed' ? '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' : 
           overallStatus === 'failed' ? '–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫' : 
           overallStatus === 'running' ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...' : '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤'}
        </p>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ */}
      <div style={{ textAlign: 'center', marginBottom: '30px' }}>
        <button
          onClick={runTests}
          disabled={isRunning}
          style={{
            background: isRunning ? '#6c757d' : '#007bff',
            color: 'white',
            border: 'none',
            padding: isMobile ? '15px 30px' : '12px 24px',
            borderRadius: '8px',
            cursor: isRunning ? 'not-allowed' : 'pointer',
            fontSize: isMobile ? '16px' : '14px',
            fontWeight: '600',
            minWidth: isMobile ? '200px' : '150px',
            opacity: isRunning ? 0.6 : 1,
            transition: 'all 0.3s ease'
          }}
        >
          {isRunning ? 'üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' : 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã'}
        </button>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
      {tests.length > 0 && (
        <div>
          <h3 style={{
            margin: '0 0 20px 0',
            color: '#333',
            fontSize: isMobile ? '1.2rem' : '1.4rem'
          }}>
            üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          </h3>
          
          <div style={{
            display: 'flex',
            flexDirection: 'column',
            gap: '10px'
          }}>
            {tests.map((test, index) => (
              <div
                key={index}
                style={{
                  padding: '15px',
                  borderRadius: '8px',
                  border: `1px solid ${getStatusColor(test.status)}`,
                  background: test.status === 'passed' ? '#d4edda' : 
                             test.status === 'failed' ? '#f8d7da' : 
                             test.status === 'running' ? '#d1ecf1' : '#f8f9fa',
                  transition: 'all 0.3s ease'
                }}
              >
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'space-between',
                  marginBottom: '5px'
                }}>
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '10px'
                  }}>
                    <span style={{ fontSize: '1.2rem' }}>
                      {getStatusIcon(test.status)}
                    </span>
                    <span style={{
                      fontWeight: '600',
                      color: '#333'
                    }}>
                      {test.name}
                    </span>
                  </div>
                  
                  {test.duration && (
                    <span style={{
                      fontSize: '12px',
                      color: '#666',
                      background: '#e9ecef',
                      padding: '2px 8px',
                      borderRadius: '4px'
                    }}>
                      {test.duration}ms
                    </span>
                  )}
                </div>
                
                <div style={{
                  fontSize: '14px',
                  color: test.status === 'failed' ? '#721c24' : '#666',
                  marginLeft: '30px'
                }}>
                  {test.message}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {tests.length > 0 && (
        <div style={{
          marginTop: '30px',
          padding: '20px',
          background: '#f8f9fa',
          borderRadius: '10px',
          border: '1px solid #e5e7eb'
        }}>
          <h4 style={{ margin: '0 0 15px 0', color: '#333' }}>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
          <div style={{
            display: 'grid',
            gridTemplateColumns: isMobile ? '1fr' : 'repeat(3, 1fr)',
            gap: '15px',
            textAlign: 'center'
          }}>
            <div>
              <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#28a745' }}>
                {tests.filter(t => t.status === 'passed').length}
              </div>
              <div style={{ fontSize: '14px', color: '#666' }}>–ü—Ä–æ–π–¥–µ–Ω–æ</div>
            </div>
            <div>
              <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#dc3545' }}>
                {tests.filter(t => t.status === 'failed').length}
              </div>
              <div style={{ fontSize: '14px', color: '#666' }}>–ü—Ä–æ–≤–∞–ª–µ–Ω–æ</div>
            </div>
            <div>
              <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#007bff' }}>
                {tests.length}
              </div>
              <div style={{ fontSize: '14px', color: '#666' }}>–í—Å–µ–≥–æ</div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
