import * as XLSX from 'xlsx';

export interface ParsedMenuItem {
  id: number;
  name: string;
  description: string;
  price: number;
  day_of_week: string;
  meal_type: string;
  weight: string;
  recipe_number: string;
  portion: string;
  week_start: string;
  school_id: number;
  created_at: string;
}

export interface ParseResult {
  success: boolean;
  items: ParsedMenuItem[];
  errors: string[];
  warnings: string[];
  stats: {
    totalRows: number;
    validItems: number;
    skippedRows: number;
    duplicateNames: string[];
  };
}

export class ExcelMenuParser {
  private static readonly DAYS_MAP: Record<string, string> = {
    '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö',
    '–≤—Ç–æ—Ä–Ω–∏–∫': '–í–¢–û–†–ù–ò–ö',
    '—Å—Ä–µ–¥–∞': '–°–†–ï–î–ê',
    '—á–µ—Ç–≤–µ—Ä–≥': '–ß–ï–¢–í–ï–†–ì',
    '–ø—è—Ç–Ω–∏—Ü–∞': '–ü–Ø–¢–ù–ò–¶–ê',
    '—Å—É–±–±–æ—Ç–∞': '–°–£–ë–ë–û–¢–ê',
    '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': '–í–û–°–ö–†–ï–°–ï–ù–¨–ï',
    'monday': '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö',
    'tuesday': '–í–¢–û–†–ù–ò–ö',
    'wednesday': '–°–†–ï–î–ê',
    'thursday': '–ß–ï–¢–í–ï–†–ì',
    'friday': '–ü–Ø–¢–ù–ò–¶–ê',
    'saturday': '–°–£–ë–ë–û–¢–ê',
    'sunday': '–í–û–°–ö–†–ï–°–ï–ù–¨–ï'
  };

  private static readonly MEAL_TYPES_MAP: Record<string, string> = {
    '–∑–∞–≤—Ç—Ä–∞–∫': 'breakfast',
    '–æ–±–µ–¥': 'lunch',
    '–ø–æ–ª–¥–Ω–∏–∫': 'snack',
    '—É–∂–∏–Ω': 'dinner',
    'breakfast': 'breakfast',
    'lunch': 'lunch',
    'snack': 'snack',
    'dinner': 'dinner'
  };

  private static readonly REQUIRED_COLUMNS = [
    '–Ω–∞–∑–≤–∞–Ω–∏–µ', '–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞', '–±–ª—é–¥–æ', 'dish', 'name'
  ];

  private static readonly PRICE_COLUMNS = [
    '—Ü–µ–Ω–∞', '—Ü–µ–Ω–∞ –±–ª—é–¥–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'price', 'cost'
  ];

  private static readonly DAY_COLUMNS = [
    '–¥–µ–Ω—å', '–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏', '–¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏', 'day', 'weekday'
  ];

  private static readonly MEAL_COLUMNS = [
    '—Ç–∏–ø', '—Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏', '–ø—Ä–∏–µ–º –ø–∏—â–∏', 'meal', 'meal_type'
  ];

  private static readonly WEIGHT_COLUMNS = [
    '–≤–µ—Å', '–º–∞—Å—Å–∞', '–≤–µ—Å –±–ª—é–¥–∞', 'weight', 'mass'
  ];

  private static readonly RECIPE_COLUMNS = [
    '—Ä–µ—Ü–µ–ø—Ç', '–Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞', '—Ä–µ—Ü–µ–ø—Ç –Ω–æ–º–µ—Ä', 'recipe', 'recipe_number'
  ];

  private static readonly PORTION_COLUMNS = [
    '–ø–æ—Ä—Ü–∏—è', '—Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏', 'portion', 'serving'
  ];

  private static readonly DESCRIPTION_COLUMNS = [
    '–æ–ø–∏—Å–∞–Ω–∏–µ', '–æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞', 'description', 'desc'
  ];

  /**
   * –ü–∞—Ä—Å–∏—Ç Excel —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é
   */
  static async parseExcelFile(file: File): Promise<ParseResult> {
    const result: ParseResult = {
      success: false,
      items: [],
      errors: [],
      warnings: [],
      stats: {
        totalRows: 0,
        validItems: 0,
        skippedRows: 0,
        duplicateNames: []
      }
    };

    try {
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
      const arrayBuffer = await file.arrayBuffer();
      const workbook = XLSX.read(arrayBuffer, { type: 'array' });
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      
      if (!worksheet) {
        result.errors.push('–õ–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ');
        return result;
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { 
        header: 1,
        defval: '',
        raw: false 
      });

      if (!Array.isArray(jsonData) || jsonData.length === 0) {
        result.errors.push('–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö');
        return result;
      }

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const headers = this.findHeaders(jsonData);
      if (!headers) {
        result.errors.push('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ');
        return result;
      }

      console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:', headers);

      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
      const dataRows = jsonData.slice(1); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      result.stats.totalRows = dataRows.length;

      const processedItems = new Set<string>();
      let currentId = 1;

      for (let i = 0; i < dataRows.length; i++) {
        const row = dataRows[i] as any[];
        const rowNumber = i + 2; // +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Å 1 –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏

        try {
          const item = this.parseRow(row, headers, currentId, rowNumber);
          
          if (item) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            const itemKey = `${item.name}-${item.day_of_week}-${item.meal_type}`;
            if (processedItems.has(itemKey)) {
              result.stats.duplicateNames.push(item.name);
              result.warnings.push(`–°—Ç—Ä–æ–∫–∞ ${rowNumber}: –î—É–±–ª–∏–∫–∞—Ç –±–ª—é–¥–∞ "${item.name}"`);
            } else {
              processedItems.add(itemKey);
              result.items.push(item);
              currentId++;
              result.stats.validItems++;
            }
          } else {
            result.stats.skippedRows++;
            result.warnings.push(`–°—Ç—Ä–æ–∫–∞ ${rowNumber}: –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)`);
          }
        } catch (error: any) {
          result.errors.push(`–°—Ç—Ä–æ–∫–∞ ${rowNumber}: ${error.message}`);
          result.stats.skippedRows++;
        }
      }

      result.success = result.items.length > 0;
      
      if (result.items.length === 0) {
        result.errors.push('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞');
      }

      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:', result.stats);
      return result;

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel:', error);
      result.errors.push(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
      return result;
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
   */
  private static findHeaders(data: any[][]): Record<string, number> | null {
    if (data.length === 0) return null;

    const firstRow = data[0];
    const headers: Record<string, number> = {};

    // –ò—â–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    for (let i = 0; i < firstRow.length; i++) {
      const cellValue = String(firstRow[i] || '').toLowerCase().trim();
      
      // –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
      if (this.REQUIRED_COLUMNS.some(col => cellValue.includes(col))) {
        headers.name = i;
      }
      // –¶–µ–Ω–∞
      else if (this.PRICE_COLUMNS.some(col => cellValue.includes(col))) {
        headers.price = i;
      }
      // –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
      else if (this.DAY_COLUMNS.some(col => cellValue.includes(col))) {
        headers.day = i;
      }
      // –¢–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
      else if (this.MEAL_COLUMNS.some(col => cellValue.includes(col))) {
        headers.meal = i;
      }
      // –í–µ—Å
      else if (this.WEIGHT_COLUMNS.some(col => cellValue.includes(col))) {
        headers.weight = i;
      }
      // –†–µ—Ü–µ–ø—Ç
      else if (this.RECIPE_COLUMNS.some(col => cellValue.includes(col))) {
        headers.recipe = i;
      }
      // –ü–æ—Ä—Ü–∏—è
      else if (this.PORTION_COLUMNS.some(col => cellValue.includes(col))) {
        headers.portion = i;
      }
      // –û–ø–∏—Å–∞–Ω–∏–µ
      else if (this.DESCRIPTION_COLUMNS.some(col => cellValue.includes(col))) {
        headers.description = i;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!headers.name) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–ª—é–¥–∞');
      return null;
    }

    return headers;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
   */
  private static parseRow(
    row: any[], 
    headers: Record<string, number>, 
    id: number, 
    rowNumber: number
  ): ParsedMenuItem | null {
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
    const name = String(row[headers.name] || '').trim();
    if (!name) {
      throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
    const priceValue = row[headers.price];
    const price = this.parsePrice(priceValue);
    if (price <= 0) {
      throw new Error('–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    const dayValue = headers.day !== undefined ? String(row[headers.day] || '').trim() : '';
    const day_of_week = this.normalizeDay(dayValue);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    const mealValue = headers.meal !== undefined ? String(row[headers.meal] || '').trim() : '';
    const meal_type = this.normalizeMealType(mealValue);

    // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    const description = headers.description !== undefined 
      ? String(row[headers.description] || '').trim() 
      : '';
    
    const weight = headers.weight !== undefined 
      ? String(row[headers.weight] || '').trim() 
      : '';
    
    const recipe_number = headers.recipe !== undefined 
      ? String(row[headers.recipe] || '').trim() 
      : '';
    
    const portion = headers.portion !== undefined 
      ? String(row[headers.portion] || '').trim() 
      : '';

    return {
      id,
      name,
      description,
      price,
      day_of_week,
      meal_type,
      weight,
      recipe_number,
      portion,
      week_start: this.getCurrentWeekStart(),
      school_id: 1,
      created_at: new Date().toISOString()
    };
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Ü–µ–Ω—É –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
   */
  private static parsePrice(value: any): number {
    if (typeof value === 'number') {
      return Math.max(0, value);
    }

    const str = String(value || '').trim();
    if (!str) return 0;

    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
    const cleanStr = str.replace(/[^\d.,]/g, '');
    
    // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
    const normalizedStr = cleanStr.replace(',', '.');
    
    const price = parseFloat(normalizedStr);
    return isNaN(price) ? 0 : Math.max(0, price);
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
   */
  private static normalizeDay(day: string): string {
    if (!day) return '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö';
    
    const normalized = day.toLowerCase().trim();
    return this.DAYS_MAP[normalized] || '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö';
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
   */
  private static normalizeMealType(meal: string): string {
    if (!meal) return 'lunch';
    
    const normalized = meal.toLowerCase().trim();
    return this.MEAL_TYPES_MAP[normalized] || 'lunch';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
   */
  private static getCurrentWeekStart(): string {
    const now = new Date();
    const dayOfWeek = now.getDay();
    const monday = new Date(now);
    monday.setDate(now.getDate() - dayOfWeek + 1);
    return monday.toISOString().split('T')[0];
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
   */
  static validateFile(file: File): { valid: boolean; error?: string } {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const validTypes = [
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
      'application/vnd.ms-excel', // .xls
      'text/csv' // .csv
    ];

    if (!validTypes.includes(file.type)) {
      return {
        valid: false,
        error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xlsx, .xls) –∏ CSV'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
    const maxSize = 10 * 1024 * 1024; // 10MB
    if (file.size > maxSize) {
      return {
        valid: false,
        error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
    if (file.size === 0) {
      return {
        valid: false,
        error: '–§–∞–π–ª –ø—É—Å—Ç'
      };
    }

    return { valid: true };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω Excel —Ñ–∞–π–ª–∞
   */
  static createTemplate(): void {
    const templateData = [
      ['–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞', '–¶–µ–Ω–∞', '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', '–¢–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏', '–í–µ—Å', '–ù–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞', '–ü–æ—Ä—Ü–∏—è', '–û–ø–∏—Å–∞–Ω–∏–µ'],
      ['–°—É–ø –æ–≤–æ—â–Ω–æ–π', '50', '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–æ–±–µ–¥', '250–≥', '1/1', '1 –ø–æ—Ä—Ü–∏—è', '–°–≤–µ–∂–∏–µ –æ–≤–æ—â–∏'],
      ['–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è', '30', '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–∑–∞–≤—Ç—Ä–∞–∫', '200–≥', '2/1', '1 –ø–æ—Ä—Ü–∏—è', '–° –º–æ–ª–æ–∫–æ–º'],
      ['–ö–æ—Ç–ª–µ—Ç–∞ –º—è—Å–Ω–∞—è', '80', '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–æ–±–µ–¥', '100–≥', '3/1', '1 –ø–æ—Ä—Ü–∏—è', '–ì–æ–≤—è–¥–∏–Ω–∞'],
      ['–§—Ä—É–∫—Ç—ã', '25', '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–ø–æ–ª–¥–Ω–∏–∫', '150–≥', '4/1', '1 –ø–æ—Ä—Ü–∏—è', '–°–µ–∑–æ–Ω–Ω—ã–µ —Ñ—Ä—É–∫—Ç—ã']
    ];

    const worksheet = XLSX.utils.aoa_to_sheet(templateData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, '–ú–µ–Ω—é');

    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    XLSX.writeFile(workbook, 'menu_template.xlsx');
  }
}
