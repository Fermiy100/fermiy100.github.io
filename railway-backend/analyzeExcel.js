/**
 * –ê–ù–ê–õ–ò–ó EXCEL –§–ê–ô–õ–ê
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
 */

import XLSX from 'xlsx';
import fs from 'fs';

const filePath = '../2-–Ø –ù–ï–î–ï–õ–Ø –î–õ–Ø –ó–ê–ö–ê–ó–ê  22.09-26.09 (–∫–æ–ø–∏—è) ‚Äî –∫–æ–ø–∏—è.xlsx';

console.log('üîç –ê–ù–ê–õ–ò–ó–ò–†–£–Æ EXCEL –§–ê–ô–õ...\n');

try {
  // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
  const buffer = fs.readFileSync(filePath);
  const workbook = XLSX.read(buffer, { type: 'buffer' });
  
  console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:');
  console.log(`   –õ–∏—Å—Ç—ã: ${workbook.SheetNames.join(', ')}`);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
  const sheetName = workbook.SheetNames[0];
  const worksheet = workbook.Sheets[sheetName];
  
  console.log(`\nüìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–∏—Å—Ç: "${sheetName}"`);
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
  const range = XLSX.utils.decode_range(worksheet['!ref']);
  console.log(`   –î–∏–∞–ø–∞–∑–æ–Ω: ${worksheet['!ref']}`);
  console.log(`   –°—Ç—Ä–æ–∫: ${range.e.r + 1}, –ö–æ–ª–æ–Ω–æ–∫: ${range.e.c + 1}`);
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
  const jsonData = XLSX.utils.sheet_to_json(worksheet, { 
    header: 1, 
    raw: false, 
    defval: '',
    blankrows: false
  });
  
  console.log('\nüìù –°–û–î–ï–†–ñ–ò–ú–û–ï –¢–ê–ë–õ–ò–¶–´:');
  console.log('=' * 80);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫
  jsonData.slice(0, 20).forEach((row, index) => {
    console.log(`–°—Ç—Ä–æ–∫–∞ ${index + 1}: [${row.join(' | ')}]`);
  });
  
  if (jsonData.length > 20) {
    console.log(`... –∏ –µ—â–µ ${jsonData.length - 20} —Å—Ç—Ä–æ–∫`);
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  console.log('\nüîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´:');
  
  // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  let headerRow = -1;
  for (let i = 0; i < Math.min(10, jsonData.length); i++) {
    const row = jsonData[i];
    if (row && row.some(cell => 
      cell && typeof cell === 'string' && 
      (cell.toLowerCase().includes('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫') || 
       cell.toLowerCase().includes('–≤—Ç–æ—Ä–Ω–∏–∫') ||
       cell.toLowerCase().includes('–¥–µ–Ω—å'))
    )) {
      headerRow = i;
      break;
    }
  }
  
  if (headerRow >= 0) {
    console.log(`   –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ: ${headerRow + 1}`);
    console.log(`   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: [${jsonData[headerRow].join(' | ')}]`);
  }
  
  // –ò—â–µ–º –±–ª—é–¥–∞
  console.log('\nüçΩÔ∏è –ü–û–ò–°–ö –ë–õ–Æ–î:');
  const dishKeywords = ['–±–æ—Ä—â', '—Å—É–ø', '–∫–∞—à–∞', '–∫–æ—Ç–ª–µ—Ç–∞', '–º—è—Å–æ', '—Ä—ã–±–∞', '—Å–∞–ª–∞—Ç', '–∫–æ–º–ø–æ—Ç'];
  let dishCount = 0;
  
  jsonData.forEach((row, rowIndex) => {
    if (row && Array.isArray(row)) {
      row.forEach((cell, colIndex) => {
        if (cell && typeof cell === 'string') {
          const cellLower = cell.toLowerCase();
          if (dishKeywords.some(keyword => cellLower.includes(keyword))) {
            console.log(`   –°—Ç—Ä–æ–∫–∞ ${rowIndex + 1}, –ö–æ–ª–æ–Ω–∫–∞ ${colIndex + 1}: "${cell}"`);
            dishCount++;
          }
        }
      });
    }
  });
  
  console.log(`   –ù–∞–π–¥–µ–Ω–æ –±–ª—é–¥: ${dishCount}`);
  
  // –ò—â–µ–º —Ü–µ–Ω—ã
  console.log('\nüí∞ –ü–û–ò–°–ö –¶–ï–ù:');
  const pricePattern = /(\d+)\s*(—Ä—É–±|‚ÇΩ|—Ä\.?)/gi;
  let priceCount = 0;
  
  jsonData.forEach((row, rowIndex) => {
    if (row && Array.isArray(row)) {
      row.forEach((cell, colIndex) => {
        if (cell && typeof cell === 'string') {
          const match = cell.match(pricePattern);
          if (match) {
            console.log(`   –°—Ç—Ä–æ–∫–∞ ${rowIndex + 1}, –ö–æ–ª–æ–Ω–∫–∞ ${colIndex + 1}: "${cell}" -> ${match[1]}‚ÇΩ`);
            priceCount++;
          }
        }
      });
    }
  });
  
  console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω: ${priceCount}`);
  
  console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!');
  
} catch (error) {
  console.error('‚ùå –û–®–ò–ë–ö–ê:', error.message);
}
