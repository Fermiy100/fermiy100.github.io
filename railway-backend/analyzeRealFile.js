/**
 * –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ì–û EXCEL –§–ê–ô–õ–ê
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ "2-–Ø –ù–ï–î–ï–õ–Ø –î–õ–Ø –ó–ê–ö–ê–ó–ê 22.09-26.09 (–∫–æ–ø–∏—è) ‚Äî –∫–æ–ø–∏—è.xlsx"
 */

import { ImprovedMenuParser } from './improvedMenuParser.js';
import XLSX from 'xlsx';
import fs from 'fs';

async function analyzeRealFile() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Excel —Ñ–∞–π–ª...');
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const filePath = '../2-–Ø –ù–ï–î–ï–õ–Ø –î–õ–Ø –ó–ê–ö–ê–ó–ê  22.09-26.09 (–∫–æ–ø–∏—è) ‚Äî –∫–æ–ø–∏—è.xlsx';
    const buffer = fs.readFileSync(filePath);
    
    console.log(`üìÅ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: ${buffer.length} –±–∞–π—Ç`);
    
    // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
    
    console.log(`üìä –õ–∏—Å—Ç: ${sheetName}`);
    console.log(`üìè –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${jsonData.length} —Å—Ç—Ä–æ–∫`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    console.log('\nüìã –ü–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞:');
    for (let i = 0; i < Math.min(20, jsonData.length); i++) {
      const row = jsonData[i];
      console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1}:`, row);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    console.log('\nüèóÔ∏è –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:');
    
    // –ò—â–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    const dayColumns = [];
    for (let rowIndex = 0; rowIndex < Math.min(10, jsonData.length); rowIndex++) {
      const row = jsonData[rowIndex];
      if (!row) continue;
      
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        const cell = row[colIndex];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.toLowerCase().trim();
        if (cellText.includes('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫') || cellText.includes('–≤—Ç–æ—Ä–Ω–∏–∫') || 
            cellText.includes('—Å—Ä–µ–¥–∞') || cellText.includes('—á–µ—Ç–≤–µ—Ä–≥') || 
            cellText.includes('–ø—è—Ç–Ω–∏—Ü–∞')) {
          dayColumns.push({
            day: cellText,
            column: colIndex,
            row: rowIndex
          });
        }
      }
    }
    
    console.log('üìÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:', dayColumns);
    
    // –ò—â–µ–º —Ç–∏–ø—ã –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    const mealRows = [];
    for (let rowIndex = 0; rowIndex < jsonData.length; rowIndex++) {
      const row = jsonData[rowIndex];
      if (!row) continue;
      
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        const cell = row[colIndex];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.toLowerCase().trim();
        if (cellText.includes('–∑–∞–≤—Ç—Ä–∞–∫') || cellText.includes('–æ–±–µ–¥') || 
            cellText.includes('–ø–æ–ª–¥–Ω–∏–∫') || cellText.includes('—É–∂–∏–Ω')) {
          mealRows.push({
            meal: cellText,
            row: rowIndex,
            column: colIndex
          });
        }
      }
    }
    
    console.log('üçΩÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏:', mealRows);
    
    // –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä:');
    const parser = new ImprovedMenuParser();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log('\nüîç –ò—â–µ–º "–û –ë –ï –î" –≤ —Ñ–∞–π–ª–µ:');
    for (let rowIndex = 0; rowIndex < Math.min(25, jsonData.length); rowIndex++) {
      const row = jsonData[rowIndex];
      if (!row) continue;
      
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        const cell = row[colIndex];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.trim().toLowerCase();
        if (cellText.includes('–æ –± –µ –¥') || cellText.includes('–æ–±–µ–¥')) {
          console.log(`  –ù–∞–π–¥–µ–Ω "–û –ë –ï –î" –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}, –∫–æ–ª–æ–Ω–∫–µ ${colIndex + 1}: "${cell}"`);
        }
      }
    }
    
    const items = parser.parseExcelFile(buffer);
    
    console.log(`‚úÖ –ü–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª ${items.length} –±–ª—é–¥`);
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const validation = parser.validateParsedMenu(items);
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:');
    console.log(`  - –í–∞–ª–∏–¥–Ω–æ: ${validation.isValid}`);
    console.log(`  - –û—à–∏–±–∫–∏: ${validation.errors.length}`);
    console.log(`  - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${validation.warnings.length}`);
    console.log(`  - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, validation.stats);
    
    if (validation.errors.length > 0) {
      console.log('‚ùå –û—à–∏–±–∫–∏:');
      validation.errors.forEach(error => console.log(`  - ${error}`));
    }
    
    if (validation.warnings.length > 0) {
      console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
      validation.warnings.forEach(warning => console.log(`  - ${warning}`));
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±–ª—é–¥
    console.log('\nüçΩÔ∏è –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±–ª—é–¥:');
    items.slice(0, 15).forEach((item, index) => {
      console.log(`  ${index + 1}. ${item.name} (${item.meal_type}, –¥–µ–Ω—å ${item.day_of_week})`);
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    const groupedByDay = items.reduce((acc, item) => {
      if (!acc[item.day_of_week]) acc[item.day_of_week] = [];
      acc[item.day_of_week].push(item);
      return acc;
    }, {});
    
    console.log('\nüìÖ –ë–ª—é–¥–∞ –ø–æ –¥–Ω—è–º:');
    Object.keys(groupedByDay).forEach(day => {
      const dayNames = ['', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
      console.log(`  ${dayNames[day]}: ${groupedByDay[day].length} –±–ª—é–¥`);
      groupedByDay[day].slice(0, 3).forEach(item => {
        console.log(`    - ${item.name} (${item.meal_type})`);
      });
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    const groupedByMeal = items.reduce((acc, item) => {
      if (!acc[item.meal_type]) acc[item.meal_type] = [];
      acc[item.meal_type].push(item);
      return acc;
    }, {});
    
    console.log('\nüç¥ –ë–ª—é–¥–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏:');
    Object.keys(groupedByMeal).forEach(meal => {
      console.log(`  ${meal}: ${groupedByMeal[meal].length} –±–ª—é–¥`);
      groupedByMeal[meal].slice(0, 3).forEach(item => {
        console.log(`    - ${item.name} (–¥–µ–Ω—å ${item.day_of_week})`);
      });
    });
    
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeRealFile();
