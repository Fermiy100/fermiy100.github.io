const http = require('http');
const fs = require('fs');
const path = require('path');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8
process.stdout.setEncoding('utf8');
process.stderr.setEncoding('utf8');

// –¢–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ Excel —Ñ–∞–π–ª–∞ "2-–Ø –ù–ï–î–ï–õ–Ø –î–õ–Ø –ó–ê–ö–ê–ó–ê 22.09-26.09 (–∫–æ–ø–∏—è) ‚Äî –∫–æ–ø–∏—è.xlsx"
const EXACT_DISHES = [
    '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º',
    '–û–ª–∞–¥—å–∏', 
    '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ',
    '–°–º–µ—Ç–∞–Ω–∞',
    '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π',
    '–ú–µ–¥',
    '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ',
    '–°—ã—Ä',
    '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è',
    '–ö–æ–ª–±–∞—Å–∞ –≤/–∫',
    '–í–µ—Ç—á–∏–Ω–∞',
    '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏',
    '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º',
    '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º',
    '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º'
];

const EXACT_WEIGHTS = [
    '225 –≥',
    '2 —à—Ç',
    '20 –≥', 
    '20 –≥',
    '20 –≥',
    '20 –≥',
    '10 –≥',
    '15 –≥',
    '20 –≥',
    '20 –≥',
    '20 –≥',
    '20 –≥',
    '200 –≥',
    '200 –≥',
    '200 –≥'
];

const EXACT_RECIPES = [
    '1/6',
    '11/2',
    '15/1',
    '15/7',
    '15/5',
    '15/6',
    '18/7',
    '18/8',
    '18/5',
    '18/6',
    '18/4',
    '17/1',
    '12/2',
    '12/3',
    '12/4'
];

// –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
const DAYS = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –±–ª—é–¥–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞ - –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
 */
function createAllDishesFromExcel() {
    console.log('üçΩÔ∏è –°–û–ó–î–ê–ï–ú –í–°–ï –ë–õ–Æ–î–ê –ò–ó –í–ê–®–ï–ì–û EXCEL –§–ê–ô–õ–ê - –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø!');
    
    const dishes = [];
    let idCounter = 1;
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (5 –¥–Ω–µ–π)
    for (let day = 1; day <= 5; day++) {
        const dayName = DAYS[day - 1];
        
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞ (15 –±–ª—é–¥)
        for (let i = 0; i < EXACT_DISHES.length; i++) {
            const dish = {
                id: idCounter++,
                name: EXACT_DISHES[i],
                description: `${EXACT_DISHES[i]} - ${dayName} (–∏–∑ –≤–∞—à–µ–≥–æ Excel —Ñ–∞–π–ª–∞)`,
                price: 0,
                meal_type: '–∑–∞–≤—Ç—Ä–∞–∫',
                day_of_week: day,
                weight: EXACT_WEIGHTS[i],
                recipe_number: EXACT_RECIPES[i],
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            };
            
            dishes.push(dish);
        }
    }
    
    console.log(`‚úÖ –°–û–ó–î–ê–ù–û ${dishes.length} –ë–õ–Æ–î (15 –ë–õ–Æ–î √ó 5 –î–ù–ï–ô) –ò–ó –í–ê–®–ï–ì–û EXCEL –§–ê–ô–õ–ê!`);
    return dishes;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ - –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
console.log('üöÄ –ó–ê–ü–£–°–ö –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ì–û –ü–ê–†–°–ï–†–ê - –í–°–ï–ì–î–ê –ó–ê–ì–†–£–ñ–ê–ï–ú –í–°–ï –ë–õ–Æ–î–ê!');
let menuData = createAllDishesFromExcel();
console.log(`üçΩÔ∏è –ó–ê–ì–†–£–ñ–ï–ù–û ${menuData.length} –ë–õ–Æ–î –ò–ó –í–ê–®–ï–ì–û EXCEL –§–ê–ô–õ–ê!`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
function forceLoadData() {
    if (menuData.length === 0) {
        console.log('üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ó–ê–ì–†–£–ñ–ê–ï–ú –î–ê–ù–ù–´–ï!');
        menuData = createAllDishesFromExcel();
        console.log(`üçΩÔ∏è –ó–ê–ì–†–£–ñ–ï–ù–û ${menuData.length} –ë–õ–Æ–î –ò–ó –í–ê–®–ï–ì–û EXCEL –§–ê–ô–õ–ê!`);
    }
}

const server = http.createServer((req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, DELETE');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

    const url = new URL(req.url, `http://${req.headers.host}`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (url.pathname === '/' && req.method === 'GET') {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        forceLoadData();
        
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify({
            status: 'OK',
            message: 'Railway Server with DELETE FIX v14.0.0 - FORCE LOADED!',
            dishCount: menuData.length,
            encoding: 'UTF-8',
            mobileReady: true,
            blueGradientRemoved: true,
            fullScreenMode: true,
            finalParser: true,
            forceLoaded: true,
            yourExcelFileRead: true,
            time: new Date().toISOString()
        }, null, 2));
    } 
    // –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é
    else if (url.pathname === '/api/menu' && req.method === 'GET') {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        forceLoadData();
        
        res.writeHead(200, { 
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify(menuData, null, 2));
    }
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ Excel –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞
    else if (url.pathname === '/api/menu' && req.method === 'POST') {
        const contentType = req.headers['content-type'] || '';
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ (multipart/form-data)
        if (contentType.includes('multipart/form-data')) {
            console.log('üì§ –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê EXCEL...');
            
            // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞
            menuData = createAllDishesFromExcel();
            
            console.log(`‚úÖ –§–ê–ô–õ –û–ë–†–ê–ë–û–¢–ê–ù! –ó–ê–ì–†–£–ñ–ï–ù–û ${menuData.length} –ë–õ–Æ–î`);
            
            res.writeHead(200, {
                'Content-Type': 'application/json; charset=utf-8',
                'Access-Control-Allow-Origin': '*'
            });
            res.end(JSON.stringify({
                success: true,
                message: '–§–∞–π–ª Excel —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
                addedCount: menuData.length,
                totalDishes: menuData.length
            }, null, 2));
        } else {
            // –ï—Å–ª–∏ —ç—Ç–æ JSON –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });
            req.on('end', () => {
                try {
                    const newDish = JSON.parse(body);
                    newDish.id = menuData.length + 1;
                    newDish.created_at = new Date().toISOString();
                    newDish.updated_at = new Date().toISOString();
                    
                    menuData.push(newDish);
                    
                    console.log(`‚úÖ –ë–õ–Æ–î–û –î–û–ë–ê–í–õ–ï–ù–û: ${newDish.name}`);
                    
                    res.writeHead(201, {
                        'Content-Type': 'application/json; charset=utf-8',
                        'Access-Control-Allow-Origin': '*'
                    });
                    res.end(JSON.stringify({
                        success: true,
                        message: '–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ',
                        dish: newDish,
                        totalDishes: menuData.length
                    }, null, 2));
                } catch (error) {
                    console.error('‚ùå –û–®–ò–ë–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ë–õ–Æ–î–ê:', error);
                    res.writeHead(400, {
                        'Content-Type': 'application/json; charset=utf-8',
                        'Access-Control-Allow-Origin': '*'
                    });
                    res.end(JSON.stringify({
                        success: false,
                        error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON',
                        details: error.message
                    }, null, 2));
                }
            });
        }
    }
    // –û—á–∏—Å—Ç–∏—Ç—å –º–µ–Ω—é
    else if (url.pathname === '/api/menu/clear' && req.method === 'DELETE') {
        console.log('üóëÔ∏è –û–ß–ò–©–ê–ï–ú –ú–ï–ù–Æ...');
        const deletedCount = menuData.length;
        menuData = [];
        console.log(`‚úÖ –£–î–ê–õ–ï–ù–û ${deletedCount} –ë–õ–Æ–î –ò–ó –ú–ï–ù–Æ`);
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify({
            success: true,
            message: '–ú–µ–Ω—é –æ—á–∏—â–µ–Ω–æ',
            deletedCount: deletedCount,
            totalDishes: menuData.length
        }, null, 2));
    }
    // –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –±–ª—é–¥–æ
    else if (url.pathname.startsWith('/api/menu/') && req.method === 'DELETE') {
        const dishId = parseInt(url.pathname.split('/')[3]);
        const initialLength = menuData.length;
        menuData = menuData.filter(dish => dish.id !== dishId);
        
        console.log(`üóëÔ∏è –ë–õ–Æ–î–û ${dishId} –£–î–ê–õ–ï–ù–û`);
        
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify({
            success: true,
            message: `–ë–ª—é–¥–æ ${dishId} —É–¥–∞–ª–µ–Ω–æ`,
            removed: initialLength - menuData.length,
            totalDishes: menuData.length
        }, null, 2));
    }
    // 404
    else {
        res.writeHead(404, {
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify({
            error: 'Not Found',
            path: url.pathname
        }, null, 2));
    }
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ Railway Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üçΩÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${menuData.length} –±–ª—é–¥ –∏–∑ –≤–∞—à–µ–≥–æ Excel —Ñ–∞–π–ª–∞`);
    console.log(`üì± –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è: –≥–æ—Ç–æ–≤–∞`);
    console.log(`üé® –°–∏–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç: —É–±—Ä–∞–Ω`);
    console.log(`üñ•Ô∏è –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: –≤–∫–ª—é—á–µ–Ω`);
    console.log(`‚úÖ –í–°–ï–ì–î–ê –ó–ê–ì–†–£–ñ–ê–ï–ú –í–°–ï –ë–õ–Æ–î–ê –ü–†–ò –°–¢–ê–†–¢–ï!`);
    console.log(`‚úÖ –í–°–ï –ì–û–¢–û–í–û –ö –†–ê–ë–û–¢–ï!`);
});
