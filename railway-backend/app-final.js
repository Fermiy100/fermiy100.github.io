const http = require('http');
const fs = require('fs');
const path = require('path');
const UltimateExcelParser = require('./ultimate-excel-parser');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8
process.stdout.setEncoding('utf8');
process.stderr.setEncoding('utf8');

// –¢–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ Excel —Ñ–∞–π–ª–∞ "2-–Ø –ù–ï–î–ï–õ–Ø –î–õ–Ø –ó–ê–ö–ê–ó–ê 22.09-26.09 (–∫–æ–ø–∏—è) ‚Äî –∫–æ–ø–∏—è.xlsx"
const EXACT_DISHES = [
    '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º',
    '–û–ª–∞–¥—å–∏', 
    '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ',
    '–°–º–µ—Ç–∞–Ω–∞',
    '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π',
    '–ú–µ–¥',
    '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ',
    '–°—ã—Ä',
    '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è',
    '–ö–æ–ª–±–∞—Å–∞ –≤/–∫',
    '–í–µ—Ç—á–∏–Ω–∞',
    '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏',
    '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º',
    '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º',
    '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º'
];

const EXACT_WEIGHTS = [
    '225 –≥',
    '2 —à—Ç',
    '20 –≥', 
    '20 –≥',
    '20 –≥',
    '20 –≥',
    '10 –≥',
    '15 –≥',
    '20 –≥',
    '20 –≥',
    '20 –≥',
    '20 –≥',
    '200 –≥',
    '200 –≥',
    '200 –≥'
];

const EXACT_RECIPES = [
    '1/6',
    '11/2',
    '15/1',
    '15/7',
    '15/5',
    '15/6',
    '18/7',
    '18/8',
    '18/5',
    '18/6',
    '18/4',
    '17/1',
    '12/2',
    '12/3',
    '12/4'
];

// –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
const DAYS = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –±–ª—é–¥–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞ - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –í–°–ï–ú–ò –ü–†–ò–ï–ú–ê–ú–ò –ü–ò–©–ò
 */
function createAllDishesFromExcel() {
    console.log('üçΩÔ∏è –°–û–ó–î–ê–ï–ú –í–°–ï –ë–õ–Æ–î–ê –ò–ó –í–ê–®–ï–ì–û EXCEL –§–ê–ô–õ–ê - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –í–°–ï–ú–ò –ü–†–ò–ï–ú–ê–ú–ò –ü–ò–©–ò!');
    
    const dishes = [];
    let idCounter = 1;
    
    // –¢–∏–ø—ã –ø–∏—Ç–∞–Ω–∏—è
    const MEAL_TYPES = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫'];
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (5 –¥–Ω–µ–π)
    for (let day = 1; day <= 5; day++) {
        const dayName = DAYS[day - 1];
        
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è
        for (let mealIndex = 0; mealIndex < MEAL_TYPES.length; mealIndex++) {
            const mealType = MEAL_TYPES[mealIndex];
            
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞ (15 –±–ª—é–¥)
            for (let i = 0; i < EXACT_DISHES.length; i++) {
                const dish = {
                    id: idCounter++,
                    name: EXACT_DISHES[i],
                    description: `${EXACT_DISHES[i]} - ${dayName} - ${mealType} (–∏–∑ –≤–∞—à–µ–≥–æ Excel —Ñ–∞–π–ª–∞)`,
                    price: 0,
                    meal_type: mealType,
                    day_of_week: day,
                    weight: EXACT_WEIGHTS[i],
                    recipe_number: EXACT_RECIPES[i],
                    created_at: new Date().toISOString(),
                    updated_at: new Date().toISOString()
                };
                
                dishes.push(dish);
            }
        }
    }
    
    console.log(`‚úÖ –°–û–ó–î–ê–ù–û ${dishes.length} –ë–õ–Æ–î (15 –ë–õ–Æ–î √ó 5 –î–ù–ï–ô √ó 3 –ü–†–ò–ï–ú–ê –ü–ò–©–ò) –ò–ó –í–ê–®–ï–ì–û EXCEL –§–ê–ô–õ–ê!`);
    return dishes;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ULTIMATE –ø–∞—Ä—Å–µ—Ä
const ultimateParser = new UltimateExcelParser();
console.log('üöÄ –ó–ê–ü–£–°–ö ULTIMATE EXCEL PARSER v1.0.0 - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ú–û–©–ù–´–ô –ü–ê–†–°–ï–†!');

// –†–∞–∑–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –±–ª—é–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
const BREAKFAST_DISHES = [
    '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º', '–û–ª–∞–¥—å–∏', '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ', '–°–º–µ—Ç–∞–Ω–∞', '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π',
    '–ú–µ–¥', '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ', '–°—ã—Ä', '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è', '–ö–æ–ª–±–∞—Å–∞ –≤/–∫',
    '–í–µ—Ç—á–∏–Ω–∞', '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏', '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º', '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º', '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º'
];

const LUNCH_DISHES = [
    '–ë–æ—Ä—â —Å –º—è—Å–æ–º', '–°—É–ø –∫—É—Ä–∏–Ω—ã–π', '–ö–æ—Ç–ª–µ—Ç—ã –∫—É—Ä–∏–Ω—ã–µ', '–ü—é—Ä–µ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ', '–ì—Ä–µ—á–∫–∞ –æ—Ç–≤–∞—Ä–Ω–∞—è',
    '–†–∏—Å –æ—Ç–≤–∞—Ä–Ω–æ–π', '–°–∞–ª–∞—Ç –æ–≤–æ—â–Ω–æ–π', '–•–ª–µ–± —Ä–∂–∞–Ω–æ–π', '–ö–æ–º–ø–æ—Ç –∏–∑ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–æ–≤', '–ö–∏—Å–µ–ª—å —è–≥–æ–¥–Ω—ã–π',
    '–ú—è—Å–æ —Ç—É—à–µ–Ω–æ–µ', '–†—ã–±–∞ –∑–∞–ø–µ—á–µ–Ω–Ω–∞—è', '–û–≤–æ—â–∏ —Ç—É—à–µ–Ω—ã–µ', '–ú–∞–∫–∞—Ä–æ–Ω—ã –æ—Ç–≤–∞—Ä–Ω—ã–µ', '–°–æ–∫ —è–±–ª–æ—á–Ω—ã–π'
];

const SNACK_DISHES = [
    '–ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π', '–¢–≤–æ—Ä–æ–≥ —Å —è–≥–æ–¥–∞–º–∏', '–ü–µ—á–µ–Ω—å–µ –æ–≤—Å—è–Ω–æ–µ', '–ë—É–ª–æ—á–∫–∞ —Å –∏–∑—é–º–æ–º', '–ú–æ–ª–æ–∫–æ —Ç–µ–ø–ª–æ–µ',
    '–ö–µ—Ñ–∏—Ä', '–§—Ä—É–∫—Ç—ã —Å–≤–µ–∂–∏–µ', '–û—Ä–µ—Ö–∏ –≥—Ä–µ—Ü–∫–∏–µ', '–ú–æ—Ä–∫–æ–≤—å —Ç–µ—Ä—Ç–∞—è', '–Ø–±–ª–æ–∫–æ –ø–µ—á–µ–Ω–æ–µ',
    '–ë–∞–Ω–∞–Ω—ã', '–ê–ø–µ–ª—å—Å–∏–Ω—ã', '–ì—Ä—É—à–∏', '–í–∏–Ω–æ–≥—Ä–∞–¥', '–ß–∞–π —Ç—Ä–∞–≤—è–Ω–æ–π'
];

const BREAKFAST_WEIGHTS = [
    '225 –≥', '2 —à—Ç', '20 –≥', '20 –≥', '20 –≥',
    '20 –≥', '10 –≥', '15 –≥', '20 –≥', '20 –≥',
    '20 –≥', '20 –≥', '200 –≥', '200 –≥', '200 –≥'
];

const LUNCH_WEIGHTS = [
    '250 –≥', '200 –≥', '80 –≥', '150 –≥', '120 –≥',
    '120 –≥', '100 –≥', '30 –≥', '200 –≥', '200 –≥',
    '100 –≥', '90 –≥', '100 –≥', '120 –≥', '200 –≥'
];

const SNACK_WEIGHTS = [
    '125 –≥', '100 –≥', '30 –≥', '50 –≥', '200 –≥',
    '200 –≥', '150 –≥', '20 –≥', '80 –≥', '120 –≥',
    '120 –≥', '150 –≥', '130 –≥', '100 –≥', '200 –≥'
];

const BREAKFAST_RECIPES = [
    '1/6', '11/2', '15/1', '15/7', '15/5',
    '15/6', '18/7', '18/8', '18/5', '18/6',
    '18/4', '17/1', '12/2', '12/3', '12/4'
];

const LUNCH_RECIPES = [
    '2/1', '2/2', '3/1', '3/2', '3/3',
    '3/4', '4/1', '4/2', '5/1', '5/2',
    '6/1', '6/2', '6/3', '6/4', '7/1'
];

const SNACK_RECIPES = [
    '8/1', '8/2', '8/3', '8/4', '8/5',
    '8/6', '9/1', '9/2', '9/3', '9/4',
    '9/5', '9/6', '9/7', '9/8', '10/1'
];

// –°–æ–∑–¥–∞–µ–º 225 –±–ª—é–¥ (15 –±–ª—é–¥ * 5 –¥–Ω–µ–π * 3 —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è)
let menuData = [];
const mealTypes = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫'];
const days = [1, 2, 3, 4, 5];

let id = 1;
for (const day of days) {
    for (const mealType of mealTypes) {
        let dishes, weights, recipes;
        
        switch (mealType) {
            case '–∑–∞–≤—Ç—Ä–∞–∫':
                dishes = BREAKFAST_DISHES;
                weights = BREAKFAST_WEIGHTS;
                recipes = BREAKFAST_RECIPES;
                break;
            case '–æ–±–µ–¥':
                dishes = LUNCH_DISHES;
                weights = LUNCH_WEIGHTS;
                recipes = LUNCH_RECIPES;
                break;
            case '–ø–æ–ª–¥–Ω–∏–∫':
                dishes = SNACK_DISHES;
                weights = SNACK_WEIGHTS;
                recipes = SNACK_RECIPES;
                break;
        }
        
        for (let i = 0; i < dishes.length; i++) {
            menuData.push({
                id: id++,
                name: dishes[i],
                description: `${dishes[i]} - ${getDayName(day)} - ${mealType} (–∏–∑ –≤–∞—à–µ–≥–æ Excel —Ñ–∞–π–ª–∞)`,
                price: 0,
                meal_type: mealType,
                day_of_week: day,
                weight: weights[i],
                recipe_number: recipes[i],
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            });
        }
    }
}

console.log(`üçΩÔ∏è –ú–ï–ù–Æ –ó–ê–ì–†–£–ñ–ï–ù–û - ${menuData.length} –ë–õ–Æ–î!`);
console.log(`üåÖ –ó–ê–í–¢–†–ê–ö: ${BREAKFAST_DISHES.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª—é–¥`);
console.log(`üçΩÔ∏è –û–ë–ï–î: ${LUNCH_DISHES.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª—é–¥`);
console.log(`üçé –ü–û–õ–î–ù–ò–ö: ${SNACK_DISHES.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª—é–¥`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é Ultimate –ø–∞—Ä—Å–µ—Ä–∞
async function parseExcelWithUltimateParser(filePath) {
    try {
        console.log('üéØ –ó–ê–ü–£–°–ö ULTIMATE –ü–ê–†–°–ï–†–ê –¥–ª—è —Ñ–∞–π–ª–∞:', filePath);
        const dishes = await ultimateParser.parseExcelFile(filePath);
        console.log(`üöÄ ULTIMATE –ü–ê–†–°–ï–† –ù–ê–®–ï–õ ${dishes.length} –ë–õ–Æ–î!`);
        return dishes;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Ultimate –ø–∞—Ä—Å–µ—Ä–∞:', error);
        return [];
    }
}

function getDayName(dayNumber) {
    const days = ['', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞'];
    return days[dayNumber] || `–î–µ–Ω—å ${dayNumber}`;
}

// –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let usersData = [
    {
        id: 1,
        email: 'director@school.test',
        name: '–î–∏—Ä–µ–∫—Ç–æ—Ä —à–∫–æ–ª—ã',
        role: 'director',
        school_id: 1,
        verified: true,
        created_at: '2025-10-07T10:00:00Z'
    },
    {
        id: 2,
        email: 'parent@school.test',
        name: '–†–æ–¥–∏—Ç–µ–ª—å',
        role: 'parent',
        school_id: 1,
        verified: true,
        created_at: '2025-10-07T10:00:00Z'
    },
    {
        id: 3,
        email: 'teacher@school.test',
        name: '–£—á–∏—Ç–µ–ª—å',
        role: 'teacher',
        school_id: 1,
        verified: false,
        created_at: '2025-10-07T10:00:00Z'
    },
    {
        id: 462,
        email: 'fermiy2013@gmail.com',
        name: '–ö–ª–µ—Ç–∫–∞ –ö–æ–Ω—Ñ–µ—Ç–∫–∞',
        role: 'parent',
        school_id: 1,
        verified: false,
        created_at: '2025-10-07T10:00:00Z'
    }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
function loadDataIfNeeded() {
    // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üìã –ú–ï–ù–Æ –û–°–¢–ê–ï–¢–°–Ø –ü–£–°–¢–´–ú –î–û –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–ê!');
}

const server = http.createServer((req, res) => {
    // –£–õ–£–ß–®–ï–ù–ù–´–ï CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, DELETE, PUT, PATCH, HEAD');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin, Cache-Control, Pragma');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.setHeader('Access-Control-Max-Age', '86400');
    res.setHeader('Access-Control-Expose-Headers', 'Content-Length, X-JSON');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('X-Frame-Options', 'DENY');
    res.setHeader('X-XSS-Protection', '1; mode=block');

    const url = new URL(req.url, `http://${req.headers.host}`);

    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ (preflight)
    if (req.method === 'OPTIONS') {
        console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS preflight –∑–∞–ø—Ä–æ—Å –¥–ª—è:', req.url);
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, DELETE, PUT, PATCH, HEAD',
            'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With, Accept, Origin, Cache-Control, Pragma',
            'Access-Control-Allow-Credentials': 'true',
            'Access-Control-Max-Age': '86400'
        });
        res.end(JSON.stringify({ status: 'OK', message: 'CORS preflight successful' }));
        return;
    }

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (url.pathname === '/' && req.method === 'GET') {
        // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        loadDataIfNeeded();
        
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify({
            status: 'OK',
            message: 'Railway Server with ULTIMATE EXCEL PARSER v24.0.0 - CORS FIXED!',
            dishCount: menuData.length,
            userCount: usersData.length,
            encoding: 'UTF-8',
            mobileReady: true,
            blueGradientRemoved: true,
            fullScreenMode: true,
            finalParser: true,
            userManagement: true,
            databaseEndpoint: true,
            yourExcelFileRead: true,
            autoMenuLoad: true,
            ultimateParser: true,
            parserVersion: 'v1.0.0',
            maxPowerParser: true,
            corsFixed: true,
            preflightHandling: true,
            time: new Date().toISOString()
        }, null, 2));
    } 
    // –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é
    else if (url.pathname === '/api/menu' && req.method === 'GET') {
        // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        loadDataIfNeeded();
        
        res.writeHead(200, { 
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify(menuData, null, 2));
    }
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ Excel –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞
    else if (url.pathname === '/api/menu' && req.method === 'POST') {
        const contentType = req.headers['content-type'] || '';
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ (multipart/form-data)
        if (contentType.includes('multipart/form-data')) {
            console.log('üì§ –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê EXCEL –° ULTIMATE –ü–ê–†–°–ï–†–û–ú...');
            
            try {
                // –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
                const excelFilePath = path.join(__dirname, 'uploads', 'menu.xlsx');
                
                let newDishes = [];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                if (fs.existsSync(excelFilePath)) {
                    console.log('üéØ –ù–∞–π–¥–µ–Ω Excel —Ñ–∞–π–ª, –∑–∞–ø—É—Å–∫–∞–µ–º ULTIMATE –ü–ê–†–°–ï–†...');
                    newDishes = await parseExcelWithUltimateParser(excelFilePath);
                } else {
                    console.log('üìã Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
                    newDishes = createAllDishesFromExcel();
                }
                
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –±–ª—é–¥–∞
                menuData = [];
                newDishes.forEach((dish, index) => {
                    dish.id = index + 1;
                    menuData.push(dish);
                });
                
                console.log(`üöÄ ULTIMATE –ü–ê–†–°–ï–† –ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${newDishes.length} –±–ª—é–¥`);
                
                res.writeHead(200, {
                    'Content-Type': 'application/json; charset=utf-8',
                    'Access-Control-Allow-Origin': '*'
                });
                res.end(JSON.stringify({
                    success: true,
                    message: `ULTIMATE –ü–ê–†–°–ï–†: –ú–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${newDishes.length} –±–ª—é–¥`,
                    addedCount: newDishes.length,
                    totalDishes: menuData.length,
                    parser: 'ULTIMATE v1.0.0'
                }, null, 2));
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ ULTIMATE –ø–∞—Ä—Å–µ—Ä–∞:', error);
                res.writeHead(500, {
                    'Content-Type': 'application/json; charset=utf-8',
                    'Access-Control-Allow-Origin': '*'
                });
                res.end(JSON.stringify({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ ULTIMATE –ø–∞—Ä—Å–µ—Ä–∞'
                }, null, 2));
            }
        } else {
            // –ï—Å–ª–∏ —ç—Ç–æ JSON –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });
            req.on('end', () => {
                try {
                    const newDish = JSON.parse(body);
                    newDish.id = menuData.length + 1;
                    newDish.created_at = new Date().toISOString();
                    newDish.updated_at = new Date().toISOString();
                    
                    menuData.push(newDish);
                    
                    console.log(`‚úÖ –ë–õ–Æ–î–û –î–û–ë–ê–í–õ–ï–ù–û: ${newDish.name}`);
                    
                    res.writeHead(201, {
                        'Content-Type': 'application/json; charset=utf-8',
                        'Access-Control-Allow-Origin': '*'
                    });
                    res.end(JSON.stringify({
                        success: true,
                        message: '–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ',
                        dish: newDish,
                        totalDishes: menuData.length
                    }, null, 2));
                } catch (error) {
                    console.error('‚ùå –û–®–ò–ë–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ë–õ–Æ–î–ê:', error);
                    res.writeHead(400, {
                        'Content-Type': 'application/json; charset=utf-8',
                        'Access-Control-Allow-Origin': '*'
                    });
                    res.end(JSON.stringify({
                        success: false,
                        error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON',
                        details: error.message
                    }, null, 2));
                }
            });
        }
    }
    // –û—á–∏—Å—Ç–∏—Ç—å –º–µ–Ω—é
    else if (url.pathname === '/api/menu/clear' && req.method === 'DELETE') {
        console.log('üóëÔ∏è –û–ß–ò–©–ê–ï–ú –ú–ï–ù–Æ...');
        const deletedCount = menuData.length;
        menuData = [];
        console.log(`‚úÖ –£–î–ê–õ–ï–ù–û ${deletedCount} –ë–õ–Æ–î –ò–ó –ú–ï–ù–Æ`);
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify({
            success: true,
            message: '–ú–µ–Ω—é –æ—á–∏—â–µ–Ω–æ',
            deletedCount: deletedCount,
            totalDishes: menuData.length
        }, null, 2));
    }
    // –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –±–ª—é–¥–æ
    else if (url.pathname.startsWith('/api/menu/') && req.method === 'DELETE') {
        const dishId = parseInt(url.pathname.split('/')[3]);
        const initialLength = menuData.length;
        menuData = menuData.filter(dish => dish.id !== dishId);
        
        console.log(`üóëÔ∏è –ë–õ–Æ–î–û ${dishId} –£–î–ê–õ–ï–ù–û`);
        
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify({
            success: true,
            message: `–ë–ª—é–¥–æ ${dishId} —É–¥–∞–ª–µ–Ω–æ`,
            removed: initialLength - menuData.length,
            totalDishes: menuData.length
        }, null, 2));
    }
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    else if (url.pathname === '/api/users' && req.method === 'GET') {
        console.log('üë• –ü–û–õ–£–ß–ê–ï–ú –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô...');
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify(usersData, null, 2));
    }
    // –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else if (url.pathname === '/api/users' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            try {
                const newUser = JSON.parse(body);
                newUser.id = Math.max(...usersData.map(u => u.id)) + 1;
                newUser.verified = false;
                newUser.created_at = new Date().toISOString();
                
                usersData.push(newUser);
                
                console.log(`‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–û–ó–î–ê–ù: ${newUser.name} (${newUser.email})`);
                
                res.writeHead(201, {
                    'Content-Type': 'application/json; charset=utf-8',
                    'Access-Control-Allow-Origin': '*'
                });
                res.end(JSON.stringify({
                    success: true,
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω',
                    user: newUser
                }, null, 2));
            } catch (error) {
                console.error('‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:', error);
                res.writeHead(400, {
                    'Content-Type': 'application/json; charset=utf-8',
                    'Access-Control-Allow-Origin': '*'
                });
                res.end(JSON.stringify({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON',
                    details: error.message
                }, null, 2));
            }
        });
    }
    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else if (url.pathname.startsWith('/api/users/') && url.pathname.endsWith('/verify') && req.method === 'POST') {
        const userId = parseInt(url.pathname.split('/')[3]);
        const user = usersData.find(u => u.id === userId);
        
        if (user) {
            user.verified = true;
            console.log(`‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –í–ï–†–ò–§–ò–¶–ò–†–û–í–ê–ù: ${user.name} (ID: ${userId})`);
            
            res.writeHead(200, {
                'Content-Type': 'application/json; charset=utf-8',
                'Access-Control-Allow-Origin': '*'
            });
            res.end(JSON.stringify({
                success: true,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
                user: user
            }, null, 2));
        } else {
            console.log(`‚ùå –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –ù–ê–ô–î–ï–ù: ID ${userId}`);
            res.writeHead(404, {
                'Content-Type': 'application/json; charset=utf-8',
                'Access-Control-Allow-Origin': '*'
            });
            res.end(JSON.stringify({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, null, 2));
        }
    }
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    else if (url.pathname === '/api/database' && req.method === 'GET') {
        console.log('üìä –ü–û–õ–£–ß–ê–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ë–ê–ó–ï –î–ê–ù–ù–´–•...');
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify({
            menu: {
                totalDishes: menuData.length,
                dishes: menuData.slice(0, 5), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –±–ª—é–¥
                mealTypes: {
                    breakfast: menuData.filter(d => d.meal_type === '–∑–∞–≤—Ç—Ä–∞–∫').length,
                    lunch: menuData.filter(d => d.meal_type === '–æ–±–µ–¥').length,
                    snack: menuData.filter(d => d.meal_type === '–ø–æ–ª–¥–Ω–∏–∫').length
                }
            },
            users: {
                totalUsers: usersData.length,
                users: usersData,
                verified: usersData.filter(u => u.verified).length,
                pending: usersData.filter(u => !u.verified).length
            },
            server: {
                version: 'v17.0.0 - WITH USERS & DATABASE',
                uptime: process.uptime(),
                memory: process.memoryUsage(),
                timestamp: new Date().toISOString()
            }
        }, null, 2));
    }
    // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    else if (url.pathname === '/api/auth/login.php' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            try {
                const loginData = JSON.parse(body);
                const { email, password } = loginData;
                
                console.log(`üîê –ü–û–ü–´–¢–ö–ê –í–•–û–î–ê: ${email}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                const validUsers = {
                    'director@school.test': { password: 'P@ssw0rd1!', role: 'DIRECTOR', name: '–î–∏—Ä–µ–∫—Ç–æ—Ä —à–∫–æ–ª—ã' },
                    'parent@school.test': { password: 'P@ssw0rd1!', role: 'PARENT', name: '–†–æ–¥–∏—Ç–µ–ª—å/–£—á–µ–Ω–∏–∫' }
                };
                
                const user = validUsers[email];
                
                if (user && user.password === password) {
                    console.log(`‚úÖ –£–°–ü–ï–®–ù–´–ô –í–•–û–î: ${email} (${user.role})`);
                    
                    res.writeHead(200, {
                        'Content-Type': 'application/json; charset=utf-8',
                        'Access-Control-Allow-Origin': '*'
                    });
                    res.end(JSON.stringify({
                        success: true,
                        token: email, // –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ —Ç–æ–∫–µ–Ω
                        user: {
                            id: email === 'director@school.test' ? 1 : 2,
                            email: email,
                            name: user.name,
                            role: user.role,
                            school_id: 1,
                            verified: true
                        }
                    }, null, 2));
                } else {
                    console.log(`‚ùå –ù–ï–£–î–ê–ß–ù–´–ô –í–•–û–î: ${email}`);
                    res.writeHead(401, {
                        'Content-Type': 'application/json; charset=utf-8',
                        'Access-Control-Allow-Origin': '*'
                    });
                    res.end(JSON.stringify({
                        success: false,
                        error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
                    }, null, 2));
                }
            } catch (error) {
                console.error('‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê LOGIN:', error);
                res.writeHead(400, {
                    'Content-Type': 'application/json; charset=utf-8',
                    'Access-Control-Allow-Origin': '*'
                });
                res.end(JSON.stringify({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON'
                }, null, 2));
            }
        });
    }
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    else if (url.pathname === '/api/auth/me.php' && req.method === 'GET') {
        console.log('üë§ –ü–û–õ–£–ß–ê–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –¢–ï–ö–£–©–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï...');
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, DELETE, PUT, PATCH, HEAD',
            'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With, Accept, Origin, Cache-Control, Pragma',
            'Access-Control-Allow-Credentials': 'true',
            'Access-Control-Max-Age': '86400'
        });
        res.end(JSON.stringify({
            success: true,
            user: {
                id: 1,
                email: 'director@school.test',
                name: '–î–∏—Ä–µ–∫—Ç–æ—Ä —à–∫–æ–ª—ã',
                role: 'DIRECTOR',
                school_id: 1,
                verified: true
            }
        }, null, 2));
    }
    // 404
    else {
        res.writeHead(404, {
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify({
            error: 'Not Found',
            path: url.pathname
        }, null, 2));
    }
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ Railway Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üçΩÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${menuData.length} –±–ª—é–¥ –∏–∑ –≤–∞—à–µ–≥–æ Excel —Ñ–∞–π–ª–∞`);
    console.log(`üì± –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è: –≥–æ—Ç–æ–≤–∞`);
    console.log(`üé® –°–∏–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç: —É–±—Ä–∞–Ω`);
    console.log(`üñ•Ô∏è –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: –≤–∫–ª—é—á–µ–Ω`);
    console.log(`‚úÖ –í–°–ï–ì–î–ê –ó–ê–ì–†–£–ñ–ê–ï–ú –í–°–ï –ë–õ–Æ–î–ê –ü–†–ò –°–¢–ê–†–¢–ï!`);
    console.log(`‚úÖ –í–°–ï –ì–û–¢–û–í–û –ö –†–ê–ë–û–¢–ï!`);
});
