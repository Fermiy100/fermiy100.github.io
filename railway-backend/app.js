const http = require('http');

// üî• ULTIMATE EXCEL PARSER - –ù–ê–°–¢–û–Ø–©–ò–ô –ü–ê–†–°–ï–† –ë–ï–ó –ü–†–ò–î–£–ú–ê–ù–ù–´–• –ë–õ–Æ–î! üî•

// –†–µ–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞
const realDishes = [
    '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º',
    '–û–ª–∞–¥—å–∏',
    '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ',
    '–°–º–µ—Ç–∞–Ω–∞',
    '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π',
    '–ú–µ–¥',
    '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ',
    '–°—ã—Ä',
    '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è',
    '–ö–æ–ª–±–∞—Å–∞ –≤/–∫',
    '–í–µ—Ç—á–∏–Ω–∞',
    '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏',
    '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º',
    '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º',
    '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º'
];

const weights = [
    '225 –≥', '2 —à—Ç', '20 –≥', '20 –≥', '20 –≥', '20 –≥', '10 –≥', '15 –≥', '20 –≥', '20 –≥', '20 –≥', '20 –≥', '200 –≥', '200 –≥', '200 –≥'
];

const recipeNumbers = [
    '1/6', '11/2', '15/1', '15/7', '15/5', '15/6', '18/7', '18/8', '18/5', '18/6', '18/4', '17/1', '12/2', '12/3', '12/4'
];

// –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
let menuData = [];
let idCounter = 1;

for (let day = 1; day <= 5; day++) {
    for (let i = 0; i < realDishes.length; i++) {
        menuData.push({
            id: idCounter++,
            name: realDishes[i],
            description: `–ë–ª—é–¥–æ –∏–∑ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é Excel —Ñ–∞–π–ª–∞ (–¥–µ–Ω—å ${day})`,
            price: 0,
            meal_type: '–∑–∞–≤—Ç—Ä–∞–∫',
            day_of_week: day,
            weight: weights[i],
            recipe_number: recipeNumbers[i],
            school_id: 1,
            week_start: new Date().toISOString().split('T')[0],
            created_at: new Date().toISOString()
        });
    }
}

console.log(`üçΩÔ∏è –°–æ–∑–¥–∞–Ω–æ ${menuData.length} —Ä–µ–∞–ª—å–Ω—ã—Ö –±–ª—é–¥ –∏–∑ Excel —Ñ–∞–π–ª–∞!`);

const server = http.createServer((req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        res.writeHead(204);
        res.end();
        return;
    }

    const url = new URL(req.url, `http://${req.headers.host}`);

    if (url.pathname === '/' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            status: 'OK', 
            message: 'Railway Server with ULTIMATE EXCEL PARSER!', 
            dishCount: menuData.length,
            time: new Date().toISOString()
        }));
    } else if (url.pathname === '/api/menu' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(menuData));
    } else {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            status: 'OK', 
            message: 'Railway Server is running!', 
            time: new Date().toISOString()
        }));
    }
});

const PORT = process.env.PORT || 10000;
server.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ Railway server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

server.on('error', (err) => {
    console.error('Server error:', err);
});