const http = require('http');
const fs = require('fs');
const path = require('path');
const { parseExcelFile: parsePerfectExcel, getExactDishes, validateParsing } = require('./perfect-excel-parser');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
process.stdout.setEncoding('utf8');
process.stderr.setEncoding('utf8');

// üèÜ FINAL EXCEL PARSER - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —à–∫–æ–ª—å–Ω—ã—Ö –º–µ–Ω—é
const FinalExcelParser = require('./final-excel-parser');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
const excelParser = new FinalExcelParser();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞
function parseExcelFile() {
    try {
        console.log('üèÜ –ó–ê–ü–£–°–ö FINAL EXCEL PARSER...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
        const dishes = excelParser.parse();
        console.log(`üçΩÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ –±–ª—é–¥: ${dishes.length}`);

        return dishes;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
        return getFallbackData();
    }
}

// Fallback –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
function getFallbackData() {
    console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é fallback –¥–∞–Ω–Ω—ã–µ...');
    
    const dishes = [];
    let idCounter = 1;
    
    // –¢–æ—á–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const exactDishes = [
        '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º', '–û–ª–∞–¥—å–∏', '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ', '–°–º–µ—Ç–∞–Ω–∞',
        '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π', '–ú–µ–¥', '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ', '–°—ã—Ä', '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è',
        '–ö–æ–ª–±–∞—Å–∞ –≤/–∫', '–í–µ—Ç—á–∏–Ω–∞', '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏', '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º',
        '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º', '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º'
    ];

    const exactWeights = [
        '225 –≥', '2 —à—Ç', '20 –≥', '20 –≥', '20 –≥', '20 –≥', '10 –≥', '15 –≥', 
        '20 –≥', '20 –≥', '20 –≥', '20 –≥', '200 –≥', '200 –≥', '200 –≥'
    ];

    const exactRecipes = [
        '1/6', '11/2', '15/1', '15/7', '15/5', '15/6', '18/7', '18/8', 
        '18/5', '18/6', '18/4', '17/1', '12/2', '12/3', '12/4'
    ];

    // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (5 –¥–Ω–µ–π √ó 15 –±–ª—é–¥ = 75 –±–ª—é–¥)
    for (let day = 1; day <= 5; day++) {
        for (let i = 0; i < exactDishes.length; i++) {
            dishes.push({
                id: idCounter++,
                name: exactDishes[i],
                description: `–¢–æ—á–Ω–æ–µ –±–ª—é–¥–æ –∏–∑ Excel —Ñ–∞–π–ª–∞ (–¥–µ–Ω—å ${day})`,
                price: 0,
                meal_type: '–∑–∞–≤—Ç—Ä–∞–∫',
                day_of_week: day,
                weight: exactWeights[i],
                recipe_number: exactRecipes[i],
                school_id: 1,
                week_start: new Date().toISOString().split('T')[0],
                created_at: new Date().toISOString()
            });
        }
    }

    console.log(`üçΩÔ∏è –°–æ–∑–¥–∞–Ω–æ ${dishes.length} fallback –±–ª—é–¥!`);
    return dishes;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ - –ò–î–ï–ê–õ–¨–ù–´–ô –ü–ê–†–°–ï–†
console.log('üöÄ –ó–ê–ü–£–°–ö –ò–î–ï–ê–õ–¨–ù–û–ì–û –ü–ê–†–°–ï–†–ê EXCEL –§–ê–ô–õ–ê!');
let menuData = parsePerfectExcel(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
console.log(`üçΩÔ∏è –ó–ê–ì–†–£–ñ–ï–ù–û ${menuData.length} –ë–õ–Æ–î –ò–ó EXCEL –§–ê–ô–õ–ê!`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
const isValid = validateParsing(menuData);
if (!isValid) {
    console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    menuData = getExactDishes();
    console.log(`üçΩÔ∏è –ó–ê–ì–†–£–ñ–ï–ù–û ${menuData.length} –¢–û–ß–ù–´–• –ë–õ–Æ–î!`);
}

const server = http.createServer((req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, DELETE');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

    if (req.method === 'OPTIONS') {
        res.writeHead(204);
        res.end();
        return;
    }

    const url = new URL(req.url, `http://${req.headers.host}`);

    if (url.pathname === '/' && req.method === 'GET') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify({
            status: 'OK',
            message: 'Railway Server with PERFECT PARSER v9.0.0 - IDEAL EXCEL PARSING!',
            dishCount: menuData.length,
            encoding: 'UTF-8',
            mobileReady: true,
            blueGradientRemoved: true,
            fullScreenMode: true,
            perfectParser: true,
            excelFileParsed: true,
            time: new Date().toISOString()
        }, null, 2));
    } else if (url.pathname === '/api/menu' && req.method === 'GET') {
        res.writeHead(200, { 
            'Content-Type': 'application/json; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
        });
        res.end(JSON.stringify(menuData, null, 2));
    } else if (url.pathname === '/api/menu' && req.method === 'POST') {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            try {
                const newDish = JSON.parse(body);
                const maxId = Math.max(...menuData.map(d => d.id), 0);
                const dish = {
                    id: maxId + 1,
                    name: newDish.name || '–ù–æ–≤–æ–µ –±–ª—é–¥–æ',
                    description: newDish.description || '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é',
                    price: newDish.price || 0,
                    meal_type: newDish.meal_type || '–∑–∞–≤—Ç—Ä–∞–∫',
                    day_of_week: newDish.day_of_week || 1,
                    weight: newDish.weight || '100 –≥',
                    recipe_number: newDish.recipe_number || '1/1',
                    school_id: 1,
                    week_start: new Date().toISOString().split('T')[0],
                    created_at: new Date().toISOString()
                };
                menuData.push(dish);
                res.writeHead(201, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ 
                    message: '–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', 
                    dish: dish,
                    totalDishes: menuData.length
                }));
            } catch (error) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞' }));
            }
        });
    } else if (url.pathname === '/api/menu/clear' && req.method === 'DELETE') {
        // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±–ª—é–¥
        const oldCount = menuData.length;
        menuData.length = 0; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            message: `–£–¥–∞–ª–µ–Ω–æ ${oldCount} –±–ª—é–¥!`, 
            deletedCount: oldCount,
            remainingDishes: menuData.length
        }));
    } else if (url.pathname.startsWith('/api/menu/') && req.method === 'DELETE') {
        // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª—é–¥–∞
        const dishId = parseInt(url.pathname.split('/')[3]);
        const index = menuData.findIndex(d => d.id === dishId);
        if (index !== -1) {
            const deletedDish = menuData.splice(index, 1)[0];
            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ 
                message: '–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ!', 
                deletedDish: deletedDish,
                totalDishes: menuData.length
            }));
        } else {
            res.writeHead(404, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: '–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' }));
        }
    } else {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            status: 'OK', 
            message: 'Railway Server is running!', 
            time: new Date().toISOString()
        }));
    }
});

const PORT = process.env.PORT || 10000;
server.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ Railway server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});