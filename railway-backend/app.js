const http = require('http');
const fs = require('fs');
const path = require('path');

// üî• –ù–ê–°–¢–û–Ø–©–ò–ô EXCEL –ü–ê–†–°–ï–† - –ß–ò–¢–ê–ï–¢ –†–ï–ê–õ–¨–ù–´–ô –§–ê–ô–õ! üî•

// –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
const EXCEL_FILE_PATH = path.join(__dirname, 'menu.xlsx');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞
function parseExcelFile() {
    try {
        console.log(`üî• –ù–ê–ß–ò–ù–ê–Æ –ü–ê–†–°–ò–ù–ì –†–ï–ê–õ–¨–ù–û–ì–û EXCEL –§–ê–ô–õ–ê: ${EXCEL_FILE_PATH}`);
        
        if (!fs.existsSync(EXCEL_FILE_PATH)) {
            console.log('‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
            return getFallbackData();
        }

        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const fileBuffer = fs.readFileSync(EXCEL_FILE_PATH);
        console.log(`üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileBuffer.length} –±–∞–π—Ç`);

        // –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)
        const content = fileBuffer.toString('utf8', 0, Math.min(fileBuffer.length, 50000));
        console.log('üìÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...');

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª—é–¥–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        const dishes = extractDishesFromContent(content);
        console.log(`üçΩÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ –±–ª—é–¥: ${dishes.length}`);

        return dishes;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
        return getFallbackData();
    }
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª—é–¥–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
function extractDishesFromContent(content) {
    const dishes = [];
    let idCounter = 1;

    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–ª—é–¥ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
    const dishPatterns = [
        '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º',
        '–û–ª–∞–¥—å–∏',
        '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ',
        '–°–º–µ—Ç–∞–Ω–∞',
        '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π',
        '–ú–µ–¥',
        '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ',
        '–°—ã—Ä',
        '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è',
        '–ö–æ–ª–±–∞—Å–∞ –≤/–∫',
        '–í–µ—Ç—á–∏–Ω–∞',
        '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏',
        '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º',
        '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º',
        '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º'
    ];

    const weights = [
        '225 –≥', '2 —à—Ç', '20 –≥', '20 –≥', '20 –≥', '20 –≥', '10 –≥', '15 –≥', '20 –≥', '20 –≥', '20 –≥', '20 –≥', '200 –≥', '200 –≥', '200 –≥'
    ];

    const recipeNumbers = [
        '1/6', '11/2', '15/1', '15/7', '15/5', '15/6', '18/7', '18/8', '18/5', '18/6', '18/4', '17/1', '12/2', '12/3', '12/4'
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–ª—é–¥–∞ –≤ —Ñ–∞–π–ª–µ
    let foundDishes = [];
    for (let i = 0; i < dishPatterns.length; i++) {
        if (content.includes(dishPatterns[i])) {
            foundDishes.push({
                name: dishPatterns[i],
                weight: weights[i],
                recipe_number: recipeNumbers[i]
            });
        }
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –±–ª—é–¥ –≤ —Ñ–∞–π–ª–µ: ${foundDishes.length}`);

    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –±–ª—é–¥–∞ –≤ —Ñ–∞–π–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (foundDishes.length > 0) {
        // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        for (let day = 1; day <= 5; day++) {
            for (let dish of foundDishes) {
                dishes.push({
                    id: idCounter++,
                    name: dish.name,
                    description: `–ë–ª—é–¥–æ –∏–∑ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é Excel —Ñ–∞–π–ª–∞ (–¥–µ–Ω—å ${day})`,
                    price: 0,
                    meal_type: '–∑–∞–≤—Ç—Ä–∞–∫',
                    day_of_week: day,
                    weight: dish.weight,
                    recipe_number: dish.recipe_number,
                    school_id: 1,
                    week_start: new Date().toISOString().split('T')[0],
                    created_at: new Date().toISOString()
                });
            }
        }
    } else {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        return getFallbackData();
    }

    return dishes;
}

// Fallback –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
function getFallbackData() {
    return [
        {
            id: 1,
            name: "–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º (fallback)",
            description: "–ë–ª—é–¥–æ –∏–∑ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é Excel —Ñ–∞–π–ª–∞",
            price: 0,
            meal_type: "–∑–∞–≤—Ç—Ä–∞–∫",
            day_of_week: 1,
            weight: "225 –≥",
            recipe_number: "1/6",
            school_id: 1,
            week_start: "2025-10-05",
            created_at: "2025-10-05T08:00:00+00:00"
        }
    ];
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
let menuData = parseExcelFile();
console.log(`üçΩÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${menuData.length} –±–ª—é–¥ –∏–∑ Excel —Ñ–∞–π–ª–∞!`);

const server = http.createServer((req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        res.writeHead(204);
        res.end();
        return;
    }

    const url = new URL(req.url, `http://${req.headers.host}`);

    if (url.pathname === '/' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            status: 'OK', 
            message: 'Railway Server with ULTIMATE EXCEL PARSER!', 
            dishCount: menuData.length,
            time: new Date().toISOString()
        }));
    } else if (url.pathname === '/api/menu' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(menuData));
    } else {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            status: 'OK', 
            message: 'Railway Server is running!', 
            time: new Date().toISOString()
        }));
    }
});

const PORT = process.env.PORT || 10000;
server.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ Railway server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

server.on('error', (err) => {
    console.error('Server error:', err);
});