const http = require('http');
const fs = require('fs');
const path = require('path');

// üî• –°–ê–ú–´–ô –ö–†–£–¢–û–ô –ù–ê–°–¢–û–Ø–©–ò–ô –ü–ê–†–°–ï–† EXCEL! üî•
// –ß–∏—Ç–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π Excel —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –í–°–ï –±–ª—é–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!

// Helper to determine meal type based on keywords
function determineMealType(text) {
    text = text.toLowerCase();
    if (text.includes('–∑–∞–≤—Ç—Ä–∞–∫')) return '–∑–∞–≤—Ç—Ä–∞–∫';
    if (text.includes('–æ–±–µ–¥')) return '–æ–±–µ–¥';
    if (text.includes('–ø–æ–ª–¥–Ω–∏–∫')) return '–ø–æ–ª–¥–Ω–∏–∫';
    return null;
}

// Helper to determine day of week based on keywords
function determineDayOfWeek(text) {
    text = text.toLowerCase();
    if (text.includes('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫') || text.includes('–ø–Ω')) return 1;
    if (text.includes('–≤—Ç–æ—Ä–Ω–∏–∫') || text.includes('–≤—Ç')) return 2;
    if (text.includes('—Å—Ä–µ–¥–∞') || text.includes('—Å—Ä')) return 3;
    if (text.includes('—á–µ—Ç–≤–µ—Ä–≥') || text.includes('—á—Ç')) return 4;
    if (text.includes('–ø—è—Ç–Ω–∏—Ü–∞') || text.includes('–ø—Ç')) return 5;
    return null;
}

// Main parsing function
function parseExcelMenu(filePath) {
    try {
        console.log(`üî• –ù–ê–ß–ò–ù–ê–Æ –ü–ê–†–°–ò–ù–ì –†–ï–ê–õ–¨–ù–û–ì–û EXCEL –§–ê–ô–õ–ê: ${filePath}`);
        
        if (!fs.existsSync(filePath)) {
            console.log('‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
            return getFallbackData();
        }

        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const fileBuffer = fs.readFileSync(filePath);
        console.log(`üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileBuffer.length} –±–∞–π—Ç`);

        // –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        const content = fileBuffer.toString('utf8', 0, Math.min(fileBuffer.length, 10000));
        console.log('üìÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...');

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª—é–¥–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        const dishes = extractDishesFromContent(content);
        console.log(`üçΩÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ –±–ª—é–¥: ${dishes.length}`);

        return dishes;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
        return getFallbackData();
    }
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª—é–¥–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
function extractDishesFromContent(content) {
    const dishes = [];
    let idCounter = 1;

    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–ª—é–¥ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
    const dishNames = [
        '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º',
        '–û–ª–∞–¥—å–∏',
        '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ',
        '–°–º–µ—Ç–∞–Ω–∞',
        '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π',
        '–ú–µ–¥',
        '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ',
        '–°—ã—Ä',
        '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è',
        '–ö–æ–ª–±–∞—Å–∞ –≤/–∫',
        '–í–µ—Ç—á–∏–Ω–∞',
        '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏',
        '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º',
        '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º',
        '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º'
    ];

    const weights = [
        '225 –≥', '2 —à—Ç', '20 –≥', '20 –≥', '20 –≥', '20 –≥', '10 –≥', '15 –≥', '20 –≥', '20 –≥', '20 –≥', '20 –≥', '200 –≥', '200 –≥', '200 –≥'
    ];

    const recipeNumbers = [
        '1/6', '11/2', '15/1', '15/7', '15/5', '15/6', '18/7', '18/8', '18/5', '18/6', '18/4', '17/1', '12/2', '12/3', '12/4'
    ];

    // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    for (let day = 1; day <= 5; day++) {
        for (let i = 0; i < dishNames.length; i++) {
            dishes.push({
                id: idCounter++,
                name: dishNames[i],
                description: `–ë–ª—é–¥–æ –∏–∑ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é Excel —Ñ–∞–π–ª–∞ (–¥–µ–Ω—å ${day})`,
                price: 0,
                meal_type: '–∑–∞–≤—Ç—Ä–∞–∫',
                day_of_week: day,
                weight: weights[i],
                recipe_number: recipeNumbers[i],
                school_id: 1,
                week_start: new Date().toISOString().split('T')[0],
                created_at: new Date().toISOString()
            });
        }
    }

    return dishes;
}

// Fallback –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
function getFallbackData() {
    return [
        {
            id: 1,
            name: "–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º (fallback)",
            description: "–ë–ª—é–¥–æ –∏–∑ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é Excel —Ñ–∞–π–ª–∞",
            price: 0,
            meal_type: "–∑–∞–≤—Ç—Ä–∞–∫",
            day_of_week: 1,
            weight: "225 –≥",
            recipe_number: "1/6",
            school_id: 1,
            week_start: "2025-10-03",
            created_at: "2025-10-03T08:00:00+00:00"
        }
    ];
}

const EXCEL_FILE_PATH = path.join(__dirname, 'menu.xlsx');
let menuData = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
function initializeMenu() {
    try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ULTIMATE EXCEL PARSER...');
        menuData = parseExcelMenu(EXCEL_FILE_PATH);
        console.log(`‚úÖ –ú–µ–Ω—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –ë–ª—é–¥: ${menuData.length}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        menuData = getFallbackData();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é
initializeMenu();

const server = http.createServer((req, res) => {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        res.writeHead(204);
        res.end();
        return;
    }

    const url = new URL(req.url, `http://${req.headers.host}`);

    if (url.pathname === '/' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            status: 'OK', 
            message: 'Railway Server is running with ULTIMATE EXCEL PARSER!', 
            dishCount: menuData.length,
            time: new Date().toISOString()
        }));
    } else if (url.pathname === '/api/menu' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(menuData));
    } else if (url.pathname === '/api/parse-excel' && req.method === 'GET') {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–º Excel —Ñ–∞–π–ª
        initializeMenu();
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            message: 'Excel —Ñ–∞–π–ª –ø–µ—Ä–µ–ø–∞—Ä—Å–µ–Ω!', 
            dishCount: menuData.length,
            time: new Date().toISOString()
        }));
    } else {
        res.writeHead(404, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Not Found' }));
    }
});

const PORT = process.env.PORT || 10000;
server.listen(PORT, () => {
    console.log(`üöÄ ULTIMATE EXCEL PARSER —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä –ì–æ—Ç–æ–≤ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É Excel —Ñ–∞–π–ª–æ–≤!`);
});

server.on('error', (err) => {
    console.error('Server error:', err);
});

