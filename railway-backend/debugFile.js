/**
 * –û–¢–õ–ê–î–ö–ê –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–ê
 */

import XLSX from 'xlsx';
import fs from 'fs';

function debugFile() {
  console.log('üîç –û–¢–õ–ê–î–ö–ê –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–ê...');
  
  try {
    const filePath = '../2-–Ø –ù–ï–î–ï–õ–Ø –î–õ–Ø –ó–ê–ö–ê–ó–ê  22.09-26.09 (–∫–æ–ø–∏—è) ‚Äî –∫–æ–ø–∏—è.xlsx';
    const buffer = fs.readFileSync(filePath);
    
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
    
    console.log(`üìä –õ–∏—Å—Ç: ${sheetName}`);
    console.log(`üìè –†–∞–∑–º–µ—Ä: ${jsonData.length} —Å—Ç—Ä–æ–∫`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 30 —Å—Ç—Ä–æ–∫
    console.log('\nüìã –ü–ï–†–í–´–ï 30 –°–¢–†–û–ö:');
    for (let i = 0; i < Math.min(30, jsonData.length); i++) {
      const row = jsonData[i];
      console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1}:`, row);
    }
    
    // –ò—â–µ–º "–û –ë –ï –î"
    console.log('\nüîç –ü–û–ò–°–ö "–û –ë –ï –î":');
    for (let rowIndex = 0; rowIndex < jsonData.length; rowIndex++) {
      const row = jsonData[rowIndex];
      if (!row) continue;
      
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        const cell = row[colIndex];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.trim().toLowerCase();
        if (cellText.includes('–æ –± –µ –¥') || cellText.includes('–æ–±–µ–¥')) {
          console.log(`  –ù–∞–π–¥–µ–Ω "–û –ë –ï –î" –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}, –∫–æ–ª–æ–Ω–∫–µ ${colIndex + 1}: "${cell}"`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 10 —Å—Ç—Ä–æ–∫
          console.log(`  –°–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ "–û –ë –ï –î":`);
          for (let j = rowIndex + 1; j < Math.min(rowIndex + 11, jsonData.length); j++) {
            const nextRow = jsonData[j];
            if (nextRow && nextRow[colIndex]) {
              console.log(`    –°—Ç—Ä–æ–∫–∞ ${j + 1}: "${nextRow[colIndex]}"`);
            }
          }
        }
      }
    }
    
    // –ò—â–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    console.log('\nüìÖ –ü–û–ò–°–ö –î–ù–ï–ô –ù–ï–î–ï–õ–ò:');
    const dayKeywords = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
    
    for (let rowIndex = 0; rowIndex < jsonData.length; rowIndex++) {
      const row = jsonData[rowIndex];
      if (!row) continue;
      
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        const cell = row[colIndex];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.trim().toLowerCase();
        dayKeywords.forEach(day => {
          if (cellText.includes(day)) {
            console.log(`  –ù–∞–π–¥–µ–Ω "${day}" –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}, –∫–æ–ª–æ–Ω–∫–µ ${colIndex + 1}: "${cell}"`);
          }
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
  }
}

debugFile();
