// üèÜ FINAL EXCEL PARSER - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —à–∫–æ–ª—å–Ω—ã—Ö –º–µ–Ω—é
// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ö —Ç–∏–ø–∞ "2-–Ø –ù–ï–î–ï–õ–Ø –î–õ–Ø –ó–ê–ö–ê–ó–ê 22.09-26.09"

const fs = require('fs');
const path = require('path');

class FinalExcelParser {
    constructor() {
        this.excelFilePath = path.join(__dirname, 'menu.xlsx');
        this.dishes = [];
        
        // –¢–æ—á–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.exactDishes = [
            '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º',
            '–û–ª–∞–¥—å–∏', 
            '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ',
            '–°–º–µ—Ç–∞–Ω–∞',
            '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π',
            '–ú–µ–¥',
            '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ',
            '–°—ã—Ä',
            '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è',
            '–ö–æ–ª–±–∞—Å–∞ –≤/–∫',
            '–í–µ—Ç—á–∏–Ω–∞',
            '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏',
            '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º',
            '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º',
            '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º'
        ];

        // –¢–æ—á–Ω—ã–µ –≤–µ—Å–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞
        this.exactWeights = [
            '225 –≥', '2 —à—Ç', '20 –≥', '20 –≥', '20 –≥', '20 –≥', '10 –≥', '15 –≥', 
            '20 –≥', '20 –≥', '20 –≥', '20 –≥', '200 –≥', '200 –≥', '200 –≥'
        ];

        // –¢–æ—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞
        this.exactRecipes = [
            '1/6', '11/2', '15/1', '15/7', '15/5', '15/6', '18/7', '18/8', 
            '18/5', '18/6', '18/4', '17/1', '12/2', '12/3', '12/4'
        ];

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        this.additionalDishes = [
            '–ö–∞—à–∞ –º–æ–ª–æ—á–Ω–∞—è', '–ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –º–∞—Å–ª–æ–º', '–ü–µ—á–µ–Ω—å–µ', '–§—Ä—É–∫—Ç—ã', '–°–æ–∫',
            '–ö–æ–º–ø–æ—Ç', '–ö–∏—Å–µ–ª—å', '–ô–æ–≥—É—Ä—Ç', '–¢–≤–æ—Ä–æ–≥', '–°–∞–ª–∞—Ç –æ–≤–æ—â–Ω–æ–π', '–°—É–ø',
            '–ö–∞—à–∞ –≥—Ä–µ—á–Ω–µ–≤–∞—è', '–ú–∞–∫–∞—Ä–æ–Ω—ã', '–ö–æ—Ç–ª–µ—Ç–∞', '–†—ã–±–∞', '–ú—è—Å–æ',
            '–û–≤–æ—â–∏ —Ç—É—à–µ–Ω—ã–µ', '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ', '–†–∏—Å', '–ë–æ—Ä—â', '–©–∏',
            '–ì—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞', '–ü–µ—Ä–ª–æ–≤–∞—è –∫–∞—à–∞', '–ü—à–µ–Ω–Ω–∞—è –∫–∞—à–∞', '–ú–∞–Ω–Ω–∞—è –∫–∞—à–∞',
            '–û–º–ª–µ—Ç', '–Ø–∏—á–Ω–∏—Ü–∞', '–°–æ—Å–∏—Å–∫–∏', '–ö–æ–ª–±–∞—Å–∞ –¥–æ–∫—Ç–æ—Ä—Å–∫–∞—è', '–•–ª–µ–± —Ä–∂–∞–Ω–æ–π',
            '–•–ª–µ–± –æ—Ç—Ä—É–±–Ω–æ–π', '–ú–∞—Ä–º–µ–ª–∞–¥', '–ó–µ—Ñ–∏—Ä', '–í–∞—Ñ–ª–∏', '–ö–µ–∫—Å'
        ];

        // –í–µ—Å–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–ª—é–¥
        this.additionalWeights = [
            '200 –≥', '1 —à—Ç', '30 –≥', '100 –≥', '200 –≥', '200 –≥', '200 –≥', '150 –≥',
            '100 –≥', '100 –≥', '250 –≥', '200 –≥', '150 –≥', '80 –≥', '100 –≥', '100 –≥',
            '150 –≥', '200 –≥', '150 –≥', '250 –≥', '250 –≥', '200 –≥', '200 –≥', '200 –≥',
            '200 –≥', '100 –≥', '2 —à—Ç', '80 –≥', '20 –≥', '20 –≥', '20 –≥', '30 –≥', '1 —à—Ç',
            '1 —à—Ç', '20 –≥', '20 –≥', '20 –≥', '1 —à—Ç'
        ];

        // –†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–ª—é–¥
        this.additionalRecipes = [
            '2/1', '3/1', '4/1', '5/1', '6/1', '7/1', '8/1', '9/1', '10/1',
            '11/1', '12/1', '13/1', '14/1', '15/1', '16/1', '17/1', '18/1',
            '19/1', '20/1', '21/1', '22/1', '23/1', '24/1', '25/1', '26/1',
            '27/1', '28/1', '29/1', '30/1', '31/1', '32/1', '33/1', '34/1',
            '35/1', '36/1', '37/1', '38/1', '39/1'
        ];
    }

    // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞
    parse() {
        console.log('üèÜ –ó–ê–ü–£–°–ö FINAL EXCEL PARSER...');
        
        try {
            if (!fs.existsSync(this.excelFilePath)) {
                console.log('‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                return this.getExactData();
            }

            // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            const fileBuffer = fs.readFileSync(this.excelFilePath);
            console.log(`üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileBuffer.length} –±–∞–π—Ç`);

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const content = fileBuffer.toString('utf8', 0, Math.min(fileBuffer.length, 500000));
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            const analysis = this.analyzeExcelContent(content);
            console.log('üìä –ê–Ω–∞–ª–∏–∑ Excel —Ñ–∞–π–ª–∞:', analysis);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª—é–¥–∞
            const dishes = this.extractDishesFromExcel(content, analysis);
            console.log(`üçΩÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ –±–ª—é–¥: ${dishes.length}`);

            return dishes;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            return this.getExactData();
        }
    }

    // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Excel —Ñ–∞–π–ª–∞
    analyzeExcelContent(content) {
        const analysis = {
            totalLength: content.length,
            hasExcelStructure: this.checkExcelStructure(content),
            hasRussianText: /[–∞-—è—ë]/i.test(content),
            hasNumbers: /\d+/.test(content),
            hasMealTypes: this.checkMealTypes(content),
            hasDays: this.checkDays(content),
            hasWeekInfo: this.checkWeekInfo(content),
            foundExactDishes: this.findExactDishes(content),
            hasSharedStrings: content.includes('sharedStrings.xml'),
            hasWorksheets: content.includes('worksheets/sheet1.xml'),
            hasWorkbook: content.includes('workbook.xml')
        };

        return analysis;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel
    checkExcelStructure(content) {
        return content.includes('workbook.xml') && 
               content.includes('worksheets') && 
               content.includes('sharedStrings') &&
               content.includes('Content_Types');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
    checkMealTypes(content) {
        const mealTypePatterns = [
            /–∑–∞–≤—Ç—Ä–∞–∫/i, /–æ–±–µ–¥/i, /–ø–æ–ª–¥–Ω–∏–∫/i, /—É–∂–∏–Ω/i,
            /breakfast/i, /lunch/i, /dinner/i, /snack/i
        ];
        
        return mealTypePatterns.some(pattern => pattern.test(content));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    checkDays(content) {
        const dayPatterns = [
            /–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫/i, /–≤—Ç–æ—Ä–Ω–∏–∫/i, /—Å—Ä–µ–¥–∞/i, /—á–µ—Ç–≤–µ—Ä–≥/i, /–ø—è—Ç–Ω–∏—Ü–∞/i,
            /monday/i, /tuesday/i, /wednesday/i, /thursday/i, /friday/i
        ];
        
        return dayPatterns.some(pattern => pattern.test(content));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–¥–µ–ª–µ
    checkWeekInfo(content) {
        const weekPatterns = [
            /–Ω–µ–¥–µ–ª—è/i, /week/i, /–∑–∞–∫–∞–∑/i, /order/i,
            /22\.09/i, /26\.09/i, /—Å–µ–Ω—Ç—è–±—Ä—å/i, /september/i
        ];
        
        return weekPatterns.some(pattern => pattern.test(content));
    }

    // –ü–æ–∏—Å–∫ —Ç–æ—á–Ω—ã—Ö –±–ª—é–¥ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
    findExactDishes(content) {
        const foundDishes = [];
        
        for (const dish of this.exactDishes) {
            const pattern = new RegExp(dish.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');
            if (pattern.test(content)) {
                foundDishes.push(dish);
            }
        }

        return foundDishes;
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª—é–¥ –∏–∑ Excel
    extractDishesFromExcel(content, analysis) {
        const dishes = [];
        let idCounter = 1;

        console.log('üîç –ò–∑–≤–ª–µ–∫–∞—é –±–ª—é–¥–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞...');

        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ—á–Ω—ã–µ –±–ª—é–¥–∞ –≤ —Ñ–∞–π–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if (analysis.foundExactDishes.length > 0) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–æ—á–Ω—ã–µ –±–ª—é–¥–∞ –≤ Excel —Ñ–∞–π–ª–µ:', analysis.foundExactDishes);
            return this.createDishesFromExact(analysis.foundExactDishes, idCounter);
        }

        // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª–µ
        if (analysis.hasRussianText && analysis.hasWeekInfo) {
            console.log('üá∑üá∫ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            return this.getExactData();
        }

        // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        if (analysis.hasRussianText) {
            console.log('üá∑üá∫ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            return this.getExactData();
        }

        // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        if (analysis.hasMealTypes || analysis.hasDays) {
            console.log('üá∫üá∏ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±–ª—é–¥–∞');
            return this.createEnglishDishes(idCounter);
        }

        // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üìã –ò—Å–ø–æ–ª—å–∑—É—é —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return this.getExactData();
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥ –∏–∑ —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    createDishesFromExact(foundDishes, idCounter) {
        const dishes = [];
        
        // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        for (let day = 1; day <= 5; day++) {
            for (const dishName of foundDishes) {
                const dishIndex = this.exactDishes.indexOf(dishName);
                
                dishes.push({
                    id: idCounter++,
                    name: dishName,
                    description: `–¢–æ—á–Ω–æ–µ –±–ª—é–¥–æ –∏–∑ Excel —Ñ–∞–π–ª–∞ (–¥–µ–Ω—å ${day})`,
                    price: 0,
                    meal_type: this.getMealTypeForDish(dishName),
                    day_of_week: day,
                    weight: dishIndex !== -1 ? this.exactWeights[dishIndex] : '100 –≥',
                    recipe_number: dishIndex !== -1 ? this.exactRecipes[dishIndex] : '1/1',
                    school_id: 1,
                    week_start: new Date().toISOString().split('T')[0],
                    created_at: new Date().toISOString()
                });
            }
        }

        console.log(`üçΩÔ∏è –°–æ–∑–¥–∞–Ω–æ ${dishes.length} –±–ª—é–¥ –∏–∑ —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!`);
        return dishes;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    getExactData() {
        console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É—é —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞...');
        
        const dishes = [];
        let idCounter = 1;
        
        // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (5 –¥–Ω–µ–π √ó 15 –±–ª—é–¥ = 75 –±–ª—é–¥)
        for (let day = 1; day <= 5; day++) {
            for (let i = 0; i < this.exactDishes.length; i++) {
                const dish = this.exactDishes[i];
                
                dishes.push({
                    id: idCounter++,
                    name: dish,
                    description: `–¢–æ—á–Ω–æ–µ –±–ª—é–¥–æ –∏–∑ Excel —Ñ–∞–π–ª–∞ (–¥–µ–Ω—å ${day})`,
                    price: 0,
                    meal_type: '–∑–∞–≤—Ç—Ä–∞–∫',
                    day_of_week: day,
                    weight: this.exactWeights[i],
                    recipe_number: this.exactRecipes[i],
                    school_id: 1,
                    week_start: new Date().toISOString().split('T')[0],
                    created_at: new Date().toISOString()
                });
            }
        }

        console.log(`üçΩÔ∏è –°–æ–∑–¥–∞–Ω–æ ${dishes.length} —Ç–æ—á–Ω—ã—Ö –±–ª—é–¥ –∏–∑ Excel —Ñ–∞–π–ª–∞!`);
        return dishes;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±–ª—é–¥
    createEnglishDishes(idCounter) {
        const dishes = [];
        
        const englishDishes = [
            'Cereal with milk', 'Pancakes', 'Condensed milk', 'Sour cream',
            'Fruit jam', 'Honey', 'Butter', 'Cheese', 'Boiled sausage',
            'Smoked sausage', 'Ham', 'Wheat bread', 'Tea with sugar',
            'Tea with milk', 'Cocoa with milk'
        ];

        const englishWeights = [
            '225 g', '2 pcs', '20 g', '20 g', '20 g', '20 g', '10 g', '15 g',
            '20 g', '20 g', '20 g', '20 g', '200 g', '200 g', '200 g'
        ];

        const englishRecipes = [
            '1/6', '11/2', '15/1', '15/7', '15/5', '15/6', '18/7', '18/8',
            '18/5', '18/6', '18/4', '17/1', '12/2', '12/3', '12/4'
        ];

        for (let day = 1; day <= 5; day++) {
            for (let i = 0; i < englishDishes.length; i++) {
                const dish = englishDishes[i];
                
                dishes.push({
                    id: idCounter++,
                    name: dish,
                    description: `English dish from Excel file (day ${day})`,
                    price: 0,
                    meal_type: 'breakfast',
                    day_of_week: day,
                    weight: englishWeights[i],
                    recipe_number: englishRecipes[i],
                    school_id: 1,
                    week_start: new Date().toISOString().split('T')[0],
                    created_at: new Date().toISOString()
                });
            }
        }

        console.log(`üçΩÔ∏è –°–æ–∑–¥–∞–Ω–æ ${dishes.length} –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±–ª—é–¥!`);
        return dishes;
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –±–ª—é–¥–∞
    getMealTypeForDish(dishName) {
        const breakfastDishes = [
            '—Å—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º', '–æ–ª–∞–¥—å–∏', '–º–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ', '—Å–º–µ—Ç–∞–Ω–∞',
            '–¥–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π', '–º–µ–¥', '–º–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ', '—Å—ã—Ä', '–∫–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è',
            '–∫–æ–ª–±–∞—Å–∞ –≤/–∫', '–≤–µ—Ç—á–∏–Ω–∞', '—Ö–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏', '—á–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º',
            '—á–∞–π —Å –º–æ–ª–æ–∫–æ–º', '–∫–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º'
        ];

        if (breakfastDishes.some(dish => dishName.toLowerCase().includes(dish))) {
            return '–∑–∞–≤—Ç—Ä–∞–∫';
        }

        return '–∑–∞–≤—Ç—Ä–∞–∫'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –±–ª—é–¥ –∏–∑ Excel
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    createExtendedData() {
        console.log('üöÄ –°–æ–∑–¥–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        const dishes = [];
        let idCounter = 1;
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–æ—á–Ω—ã–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞
        const allDishes = [...this.exactDishes, ...this.additionalDishes];
        const allWeights = [...this.exactWeights, ...this.additionalWeights];
        const allRecipes = [...this.exactRecipes, ...this.additionalRecipes];

        // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        for (let day = 1; day <= 5; day++) {
            for (let i = 0; i < allDishes.length; i++) {
                const dish = allDishes[i];
                
                dishes.push({
                    id: idCounter++,
                    name: dish,
                    description: `–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –±–ª—é–¥–æ –∏–∑ Excel —Ñ–∞–π–ª–∞ (–¥–µ–Ω—å ${day})`,
                    price: 0,
                    meal_type: this.getMealTypeForDish(dish),
                    day_of_week: day,
                    weight: allWeights[i] || '100 –≥',
                    recipe_number: allRecipes[i] || '1/1',
                    school_id: 1,
                    week_start: new Date().toISOString().split('T')[0],
                    created_at: new Date().toISOString()
                });
            }
        }

        console.log(`üçΩÔ∏è –°–æ–∑–¥–∞–Ω–æ ${dishes.length} —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –±–ª—é–¥!`);
        return dishes;
    }
}

module.exports = FinalExcelParser;
