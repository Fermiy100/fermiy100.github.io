// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π endpoint
import express from 'express';
import sqlite3 from 'sqlite3';
import { RealExcelParser } from './real-excel-parser.js';

const app = express();
const db = new sqlite3.Database('school_meals.db');

// –ù–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
app.post('/api/force-update-menu', async (req, res) => {
  try {
    console.log('üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–ï–ù–Æ...');
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –±–ª—é–¥–∞
    db.run("DELETE FROM menu_items", (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ menu_items:', err);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
      }
      
      console.log('‚úÖ menu_items –æ—á–∏—â–µ–Ω–∞');
      
      // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞
      const parser = new RealExcelParser();
      parser.parseExcelFile().then(dishes => {
        console.log(`üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${dishes.length} –±–ª—é–¥ –∏–∑ Excel —Ñ–∞–π–ª–∞`);
        
        if (dishes.length === 0) {
          return res.status(500).json({ error: '–ü–∞—Ä—Å–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –±–ª—é–¥' });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –±–ª—é–¥–∞
        let addedCount = 0;
        const schoolId = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const weekStart = new Date().toISOString().split('T')[0];
        
        dishes.forEach((dish, index) => {
          db.run(`INSERT INTO menu_items (school_id, name, description, price, meal_type, day_of_week, portion, week_start, recipe_number, weight) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [schoolId, dish.name, dish.description, dish.price, dish.meal_type, dish.day_of_week, dish.portion, weekStart, dish.recipe_number, dish.weight],
            function(err) {
              if (err) {
                console.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ ${index + 1} (${dish.name}):`, err);
              } else {
                addedCount++;
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –±–ª—é–¥–æ ${addedCount}: ${dish.name}`);
              }
              
              if (addedCount === dishes.length) {
                console.log(`üéâ –í–°–ï ${addedCount} –ë–õ–Æ–î –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–´!`);
                res.json({ 
                  success: true, 
                  message: `–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –±–ª—é–¥ –∏–∑ Excel —Ñ–∞–π–ª–∞`,
                  count: addedCount
                });
              }
            }
          );
        });
      }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ Excel —Ñ–∞–π–ª–∞' });
      });
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default app;
