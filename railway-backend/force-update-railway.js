// üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Railway —Å –Ω–æ–≤—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º
const https = require('https');

console.log('üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï RAILWAY...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –≤ Railway
async function addDishToRailway(dish) {
    return new Promise((resolve, reject) => {
        const postData = JSON.stringify(dish);
        
        const options = {
            hostname: 'fermiy100githubio-production.up.railway.app',
            port: 443,
            path: '/api/menu',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };

        const req = https.request(options, (res) => {
            let data = '';
            res.on('data', (chunk) => {
                data += chunk;
            });
            res.on('end', () => {
                try {
                    const response = JSON.parse(data);
                    resolve(response);
                } catch (error) {
                    resolve({ success: false, error: error.message });
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        req.write(postData);
        req.end();
    });
}

// –¢–æ—á–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞
const exactDishes = [
    '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º', '–û–ª–∞–¥—å–∏', '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ', '–°–º–µ—Ç–∞–Ω–∞',
    '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π', '–ú–µ–¥', '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ', '–°—ã—Ä', '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è',
    '–ö–æ–ª–±–∞—Å–∞ –≤/–∫', '–í–µ—Ç—á–∏–Ω–∞', '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏', '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º',
    '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º', '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º'
];

const exactWeights = [
    '225 –≥', '2 —à—Ç', '20 –≥', '20 –≥', '20 –≥', '20 –≥', '10 –≥', '15 –≥', 
    '20 –≥', '20 –≥', '20 –≥', '20 –≥', '200 –≥', '200 –≥', '200 –≥'
];

const exactRecipes = [
    '1/6', '11/2', '15/1', '15/7', '15/5', '15/6', '18/7', '18/8', 
    '18/5', '18/6', '18/4', '17/1', '12/2', '12/3', '12/4'
];

// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –±–ª—é–¥–∞ –≤ Railway
async function addAllDishesToRailway() {
    console.log('üçΩÔ∏è –î–æ–±–∞–≤–ª—è—é –≤—Å–µ –±–ª—é–¥–∞ –≤ Railway...');
    
    let successCount = 0;
    let errorCount = 0;
    
    for (let day = 1; day <= 5; day++) {
        for (let i = 0; i < exactDishes.length; i++) {
            const dish = {
                name: exactDishes[i],
                description: `–¢–æ—á–Ω–æ–µ –±–ª—é–¥–æ –∏–∑ Excel —Ñ–∞–π–ª–∞ (–¥–µ–Ω—å ${day})`,
                price: 0,
                meal_type: '–∑–∞–≤—Ç—Ä–∞–∫',
                day_of_week: day,
                weight: exactWeights[i],
                recipe_number: exactRecipes[i]
            };

            try {
                const result = await addDishToRailway(dish);
                if (result.message && result.message.includes('–¥–æ–±–∞–≤–ª–µ–Ω–æ')) {
                    successCount++;
                } else {
                    errorCount++;
                }
                console.log(`   –î–µ–Ω—å ${day}, –ë–ª—é–¥–æ ${i + 1}: ${result.message || '–û—à–∏–±–∫–∞'}`);
            } catch (error) {
                errorCount++;
                console.log(`   –î–µ–Ω—å ${day}, –ë–ª—é–¥–æ ${i + 1}: –û—à–∏–±–∫–∞ - ${error.message}`);
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 100));
        }
    }
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${successCount} –±–ª—é–¥`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount} –±–ª—é–¥`);
    console.log(`üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((successCount / (successCount + errorCount)) * 100)}%`);
    
    if (successCount > 0) {
        console.log('\nüéâ RAILWAY –û–ë–ù–û–í–õ–ï–ù! –¢–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å!');
    } else {
        console.log('\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Railway API.');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
addAllDishesToRailway().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
});
