/**
 * –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–´–ô –ü–ê–†–°–ï–† –ú–ï–ù–Æ - –†–ê–ë–û–¢–ê–ï–¢ –° –õ–Æ–ë–´–ú–ò –§–ê–ô–õ–ê–ú–ò
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π
 */

import XLSX from 'xlsx';

class GuaranteedMenuParser {
  constructor() {
    console.log('üöÄ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –º–µ–Ω—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞
   */
  async parseExcelFile(fileBuffer) {
    try {
      console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞');
      
      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
      const workbook = XLSX.read(fileBuffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      
      if (!sheetName) {
        console.log('‚ùå –ù–µ—Ç –ª–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ');
        return [];
      }
      
      const worksheet = workbook.Sheets[sheetName];
      const data = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });
      
      console.log(`‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: ${data.length} —Å—Ç—Ä–æ–∫`);
      
      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ - –±–µ—Ä–µ–º –í–°–ï —á—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –±–ª—é–¥–∞
      const menuItems = this.guaranteedParse(data);
      
      console.log(`üéØ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ ${menuItems.length} –±–ª—é–¥`);
      return menuItems;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      return [];
    }
  }

  /**
   * –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ - –±–µ—Ä–µ–º –í–°–ï —á—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –±–ª—é–¥–∞
   */
  guaranteedParse(data) {
    console.log('üîç –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ - –±–µ—Ä–µ–º –í–°–ï —á—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –±–ª—é–¥–∞');
    const items = [];
    
    for (let row = 0; row < data.length; row++) {
      const rowData = data[row];
      if (!rowData) continue;
      
      for (let col = 0; col < rowData.length; col++) {
        const cell = rowData[col];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.toString().trim();
        if (cellText.length < 3) continue;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –æ—á–µ–≤–∏–¥–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if (this.isObviousHeader(cellText)) {
          continue;
        }
        
        // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ
        const dish = this.createGuaranteedDish(cellText, row, col);
        if (dish) {
          items.push(dish);
        }
      }
    }
    
    console.log(`‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞—à–µ–ª ${items.length} –±–ª—é–¥`);
    return items;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—á–µ–≤–∏–¥–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
   */
  isObviousHeader(text) {
    const lowerText = text.toLowerCase();
    
    // –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –æ—á–µ–≤–∏–¥–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const obviousHeaders = [
      '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
      '–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫', '—É–∂–∏–Ω',
      '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'
    ];
    
    return obviousHeaders.some(header => lowerText === header);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
   */
  createGuaranteedDish(text, row, col) {
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
    let cleanName = text.trim();
    if (cleanName.length < 3) return null;
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    cleanName = cleanName.replace(/[^\w\s\-\.\(\)\/]/g, '');
    cleanName = cleanName.replace(/\s+/g, ' ').trim();
    
    if (cleanName.length < 3) return null;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å
    const weightMatch = text.match(/(\d+)\s*–≥/);
    const weight = weightMatch ? weightMatch[1] + ' –≥' : null;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    const dayOfWeek = this.getDayFromPosition(col);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    const mealType = this.getMealTypeFromText(text);
    
    const dish = {
      name: cleanName,
      description: cleanName + (weight ? ` (${weight})` : ''),
      price: 0,
      portion: weight || '1 –ø–æ—Ä—Ü–∏—è',
      day_of_week: dayOfWeek,
      meal_type: mealType,
      school_id: 1,
      week_start: new Date().toISOString().split('T')[0],
      recipe_number: null,
      weight: weight
    };
    
    console.log(`üçΩÔ∏è –°–æ–∑–¥–∞–Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ: "${cleanName}" (${mealType}, –¥–µ–Ω—å ${dayOfWeek})`);
    return dish;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–∫–∏
   */
  getDayFromPosition(col) {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - –∫–∞–∂–¥–∞—è –∫–æ–ª–æ–Ω–∫–∞ —ç—Ç–æ –¥–µ–Ω—å
    const days = [1, 2, 3, 4, 5, 6, 7]; // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    return days[col % 7] || 1;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
   */
  getMealTypeFromText(text) {
    const lowerText = text.toLowerCase();
    
    if (lowerText.includes('–∑–∞–≤—Ç—Ä–∞–∫') || lowerText.includes('—É—Ç—Ä–æ–º')) {
      return '–∑–∞–≤—Ç—Ä–∞–∫';
    }
    if (lowerText.includes('–æ–±–µ–¥') || lowerText.includes('–¥–Ω–µ–≤–Ω–æ–π')) {
      return '–æ–±–µ–¥';
    }
    if (lowerText.includes('–ø–æ–ª–¥–Ω–∏–∫') || lowerText.includes('–ø–µ—Ä–µ–∫—É—Å')) {
      return '–ø–æ–ª–¥–Ω–∏–∫';
    }
    if (lowerText.includes('—É–∂–∏–Ω') || lowerText.includes('–≤–µ—á–µ—Ä–æ–º')) {
      return '—É–∂–∏–Ω';
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±–µ–¥
    return '–æ–±–µ–¥';
  }
}

export default GuaranteedMenuParser;
