/**
 * –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–ê–†–°–ï–† –ú–ï–ù–Æ
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ª—é–±—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –±–ª—é–¥–∞
 */

import XLSX from 'xlsx';

export class ImprovedMenuParser {
  constructor() {
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    this.weightPattern = /\d+\s*–≥/gi;
    this.recipePattern = /‚Ññ\s*(\d+\/\d+)/gi;
    this.portionPattern = /\d+\s*—à—Ç/gi;
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    this.breakfastKeywords = ['–∑–∞–≤—Ç—Ä–∞–∫', '—É—Ç—Ä–æ–º', '—É—Ç—Ä–µ–Ω–Ω–∏–π', '—É—Ç—Ä–æ', '–∑ –∞ –≤ —Ç —Ä –∞ –∫', '–∑–∞–≤—Ç—Ä–∞–∫'];
    this.lunchKeywords = ['–æ–±–µ–¥', '–¥–Ω–µ–≤–Ω–æ–π', '–æ—Å–Ω–æ–≤–Ω–æ–π', '–¥–µ–Ω—å', '–æ –± –µ –¥', '–æ–±–µ–¥'];
    this.snackKeywords = ['–ø–æ–ª–¥–Ω–∏–∫', '–ø–µ—Ä–µ–∫—É—Å', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π', '–¥–æ–ø', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥–∞—Ä–Ω–∏—Ä'];
    this.dinnerKeywords = ['—É–∂–∏–Ω', '–≤–µ—á–µ—Ä–Ω–∏–π', '–≤–µ—á–µ—Ä–æ–º', '–≤–µ—á–µ—Ä'];
    
    // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è)
    this.daysOfWeek = [
      ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–ø–Ω', 'monday'],
      ['–≤—Ç–æ—Ä–Ω–∏–∫', '–≤—Ç', 'tuesday'],
      ['—Å—Ä–µ–¥–∞', '—Å—Ä', 'wednesday'],
      ['—á–µ—Ç–≤–µ—Ä–≥', '—á—Ç', 'thursday'],
      ['–ø—è—Ç–Ω–∏—Ü–∞', '–ø—Ç', 'friday'],
      ['—Å—É–±–±–æ—Ç–∞', '—Å–±', 'saturday'],
      ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–≤—Å', 'sunday']
    ];
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞
   */
  parseExcelFile(buffer) {
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É—Ñ–µ—Ä
      if (!buffer || buffer.length === 0) {
        console.error('‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
        return [];
      }
      
      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
      const workbook = XLSX.read(buffer, { type: 'buffer' });
      
      if (!workbook.SheetNames || workbook.SheetNames.length === 0) {
        console.error('‚ùå –í Excel —Ñ–∞–π–ª–µ –Ω–µ—Ç –ª–∏—Å—Ç–æ–≤');
        return [];
      }
      
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      
      if (!worksheet) {
        console.error(`‚ùå –õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return [];
      }
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω –ª–∏—Å—Ç: ${sheetName}`);
      console.log(`üìè –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${jsonData.length} —Å—Ç—Ä–æ–∫`);
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      let items = [];
      
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –¥–Ω—è–º–∏ –∏ –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏
      try {
        items = this.parseStandardStructure(jsonData);
        if (items.length > 0) {
          console.log(`‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –Ω–∞–π–¥–µ–Ω–æ ${items.length} –±–ª—é–¥`);
          return items;
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: ${error.message}`);
      }
      
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –±–ª—é–¥
      try {
        items = this.parseSimpleList(jsonData);
        if (items.length > 0) {
          console.log(`‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫: –Ω–∞–π–¥–µ–Ω–æ ${items.length} –±–ª—é–¥`);
          return items;
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
      }
      
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
      try {
        items = this.parseByKeywords(jsonData);
        if (items.length > 0) {
          console.log(`‚úÖ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: –Ω–∞–π–¥–µ–Ω–æ ${items.length} –±–ª—é–¥`);
          return items;
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
      }
      
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
      try {
        items = this.parseUniversal(jsonData);
        console.log(`‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: –Ω–∞–π–¥–µ–Ω–æ ${items.length} –±–ª—é–¥`);
        return items;
      } catch (error) {
        console.log(`‚ö†Ô∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
        return [];
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      return [];
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–¥–Ω–∏ + –ø—Ä–∏–µ–º—ã –ø–∏—â–∏) - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  parseStandardStructure(data) {
    const items = [];
    
    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    const dayColumns = this.findDayColumns(data);
    if (dayColumns.length === 0) return items;
    
    console.log(`üìÖ –ù–∞–π–¥–µ–Ω–æ –¥–Ω–µ–π: ${dayColumns.length}`);
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –ø–∞—Ä—Å–∏–º –±–ª—é–¥–∞ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
    dayColumns.forEach(dayCol => {
      console.log(`üîç –ü–∞—Ä—Å–∏–º –¥–µ–Ω—å ${dayCol.day} –≤ –∫–æ–ª–æ–Ω–∫–µ ${dayCol.column}`);
      
      // –ò—â–µ–º –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
      const mealSections = this.findMealSectionsForDay(data, dayCol.column);
      console.log(`üçΩÔ∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–ª—è –¥–Ω—è ${dayCol.day}:`, mealSections.map(s => s.mealType));
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏, –ø–∞—Ä—Å–∏–º –≤—Å–µ –∫–∞–∫ –æ–±–µ–¥
      if (mealSections.length === 0) {
        console.log(`‚ö†Ô∏è –ü—Ä–∏–µ–º—ã –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–Ω—è ${dayCol.day}, –ø–∞—Ä—Å–∏–º –≤—Å–µ –∫–∞–∫ –æ–±–µ–¥`);
        const allItems = this.extractDishesFromSection(
          data, 
          dayCol.column, 
          0, 
          data.length - 1, 
          dayCol.day, 
          '–æ–±–µ–¥'
        );
        items.push(...allItems);
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${allItems.length} –±–ª—é–¥ –∫–∞–∫ –æ–±–µ–¥`);
      } else {
        // –ü–∞—Ä—Å–∏–º –±–ª—é–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        mealSections.forEach(section => {
          const mealItems = this.extractDishesFromSection(
            data, 
            dayCol.column, 
            section.startRow, 
            section.endRow, 
            dayCol.day, 
            section.mealType
          );
          items.push(...mealItems);
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${mealItems.length} –±–ª—é–¥ –¥–ª—è ${section.mealType}`);
        });
      }
    });
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueItems = this.removeDuplicates(items);
    
    console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${uniqueItems.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª—é–¥`);
    return uniqueItems;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥
   */
  parseSimpleList(data) {
    const items = [];
    
    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {
      const row = data[rowIndex];
      if (!row) continue;
      
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        const cell = row[colIndex];
        if (!cell || typeof cell !== 'string') continue;
        
        const cleanName = this.cleanDishName(cell);
        if (!cleanName || cleanName.length < 3) continue;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –∏ –ø—Ä–∏–µ–º –ø–∏—â–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        const dayOfWeek = this.determineDayByPosition(colIndex, data);
        const mealType = this.determineMealByPosition(rowIndex, data);
        
        const dish = this.createDish(cleanName, dayOfWeek, mealType, cell);
        if (dish) {
          items.push(dish);
        }
      }
    }
    
    return items;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
   */
  parseByKeywords(data) {
    const items = [];
    
    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {
      const row = data[rowIndex];
      if (!row) continue;
      
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        const cell = row[colIndex];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.toLowerCase().trim();
        
        // –ò—â–µ–º –±–ª—é–¥–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if (this.isDishName(cellText)) {
          const cleanName = this.cleanDishName(cell);
          if (!cleanName || cleanName.length < 3) continue;
          
          const dayOfWeek = this.determineDayByContext(data, rowIndex, colIndex);
          const mealType = this.determineMealByContext(data, rowIndex, colIndex);
          
          const dish = this.createDish(cleanName, dayOfWeek, mealType, cell);
          if (dish) {
            items.push(dish);
          }
        }
      }
    }
    
    return items;
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
   */
  parseUniversal(data) {
    const items = [];
    
    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {
      const row = data[rowIndex];
      if (!row) continue;
      
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        const cell = row[colIndex];
        if (!cell || typeof cell !== 'string') continue;
        
        const cleanName = this.cleanDishName(cell);
        if (!cleanName || cleanName.length < 3) continue;
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        const dayOfWeek = this.determineDayByPosition(colIndex, data) || 
                         this.determineDayByContext(data, rowIndex, colIndex) || 
                         Math.floor(colIndex / 2) + 1;
        
        const mealType = this.determineMealByPosition(rowIndex, data) || 
                        this.determineMealByContext(data, rowIndex, colIndex) || 
                        (rowIndex % 2 === 0 ? '–∑–∞–≤—Ç—Ä–∞–∫' : '–æ–±–µ–¥');
        
        const dish = this.createDish(cleanName, dayOfWeek, mealType, cell);
        if (dish) {
          items.push(dish);
        }
      }
    }
    
    return items;
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
   */
  findDayColumns(data) {
    const dayColumns = [];
    const foundColumns = new Set();
    
    for (let rowIndex = 0; rowIndex < Math.min(5, data.length); rowIndex++) {
      const row = data[rowIndex];
      if (!row) continue;
      
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        if (foundColumns.has(colIndex)) continue; // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        
        const cell = row[colIndex];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.toLowerCase().trim();
        
        this.daysOfWeek.forEach((dayVariants, dayIndex) => {
          dayVariants.forEach(variant => {
            if (cellText.includes(variant)) {
              dayColumns.push({
                day: dayIndex + 1,
                column: colIndex,
                name: dayVariants[0]
              });
              foundColumns.add(colIndex);
            }
          });
        });
      }
    }
    
    return dayColumns;
  }

  /**
   * –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å —Ç–∏–ø–∞–º–∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
   */
  findMealRows(data) {
    const mealRows = [];
    const foundRows = new Set();
    
    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {
      if (foundRows.has(rowIndex)) continue; // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      
      const row = data[rowIndex];
      if (!row) continue;
      
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        const cell = row[colIndex];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.toLowerCase().trim();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        let mealType = null;
        if (this.breakfastKeywords.some(keyword => cellText.includes(keyword))) {
          mealType = '–∑–∞–≤—Ç—Ä–∞–∫';
        } else if (this.lunchKeywords.some(keyword => cellText.includes(keyword))) {
          mealType = '–æ–±–µ–¥';
        } else if (this.snackKeywords.some(keyword => cellText.includes(keyword))) {
          mealType = '–ø–æ–ª–¥–Ω–∏–∫';
        } else if (this.dinnerKeywords.some(keyword => cellText.includes(keyword))) {
          mealType = '–æ–±–µ–¥'; // –£–∂–∏–Ω –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –æ–±–µ–¥—É
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è "–û –ë –ï –î" —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        if (cellText.includes('–æ –± –µ –¥') || cellText.includes('–æ–±–µ–¥')) {
          mealType = '–æ–±–µ–¥';
        }
        
        if (mealType) {
          mealRows.push({
            meal: mealType,
            row: rowIndex,
            name: cellText
          });
          foundRows.add(rowIndex);
          break; // –ù–∞—à–ª–∏ –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
        }
      }
    }
    
    return mealRows;
  }

  /**
   * –ü–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–π –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  findMealSectionsForDay(data, colIndex) {
    const sections = [];
    const mealHeaders = [];
    
    console.log(`üîç –ò—â–µ–º –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ ${colIndex}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {
      const row = data[rowIndex];
      if (!row || !row[colIndex]) continue;
      
      const cell = row[colIndex];
      if (!cell || typeof cell !== 'string') continue;
      
      const cellText = cell.trim();
      if (!cellText || cellText.length < 3) continue;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
      const lowerText = cellText.toLowerCase();
      
      // –ó–∞–≤—Ç—Ä–∞–∫
      if (this.isMealType(lowerText, '–∑–∞–≤—Ç—Ä–∞–∫')) {
        mealHeaders.push({ row: rowIndex, type: '–∑–∞–≤—Ç—Ä–∞–∫', text: cellText });
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ó–ê–í–¢–†–ê–ö –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex}: "${cellText}"`);
      }
      // –û–±–µ–¥
      else if (this.isMealType(lowerText, '–æ–±–µ–¥')) {
        mealHeaders.push({ row: rowIndex, type: '–æ–±–µ–¥', text: cellText });
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –û–ë–ï–î –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex}: "${cellText}"`);
      }
      // –ü–æ–ª–¥–Ω–∏–∫
      else if (this.isMealType(lowerText, '–ø–æ–ª–¥–Ω–∏–∫')) {
        mealHeaders.push({ row: rowIndex, type: '–ø–æ–ª–¥–Ω–∏–∫', text: cellText });
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ü–û–õ–î–ù–ò–ö –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex}: "${cellText}"`);
      }
      // –£–∂–∏–Ω
      else if (this.isMealType(lowerText, '—É–∂–∏–Ω')) {
        mealHeaders.push({ row: rowIndex, type: '—É–∂–∏–Ω', text: cellText });
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –£–ñ–ò–ù –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex}: "${cellText}"`);
      }
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${mealHeaders.length} –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏:`, mealHeaders.map(h => `${h.type} (—Å—Ç—Ä–æ–∫–∞ ${h.row})`));
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    for (let i = 0; i < mealHeaders.length; i++) {
      const currentHeader = mealHeaders[i];
      const nextHeader = mealHeaders[i + 1];
      
      const section = {
        mealType: currentHeader.type,
        startRow: currentHeader.row + 1,
        endRow: nextHeader ? nextHeader.row - 1 : data.length - 1
      };
      
      sections.push(section);
      console.log(`üìã –°–µ–∫—Ü–∏—è ${section.mealType}: —Å—Ç—Ä–æ–∫–∏ ${section.startRow}-${section.endRow}`);
    }
    
    return sections;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
   */
  isMealType(text, mealType) {
    const keywords = {
      '–∑–∞–≤—Ç—Ä–∞–∫': ['–∑–∞–≤—Ç—Ä–∞–∫', '–∑ –∞ –≤ —Ç —Ä –∞ –∫', '—É—Ç—Ä–æ–º', '—É—Ç—Ä–µ–Ω–Ω–∏–π', '—É—Ç—Ä–æ'],
      '–æ–±–µ–¥': ['–æ–±–µ–¥', '–æ –± –µ –¥', '–¥–Ω–µ–≤–Ω–æ–π', '–æ—Å–Ω–æ–≤–Ω–æ–π', '–¥–µ–Ω—å'],
      '–ø–æ–ª–¥–Ω–∏–∫': ['–ø–æ–ª–¥–Ω–∏–∫', '–ø –æ –ª –¥ –Ω –∏ –∫', '–ø–µ—Ä–µ–∫—É—Å', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π', '–¥–æ–ø'],
      '—É–∂–∏–Ω': ['—É–∂–∏–Ω', '—É –∂ –∏ –Ω', '–≤–µ—á–µ—Ä–Ω–∏–π', '–≤–µ—á–µ—Ä–æ–º', '–≤–µ—á–µ—Ä']
    };
    
    return keywords[mealType].some(keyword => text.includes(keyword));
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª—é–¥ –∏–∑ —Å–µ–∫—Ü–∏–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
   */
  extractDishesFromSection(data, colIndex, startRow, endRow, dayOfWeek, mealType) {
    const items = [];
    
    for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {
      const row = data[rowIndex];
      if (!row || !row[colIndex]) continue;
      
      const cell = row[colIndex];
      if (!cell || typeof cell !== 'string') continue;
      
      const cellText = cell.trim();
      if (!cellText || cellText.length < 3) continue;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥—Ä—É–≥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
      if (this.isMealHeader(cellText)) {
        break; // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏
      }
      
      const dish = this.createDish(cellText, dayOfWeek, mealType, cell);
      if (dish) {
        // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –±–ª—é–¥ (—Å–æ—É—Å—ã), –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ
        if (Array.isArray(dish)) {
          items.push(...dish);
        } else {
          items.push(dish);
        }
      }
    }
    
    return items;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª—é–¥ –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  extractDishesFromArea(data, colIndex, startRow, dayOfWeek, mealType) {
    const items = [];
    
    // –ò—â–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 15 —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    for (let rowIndex = startRow; rowIndex < Math.min(startRow + 15, data.length); rowIndex++) {
      const row = data[rowIndex];
      if (!row || !row[colIndex]) continue;
      
      const cell = row[colIndex];
      if (!cell || typeof cell !== 'string') continue;
      
      const cellText = cell.trim();
      if (!cellText || cellText.length < 3) continue;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥—Ä—É–≥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
      if (this.isMealHeader(cellText)) {
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–û –ë –ï –î", –º–µ–Ω—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –Ω–∞ –æ–±–µ–¥
        if (cellText.toLowerCase().includes('–æ –± –µ –¥') || cellText.toLowerCase().includes('–æ–±–µ–¥')) {
          mealType = '–æ–±–µ–¥';
        }
        break;
      }
      
      const dish = this.createDish(cellText, dayOfWeek, mealType, cell);
      if (dish) {
        // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –±–ª—é–¥ (—Å–æ—É—Å—ã), –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ
        if (Array.isArray(dish)) {
          items.push(...dish);
        } else {
          items.push(dish);
        }
      }
    }
    
    return items;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª—é–¥ –æ–±–µ–¥–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ "–û –ë –ï –î"
   */
  extractLunchDishes(data, colIndex, dayOfWeek) {
    const items = [];
    
    console.log(`üîç –ò—â–µ–º "–û –ë –ï –î" –≤ –∫–æ–ª–æ–Ω–∫–µ ${colIndex} –¥–ª—è –¥–Ω—è ${dayOfWeek}`);
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å "–û –ë –ï –î" (–∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏)
    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {
      const row = data[rowIndex];
      if (!row || !row[colIndex]) continue;
      
      const cell = row[colIndex];
      if (!cell || typeof cell !== 'string') continue;
      
      const cellText = cell.trim();
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      if (cellText.toLowerCase().includes('–æ–±–µ–¥') || cellText.includes('–û  –ë  –ï  –î')) {
        console.log(`  –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É ${rowIndex}: "${cell}"`);
      }
      
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ "–û –ë –ï –î" (–∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏)
      if (cellText === '–û  –ë  –ï  –î  ' || cellText.includes('–û  –ë  –ï  –î') || cellText.toLowerCase().includes('–æ–±–µ–¥')) {
        console.log(`üçΩÔ∏è –ù–∞–π–¥–µ–Ω –æ–±–µ–¥ –¥–ª—è –¥–Ω—è ${dayOfWeek} –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex}: "${cell}"`);
        
        // –ü–∞—Ä—Å–∏–º —Å–ª–µ–¥—É—é—â–∏–µ 15 —Å—Ç—Ä–æ–∫ –∫–∞–∫ –±–ª—é–¥–∞ –æ–±–µ–¥–∞
        for (let i = rowIndex + 1; i < Math.min(rowIndex + 15, data.length); i++) {
          const lunchRow = data[i];
          if (!lunchRow || !lunchRow[colIndex]) continue;
          
          const lunchCell = lunchRow[colIndex];
          if (!lunchCell || typeof lunchCell !== 'string') continue;
          
          const lunchText = lunchCell.trim();
          if (!lunchText || lunchText.length < 3) continue;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥—Ä—É–≥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
          if (this.isMealHeader(lunchText)) break;
          
          const dish = this.createDish(lunchText, dayOfWeek, '–æ–±–µ–¥', lunchCell);
          if (dish) {
            if (Array.isArray(dish)) {
              items.push(...dish);
            } else {
              items.push(dish);
            }
          }
        }
        break;
      }
    }
    
    console.log(`  –ù–∞–π–¥–µ–Ω–æ –±–ª—é–¥ –æ–±–µ–¥–∞: ${items.length}`);
    return items;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª—é–¥ –æ–±–µ–¥–∞ –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
   */
  extractLunchFromAllColumns(data, items, dayColumns) {
    console.log('üîç –ò—â–µ–º "–û –ë –ï –î" –≤–æ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö...');
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å "–û –ë –ï –î" –≤–æ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {
      const row = data[rowIndex];
      if (!row) continue;
      
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        const cell = row[colIndex];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.trim();
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫–∏ 18
        if (rowIndex === 17) { // —Å—Ç—Ä–æ–∫–∞ 18 (–∏–Ω–¥–µ–∫—Å 17)
          console.log(`  –°—Ç—Ä–æ–∫–∞ 18, –∫–æ–ª–æ–Ω–∫–∞ ${colIndex}: "${cell}"`);
          console.log(`  cellText: "${cellText}"`);
          console.log(`  cellText.length: ${cellText.length}`);
          console.log(`  cellText.charCodeAt(0): ${cellText.charCodeAt(0)}`);
          console.log(`  cellText.charCodeAt(1): ${cellText.charCodeAt(1)}`);
          console.log(`  cellText.charCodeAt(2): ${cellText.charCodeAt(2)}`);
          console.log(`  cellText.charCodeAt(3): ${cellText.charCodeAt(3)}`);
          console.log(`  cellText.charCodeAt(4): ${cellText.charCodeAt(4)}`);
          console.log(`  cellText.charCodeAt(5): ${cellText.charCodeAt(5)}`);
          console.log(`  cellText.charCodeAt(6): ${cellText.charCodeAt(6)}`);
          console.log(`  cellText.charCodeAt(7): ${cellText.charCodeAt(7)}`);
          console.log(`  cellText.charCodeAt(8): ${cellText.charCodeAt(8)}`);
          console.log(`  cellText.charCodeAt(9): ${cellText.charCodeAt(9)}`);
          console.log(`  === '–û  –ë  –ï  –î': ${cellText === '–û  –ë  –ï  –î'}`);
          console.log(`  includes('–û  –ë  –ï  –î'): ${cellText.includes('–û  –ë  –ï  –î')}`);
          console.log(`  toLowerCase().includes('–æ–±–µ–¥'): ${cellText.toLowerCase().includes('–æ–±–µ–¥')}`);
        }
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ "–û –ë –ï –î" (—Å –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏)
        if (cellText.includes('–û') && cellText.includes('–ë') && cellText.includes('–ï') && cellText.includes('–î') && cellText.length <= 15) {
          console.log(`üçΩÔ∏è –ù–∞–π–¥–µ–Ω "–û –ë –ï –î" –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}, –∫–æ–ª–æ–Ω–∫–µ ${colIndex}: "${cell}"`);
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–µ
          const dayCol = dayColumns.find(dc => dc.column === colIndex);
          if (!dayCol) {
            console.log(`  –ö–æ–ª–æ–Ω–∫–∞ ${colIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–Ω—è—Ö –Ω–µ–¥–µ–ª–∏`);
            continue;
          }
          
          console.log(`  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–Ω—å ${dayCol.day} (–∫–æ–ª–æ–Ω–∫–∞ ${colIndex})`);
          
          // –ü–∞—Ä—Å–∏–º —Å–ª–µ–¥—É—é—â–∏–µ 15 —Å—Ç—Ä–æ–∫ –∫–∞–∫ –±–ª—é–¥–∞ –æ–±–µ–¥–∞
          for (let i = rowIndex + 1; i < Math.min(rowIndex + 15, data.length); i++) {
            const lunchRow = data[i];
            if (!lunchRow || !lunchRow[colIndex]) continue;
            
            const lunchCell = lunchRow[colIndex];
            if (!lunchCell || typeof lunchCell !== 'string') continue;
            
            const lunchText = lunchCell.trim();
            if (!lunchText || lunchText.length < 3) continue;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥—Ä—É–≥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            if (this.isMealHeader(lunchText)) break;
            
            const dish = this.createDish(lunchText, dayCol.day, '–æ–±–µ–¥', lunchCell);
            if (dish) {
              if (Array.isArray(dish)) {
                items.push(...dish);
              } else {
                items.push(dish);
              }
            }
          }
        }
      }
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞
   */
  createDish(text, dayOfWeek, mealType, originalText) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ —Å–æ—É—Å—ã - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞
    if (text.includes('–°–æ—É—Å—ã:') && text.includes(';')) {
      return this.createSauceDishes(text, dayOfWeek, mealType, originalText);
    }
    
    const cleanName = this.cleanDishName(text);
    if (!cleanName || cleanName.length < 3) return null;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const weight = this.extractWeight(originalText);
    const recipeNumber = this.extractRecipeNumber(originalText);
    const portion = this.extractPortion(originalText);
    
    return {
      name: cleanName,
      description: this.generateDescription(cleanName, recipeNumber),
      price: 0, // –¶–µ–Ω—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
      portion: portion || weight || this.generatePortion(cleanName),
      day_of_week: Math.min(Math.max(dayOfWeek, 1), 7), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 1-7
      meal_type: mealType || '–æ–±–µ–¥',
      school_id: 1,
      week_start: new Date().toISOString().split('T')[0],
      recipe_number: recipeNumber,
      weight: weight
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±–ª—é–¥ –∏–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–æ—É—Å–æ–≤
   */
  createSauceDishes(text, dayOfWeek, mealType, originalText) {
    const dishes = [];
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—É—Å—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
    const sauceText = text.replace('–°–æ—É—Å—ã:', '').trim();
    const sauces = sauceText.split(';').map(s => s.trim()).filter(s => s.length > 0);
    
    sauces.forEach(sauce => {
      const cleanName = this.cleanDishName(sauce);
      if (cleanName && cleanName.length >= 3) {
        const weight = this.extractWeight(sauce);
        const recipeNumber = this.extractRecipeNumber(sauce);
        
        dishes.push({
          name: cleanName,
          description: this.generateDescription(cleanName, recipeNumber),
          price: 0,
          portion: weight || this.generatePortion(cleanName),
          day_of_week: Math.min(Math.max(dayOfWeek, 1), 7),
          meal_type: mealType || '–æ–±–µ–¥',
          school_id: 1,
          week_start: new Date().toISOString().split('T')[0],
          recipe_number: recipeNumber,
          weight: weight
        });
      }
    });
    
    return dishes;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
   */
  cleanDishName(text) {
    let clean = text.trim();
    
    // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    clean = clean.replace(/‚Ññ\s*\d+\/\d+/g, '');
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    clean = clean.replace(/\s+/g, ' ').trim();
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    clean = clean.replace(/^[^\w–∞-—è—ë]+|[^\w–∞-—è—ë]+$/gi, '');
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –±–ª—é–¥–∞–º–∏
    const excludeWords = [
      '–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫', '—É–∂–∏–Ω', 
      '–∑–∞–≤—Ç—Ä–∞–∫:', '–æ–±–µ–¥:', '–ø–æ–ª–¥–Ω–∏–∫:', '—É–∂–∏–Ω:',
      '–∑ –∞ –≤ —Ç —Ä –∞ –∫', '–æ –± –µ –¥', '–ø –æ –ª –¥ –Ω –∏ –∫', '—É –∂ –∏ –Ω',
      '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞',
      '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–¥–µ–Ω—å', '–Ω–µ–¥–µ–ª—è',
      '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥–∞—Ä–Ω–∏—Ä', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π'
    ];
    
    if (excludeWords.some(word => clean.toLowerCase() === word.toLowerCase())) {
      return null;
    }
    
    return clean;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–ª—é–¥–∞
   */
  isDishName(text) {
    const lowerText = text.toLowerCase();
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (this.isMealHeader(lowerText) || this.isDayHeader(lowerText)) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ
    if (!text || text.length < 3 || /^\d+$/.test(text)) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
    if (!/[–∞-—è—ë]/i.test(text)) {
      return false;
    }
    
    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
   */
  isMealHeader(text) {
    const lowerText = text.toLowerCase();
    return this.isMealType(lowerText, '–∑–∞–≤—Ç—Ä–∞–∫') ||
           this.isMealType(lowerText, '–æ–±–µ–¥') ||
           this.isMealType(lowerText, '–ø–æ–ª–¥–Ω–∏–∫') ||
           this.isMealType(lowerText, '—É–∂–∏–Ω');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥–Ω—è
   */
  isDayHeader(text) {
    const lowerText = text.toLowerCase();
    return this.daysOfWeek.some(dayVariants => 
      dayVariants.some(variant => lowerText.includes(variant))
    );
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
   */
  determineDayByPosition(colIndex, data) {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –∫–∞–∂–¥–∞—è –∫–æ–ª–æ–Ω–∫–∞ = –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    return Math.min(colIndex + 1, 7);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
   */
  determineMealByPosition(rowIndex, data) {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: —á–µ—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ = –∑–∞–≤—Ç—Ä–∞–∫, –Ω–µ—á–µ—Ç–Ω—ã–µ = –æ–±–µ–¥
    return rowIndex % 2 === 0 ? '–∑–∞–≤—Ç—Ä–∞–∫' : '–æ–±–µ–¥';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
   */
  determineDayByContext(data, rowIndex, colIndex) {
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π
    for (let r = Math.max(0, rowIndex - 5); r < Math.min(data.length, rowIndex + 5); r++) {
      const row = data[r];
      if (!row) continue;
      
      for (let c = Math.max(0, colIndex - 3); c < Math.min(row.length, colIndex + 3); c++) {
        const cell = row[c];
        if (!cell || typeof cell !== 'string') continue;
        
        if (this.isDayHeader(cell.toLowerCase())) {
          return this.getDayNumber(cell.toLowerCase());
        }
      }
    }
    
    return null;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
   */
  determineMealByContext(data, rowIndex, colIndex) {
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    for (let r = Math.max(0, rowIndex - 5); r < Math.min(data.length, rowIndex + 5); r++) {
      const row = data[r];
      if (!row) continue;
      
      for (let c = Math.max(0, colIndex - 3); c < Math.min(row.length, colIndex + 3); c++) {
        const cell = row[c];
        if (!cell || typeof cell !== 'string') continue;
        
        const lowerText = cell.toLowerCase();
        if (this.breakfastKeywords.some(k => lowerText.includes(k))) return '–∑–∞–≤—Ç—Ä–∞–∫';
        if (this.lunchKeywords.some(k => lowerText.includes(k))) return '–æ–±–µ–¥';
        if (this.snackKeywords.some(k => lowerText.includes(k))) return '–ø–æ–ª–¥–Ω–∏–∫';
        if (this.dinnerKeywords.some(k => lowerText.includes(k))) return '–æ–±–µ–¥';
      }
    }
    
    return null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
   */
  getDayNumber(dayText) {
    for (let i = 0; i < this.daysOfWeek.length; i++) {
      if (this.daysOfWeek[i].some(variant => dayText.includes(variant))) {
        return i + 1;
      }
    }
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Å–∞
   */
  extractWeight(text) {
    const match = text.match(this.weightPattern);
    return match ? match[0] : '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞
   */
  extractRecipeNumber(text) {
    const match = text.match(this.recipePattern);
    return match ? match[1] : '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Ä—Ü–∏–∏
   */
  extractPortion(text) {
    const match = text.match(this.portionPattern);
    return match ? match[0] : '';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ä—Ü–∏–∏
   */
  generatePortion(name) {
    const nameLower = name.toLowerCase();
    
    if (nameLower.includes('—Å—É–ø') || nameLower.includes('–±–æ—Ä—â')) return '250–≥';
    if (nameLower.includes('–∫–∞—à–∞')) return '200–≥';
    if (nameLower.includes('–º—è—Å–æ') || nameLower.includes('—Ä—ã–±–∞')) return '80–≥';
    if (nameLower.includes('—Å–∞–ª–∞—Ç') || nameLower.includes('–æ–≤–æ—â–∏')) return '60–≥';
    if (nameLower.includes('—Ö–ª–µ–±')) return '20–≥';
    if (nameLower.includes('–º–æ–ª–æ–∫–æ') || nameLower.includes('—á–∞–π') || nameLower.includes('–∫–æ–º–ø–æ—Ç')) return '200–º–ª';
    if (nameLower.includes('–æ–ª–∞–¥—å–∏') || nameLower.includes('–±–ª–∏–Ω—á–∏–∫–∏')) return '2—à—Ç';
    
    return '150–≥';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
   */
  generateDescription(name, recipeNumber) {
    let description = `–í–∫—É—Å–Ω–æ–µ –±–ª—é–¥–æ: ${name}`;
    
    if (recipeNumber) {
      description += ` (—Ä–µ—Ü–µ–ø—Ç ‚Ññ${recipeNumber})`;
    }
    
    return description;
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
   */
  fixMealTypes(data, items) {
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å "–û –ë –ï –î" –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {
      const row = data[rowIndex];
      if (!row) continue;
      
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        const cell = row[colIndex];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.trim();
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ "–û –ë –ï –î", –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –±–ª—é–¥–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
        if (cellText === '–û  –ë  –ï  –î  ' || cellText.includes('–û  –ë  –ï  –î') || cellText.toLowerCase().includes('–æ–±–µ–¥')) {
          console.log(`üçΩÔ∏è –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –ø–æ—Å–ª–µ "–û –ë –ï –î" –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex}, –∫–æ–ª–æ–Ω–∫–µ ${colIndex}`);
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–µ
          const dayOfWeek = this.determineDayByPosition(colIndex, data);
          
          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –±–ª—é–¥–∞ —ç—Ç–æ–≥–æ –¥–Ω—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å "–û –ë –ï –î"
          items.forEach(item => {
            if (item.day_of_week === dayOfWeek && item.meal_type === '–ø–æ–ª–¥–Ω–∏–∫') {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —ç—Ç–æ –±–ª—é–¥–æ –ø–æ—Å–ª–µ "–û –ë –ï –î"
              const itemRow = this.findItemRow(data, item.name, colIndex);
              if (itemRow > rowIndex) {
                item.meal_type = '–æ–±–µ–¥';
                console.log(`  ‚úÖ ${item.name} ‚Üí –æ–±–µ–¥`);
              }
            }
          });
        }
      }
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –±–ª—é–¥–æ–º
   */
  findItemRow(data, itemName, colIndex) {
    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {
      const row = data[rowIndex];
      if (!row || !row[colIndex]) continue;
      
      const cell = row[colIndex];
      if (!cell || typeof cell !== 'string') continue;
      
      if (cell.includes(itemName)) {
        return rowIndex;
      }
    }
    return -1;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥
   */
  removeDuplicates(items) {
    const seen = new Set();
    const unique = [];
    
    items.forEach(item => {
      const key = `${item.name.toLowerCase()}-${item.day_of_week}-${item.meal_type}`;
      if (!seen.has(key)) {
        seen.add(key);
        unique.push(item);
      }
    });
    
    console.log(`üîÑ –£–¥–∞–ª–µ–Ω–æ ${items.length - unique.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
    return unique;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é
   */
  validateParsedMenu(items) {
    const errors = [];
    const warnings = [];
    
    if (!items || items.length === 0) {
      errors.push('–ú–µ–Ω—é –ø—É—Å—Ç–æ–µ - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞');
      return { isValid: false, errors, warnings };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–∑–≤–∞–Ω–∏–π –±–ª—é–¥
    items.forEach((item, index) => {
      if (!item.name || item.name.length < 3) {
        errors.push(`–ë–ª—é–¥–æ ${index + 1}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`);
      }
      
      if (item.name && item.name.length > 100) {
        warnings.push(`–ë–ª—é–¥–æ "${item.name}": —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª—é–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    const daysWithItems = new Set(items.map(item => item.day_of_week));
    const expectedDays = [1, 2, 3, 4, 5]; // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞
    
    expectedDays.forEach(day => {
      if (!daysWithItems.has(day)) {
        warnings.push(`–ù–µ—Ç –±–ª—é–¥ –¥–ª—è –¥–Ω—è ${day}`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª—é–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    const mealTypes = new Set(items.map(item => item.meal_type));
    const expectedMeals = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫'];
    
    expectedMeals.forEach(meal => {
      if (!mealTypes.has(meal)) {
        warnings.push(`–ù–µ—Ç –±–ª—é–¥ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏: ${meal}`);
      }
    });
    
    return {
      isValid: errors.length === 0,
      errors,
      warnings,
      stats: {
        totalItems: items.length,
        daysCovered: daysWithItems.size,
        mealTypesCovered: mealTypes.size
      }
    };
  }
}
