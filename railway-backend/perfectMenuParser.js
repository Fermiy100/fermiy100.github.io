/**
 * –ò–î–ï–ê–õ–¨–ù–´–ô –ü–ê–†–°–ï–† –ú–ï–ù–Æ - –ë–ï–ó –ë–ê–ì–û–í
 * –ü–µ—Ä–µ–ø–∏—Å–∞–Ω —Å –Ω—É–ª—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
 */

import XLSX from 'xlsx';

class PerfectMenuParser {
  constructor() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –º–µ–Ω—é');
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞
   */
  async parseExcelFile(fileBuffer) {
    try {
      console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞');
      
      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
      const workbook = XLSX.read(fileBuffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      
      if (!sheetName) {
        console.log('‚ùå –ù–µ—Ç –ª–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ');
        return [];
      }
      
      const worksheet = workbook.Sheets[sheetName];
      const data = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });
      
      console.log(`‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: ${data.length} —Å—Ç—Ä–æ–∫`);
      
      // –ü–∞—Ä—Å–∏–º –º–µ–Ω—é
      const menuItems = this.parseMenuData(data);
      
      console.log(`üéØ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ ${menuItems.length} –±–ª—é–¥`);
      return menuItems;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      return [];
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é
   */
  parseMenuData(data) {
    const menuItems = [];
    
    // –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
    const dayColumns = this.findDayColumns(data);
    console.log(`üìÖ –ù–∞–π–¥–µ–Ω–æ –¥–Ω–µ–π: ${dayColumns.length}`);
    
    if (dayColumns.length === 0) {
      console.log('‚ö†Ô∏è –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥');
      return this.parseAlternativeStructure(data);
    }
    
    // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    dayColumns.forEach(dayCol => {
      console.log(`üîç –ü–∞—Ä—Å–∏–º –¥–µ–Ω—å ${dayCol.day} –≤ –∫–æ–ª–æ–Ω–∫–µ ${dayCol.column}`);
      
      const dayItems = this.parseDayColumn(data, dayCol.column, dayCol.day);
      menuItems.push(...dayItems);
      
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${dayItems.length} –±–ª—é–¥ –¥–ª—è –¥–Ω—è ${dayCol.day}`);
    });
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueItems = this.removeDuplicates(menuItems);
    console.log(`üéØ –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª—é–¥: ${uniqueItems.length}`);
    
    return uniqueItems;
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
   */
  findDayColumns(data) {
    const dayColumns = [];
    const dayPatterns = [
      ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–ø–Ω', 'monday', 'mon'],
      ['–≤—Ç–æ—Ä–Ω–∏–∫', '–≤—Ç', 'tuesday', 'tue'],
      ['—Å—Ä–µ–¥–∞', '—Å—Ä', 'wednesday', 'wed'],
      ['—á–µ—Ç–≤–µ—Ä–≥', '—á—Ç', 'thursday', 'thu'],
      ['–ø—è—Ç–Ω–∏—Ü–∞', '–ø—Ç', 'friday', 'fri'],
      ['—Å—É–±–±–æ—Ç–∞', '—Å–±', 'saturday', 'sat'],
      ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–≤—Å', 'sunday', 'sun']
    ];
    
    // –ò—â–µ–º –≤ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö
    for (let row = 0; row < Math.min(10, data.length); row++) {
      const rowData = data[row];
      if (!rowData) continue;
      
      for (let col = 0; col < rowData.length; col++) {
        const cell = rowData[col];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.toString().trim().toLowerCase();
        if (cellText.length < 2) continue;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        dayPatterns.forEach((patterns, dayIndex) => {
          if (patterns.some(pattern => cellText.includes(pattern))) {
            dayColumns.push({
              day: dayIndex + 1,
              column: col,
              text: cell.toString().trim()
            });
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –¥–µ–Ω—å ${dayIndex + 1} –≤ –∫–æ–ª–æ–Ω–∫–µ ${col}: "${cell.toString().trim()}"`);
          }
        });
      }
    }
    
    return dayColumns;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ –¥–Ω—è
   */
  parseDayColumn(data, colIndex, dayOfWeek) {
    const items = [];
    let currentMealType = null;
    let mealStartRow = -1;
    
    console.log(`üîç –ü–∞—Ä—Å–∏–º –∫–æ–ª–æ–Ω–∫—É ${colIndex} –¥–ª—è –¥–Ω—è ${dayOfWeek}`);
    
    for (let row = 0; row < data.length; row++) {
      const rowData = data[row];
      if (!rowData || !rowData[colIndex]) continue;
      
      const cell = rowData[colIndex];
      if (!cell || typeof cell !== 'string') continue;
      
      const cellText = cell.toString().trim();
      if (cellText.length < 2) continue;
      
      const lowerText = cellText.toLowerCase();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
      const mealType = this.detectMealType(lowerText);
      
      if (mealType) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏
        if (currentMealType && mealStartRow >= 0) {
          const mealItems = this.extractMealItems(data, colIndex, mealStartRow, row - 1, dayOfWeek, currentMealType);
          items.push(...mealItems);
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${mealItems.length} –±–ª—é–¥ –¥–ª—è ${currentMealType}`);
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏
        currentMealType = mealType;
        mealStartRow = row + 1;
        console.log(`üçΩÔ∏è –ù–∞–π–¥–µ–Ω ${mealType} –≤ —Å—Ç—Ä–æ–∫–µ ${row}: "${cellText}"`);
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏
    if (currentMealType && mealStartRow >= 0) {
      const mealItems = this.extractMealItems(data, colIndex, mealStartRow, data.length - 1, dayOfWeek, currentMealType);
      items.push(...mealItems);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${mealItems.length} –±–ª—é–¥ –¥–ª—è ${currentMealType}`);
    }
    
    // –ï—Å–ª–∏ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–∞—Ä—Å–∏–º –≤—Å–µ –∫–∞–∫ –æ–±–µ–¥
    if (items.length === 0) {
      console.log(`‚ö†Ô∏è –ü—Ä–∏–µ–º—ã –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–Ω—è ${dayOfWeek}, –ø–∞—Ä—Å–∏–º –≤—Å–µ –∫–∞–∫ –æ–±–µ–¥`);
      const allItems = this.extractMealItems(data, colIndex, 0, data.length - 1, dayOfWeek, '–æ–±–µ–¥');
      items.push(...allItems);
    }
    
    return items;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
   */
  detectMealType(text) {
    const mealTypes = {
      '–∑–∞–≤—Ç—Ä–∞–∫': ['–∑–∞–≤—Ç—Ä–∞–∫', '–∑ –∞ –≤ —Ç —Ä –∞ –∫', '—É—Ç—Ä–æ–º', '—É—Ç—Ä–µ–Ω–Ω–∏–π', '—É—Ç—Ä–æ', 'breakfast'],
      '–æ–±–µ–¥': ['–æ–±–µ–¥', '–æ –± –µ –¥', '–¥–Ω–µ–≤–Ω–æ–π', '–æ—Å–Ω–æ–≤–Ω–æ–π', '–¥–µ–Ω—å', 'lunch'],
      '–ø–æ–ª–¥–Ω–∏–∫': ['–ø–æ–ª–¥–Ω–∏–∫', '–ø –æ –ª –¥ –Ω –∏ –∫', '–ø–µ—Ä–µ–∫—É—Å', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π', '–¥–æ–ø', 'snack'],
      '—É–∂–∏–Ω': ['—É–∂–∏–Ω', '—É –∂ –∏ –Ω', '–≤–µ—á–µ—Ä–Ω–∏–π', '–≤–µ—á–µ—Ä–æ–º', '–≤–µ—á–µ—Ä', 'dinner']
    };
    
    for (const [mealType, keywords] of Object.entries(mealTypes)) {
      if (keywords.some(keyword => text.includes(keyword))) {
        return mealType;
      }
    }
    
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª—é–¥ –∏–∑ —Å–µ–∫—Ü–∏–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
   */
  extractMealItems(data, colIndex, startRow, endRow, dayOfWeek, mealType) {
    const items = [];
    
    console.log(`üçΩÔ∏è –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è ${mealType} (—Å—Ç—Ä–æ–∫–∏ ${startRow}-${endRow})`);
    
    for (let row = startRow; row <= endRow; row++) {
      const rowData = data[row];
      if (!rowData || !rowData[colIndex]) continue;
      
      const cell = rowData[colIndex];
      if (!cell || typeof cell !== 'string') continue;
      
      const cellText = cell.toString().trim();
      if (cellText.length < 3) continue;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥—Ä—É–≥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
      if (this.detectMealType(cellText.toLowerCase())) {
        break;
      }
      
      // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ
      const dish = this.createDish(cellText, dayOfWeek, mealType);
      if (dish) {
        if (Array.isArray(dish)) {
          items.push(...dish);
        } else {
          items.push(dish);
        }
      }
    }
    
    return items;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–ª—é–¥–∞
   */
  createDish(text, dayOfWeek, mealType) {
    // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    const cleanName = this.cleanDishName(text);
    if (!cleanName || cleanName.length < 3) return null;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const weight = this.extractWeight(text);
    const recipeNumber = this.extractRecipeNumber(text);
    const portion = this.generatePortion(weight);
    const description = this.generateDescription(cleanName, weight);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—É—Å—ã
    if (cleanName.toLowerCase().includes('—Å–æ—É—Å—ã:')) {
      return this.createSauceDishes(cleanName, dayOfWeek, mealType);
    }
    
    const dish = {
      name: cleanName,
      description: description,
      price: 0, // –¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ —Ñ–∞–π–ª–µ
      portion: portion,
      day_of_week: dayOfWeek,
      meal_type: mealType,
      school_id: 1, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      week_start: new Date().toISOString().split('T')[0],
      recipe_number: recipeNumber,
      weight: weight
    };
    
    console.log(`üçΩÔ∏è –°–æ–∑–¥–∞–Ω–æ –±–ª—é–¥–æ: "${cleanName}" (${mealType})`);
    return dish;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
   */
  cleanDishName(text) {
    let clean = text.trim();
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    clean = clean.replace(/[^\w\s\-\.\(\)\/]/g, '');
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    clean = clean.replace(/\s+/g, ' ').trim();
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const excludeWords = [
      '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π', '–ø–æ—Ä—Ü–∏–π', '–≥—Ä–∞–º–º', '–≥', '–∫–≥', '–ª–∏—Ç—Ä', '–ª',
      '–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫', '—É–∂–∏–Ω', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ',
      '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    ];
    
    const lowerClean = clean.toLowerCase();
    if (excludeWords.some(word => lowerClean.includes(word))) {
      return null;
    }
    
    return clean;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Å–∞
   */
  extractWeight(text) {
    const weightMatch = text.match(/(\d+)\s*–≥/);
    return weightMatch ? weightMatch[1] + ' –≥' : null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞
   */
  extractRecipeNumber(text) {
    const recipeMatch = text.match(/‚Ññ?\s*(\d+)/);
    return recipeMatch ? recipeMatch[1] : null;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ä—Ü–∏–∏
   */
  generatePortion(weight) {
    if (!weight) return '1 –ø–æ—Ä—Ü–∏—è';
    return weight;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
   */
  generateDescription(name, weight) {
    let description = name;
    if (weight) {
      description += ` (${weight})`;
    }
    return description;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥ –∏–∑ —Å–æ—É—Å–æ–≤
   */
  createSauceDishes(text, dayOfWeek, mealType) {
    const sauces = text.split(':')[1]?.split(';') || [];
    const dishes = [];
    
    sauces.forEach(sauce => {
      const cleanSauce = sauce.trim();
      if (cleanSauce && cleanSauce.length > 2) {
        const dish = this.createDish(cleanSauce, dayOfWeek, mealType);
        if (dish) {
          dishes.push(dish);
        }
      }
    });
    
    return dishes;
  }

  /**
   * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
   */
  parseAlternativeStructure(data) {
    console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥');
    const items = [];
    
    // –ò—â–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ —Å –±–ª—é–¥–∞–º–∏
    for (let row = 0; row < data.length; row++) {
      const rowData = data[row];
      if (!rowData) continue;
      
      for (let col = 0; col < rowData.length; col++) {
        const cell = rowData[col];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.toString().trim();
        if (cellText.length < 3) continue;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if (this.detectMealType(cellText.toLowerCase()) || this.isDayHeader(cellText.toLowerCase())) {
          continue;
        }
        
        // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ
        const dish = this.createDish(cellText, 1, '–æ–±–µ–¥'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –æ–±–µ–¥
        if (dish) {
          if (Array.isArray(dish)) {
            items.push(...dish);
          } else {
            items.push(dish);
          }
        }
      }
    }
    
    return items;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥–Ω—è
   */
  isDayHeader(text) {
    const dayKeywords = [
      '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
      '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å',
      'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'
    ];
    
    return dayKeywords.some(keyword => text.includes(keyword));
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
   */
  removeDuplicates(items) {
    const seen = new Set();
    const unique = [];
    
    items.forEach(item => {
      const key = `${item.name}-${item.day_of_week}-${item.meal_type}`;
      if (!seen.has(key)) {
        seen.add(key);
        unique.push(item);
      }
    });
    
    return unique;
  }
}

export default PerfectMenuParser;
