/**
 * –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ü–ê–†–°–ï–† –î–õ–Ø –®–ö–û–õ–¨–ù–û–ì–û –ú–ï–ù–Æ
 * –°–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: "2-–Ø –ù–ï–î–ï–õ–Ø –î–õ–Ø –ó–ê–ö–ê–ó–ê"
 */

import XLSX from 'xlsx';

export class SchoolMenuParser {
  constructor() {
    this.daysOfWeek = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];
    this.mealTypes = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫', '—É–∂–∏–Ω', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'];
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
    this.structure = {
      headerRow: 1,        // –°—Ç—Ä–æ–∫–∞ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ (0-based)
      breakfastStart: 2,   // –ù–∞—á–∞–ª–æ –∑–∞–≤—Ç—Ä–∞–∫–∞
      breakfastEnd: 15,    // –ö–æ–Ω–µ—Ü –∑–∞–≤—Ç—Ä–∞–∫–∞
      lunchStart: 18,      // –ù–∞—á–∞–ª–æ –æ–±–µ–¥–∞
      lunchEnd: 39,        // –ö–æ–Ω–µ—Ü –æ–±–µ–¥–∞
      dayColumns: [0, 2, 4, 6, 8] // –ö–æ–ª–æ–Ω–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (A, C, E, G, I)
    };
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    this.weightPattern = /(\d+)\s*–≥/gi;
    this.recipePattern = /‚Ññ\s*(\d+\/\d+)/gi;
    this.portionPattern = /(\d+)\s*(—à—Ç|–ø–æ—Ä—Ü|–ø–æ—Ä—Ü–∏–∏?)/gi;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞
   */
  parseExcelFile(buffer) {
    try {
      const workbook = XLSX.read(buffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { 
        header: 1, 
        raw: false, 
        defval: '',
        blankrows: false
      });

      return this.parseMenuData(jsonData);
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: ${error.message}`);
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é
   */
  parseMenuData(data) {
    const menuItems = [];
    const errors = [];
    const warnings = [];
    
    console.log('üçΩÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é...');
    
    // –ü–∞—Ä—Å–∏–º –∑–∞–≤—Ç—Ä–∞–∫
    const breakfastItems = this.parseMealSection(data, '–∑–∞–≤—Ç—Ä–∞–∫', this.structure.breakfastStart, this.structure.breakfastEnd);
    menuItems.push(...breakfastItems);
    
    // –ü–∞—Ä—Å–∏–º –æ–±–µ–¥
    const lunchItems = this.parseMealSection(data, '–æ–±–µ–¥', this.structure.lunchStart, this.structure.lunchEnd);
    menuItems.push(...lunchItems);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–ª—é–¥: ${menuItems.length}`);
    
    return {
      items: menuItems,
      totalItems: menuItems.length,
      message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${menuItems.length} –±–ª—é–¥ –∏–∑ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é`,
      errors: errors,
      warnings: warnings
    };
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å–µ–∫—Ü–∏–∏ –ø–∏—Ç–∞–Ω–∏—è (–∑–∞–≤—Ç—Ä–∞–∫/–æ–±–µ–¥)
   */
  parseMealSection(data, mealType, startRow, endRow) {
    const items = [];
    
    console.log(`üìã –ü–∞—Ä—Å–∏–Ω–≥ ${mealType} (—Å—Ç—Ä–æ–∫–∏ ${startRow + 1}-${endRow + 1})`);
    
    for (let rowIndex = startRow; rowIndex <= endRow && rowIndex < data.length; rowIndex++) {
      const row = data[rowIndex];
      
      if (!row || row.length === 0) continue;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      if (this.isHeaderRow(row, rowIndex)) continue;
      
      // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏
      this.structure.dayColumns.forEach((colIndex, dayIndex) => {
        const cell = row[colIndex];
        
        if (!cell || typeof cell !== 'string') return;
        
        const cellText = cell.trim();
        if (!cellText || cellText.length < 3) return;
        
        // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ
        const dish = this.createDishFromCell(cellText, rowIndex, colIndex, dayIndex + 1, mealType);
        if (dish) {
          items.push(dish);
          console.log(`   ‚úÖ ${dish.name} (${dish.meal_type}, –¥–µ–Ω—å ${dish.day_of_week})`);
        }
      });
    }
    
    return items;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–∑ —è—á–µ–π–∫–∏
   */
  createDishFromCell(text, rowIndex, colIndex, dayOfWeek, mealType) {
    // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    const cleanName = this.cleanDishName(text);
    if (!cleanName || cleanName.length < 3) return null;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å
    const weight = this.extractWeight(text);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞
    const recipeNumber = this.extractRecipeNumber(text);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ä—Ü–∏—é
    const portion = this.extractPortion(text);
    
    // –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã - –∏—Ö –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
    const price = 0;
    
    return {
      name: cleanName,
      description: this.generateDescription(cleanName, recipeNumber),
      price: price,
      portion: portion || weight || this.generatePortion(cleanName),
      day_of_week: dayOfWeek,
      meal_type: mealType,
      school_id: 1,
      week_start: new Date().toISOString().split('T')[0],
      recipe_number: recipeNumber,
      weight: weight
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
   */
  cleanDishName(text) {
    let clean = text.trim();
    
    // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    clean = clean.replace(/‚Ññ\s*\d+\/\d+/g, '');
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    clean = clean.replace(/\s+/g, ' ').trim();
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    clean = clean.replace(/^[^\w–∞-—è—ë]+|[^\w–∞-—è—ë]+$/gi, '');
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –±–ª—é–¥–∞–º–∏
    const excludeWords = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫', '—É–∂–∏–Ω', '–∑–∞–≤—Ç—Ä–∞–∫:', '–æ–±–µ–¥:', '–ø–æ–ª–¥–Ω–∏–∫:', '—É–∂–∏–Ω:'];
    if (excludeWords.some(word => clean.toLowerCase() === word.toLowerCase())) {
      return null;
    }
    
    return clean;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Å–∞
   */
  extractWeight(text) {
    const match = text.match(this.weightPattern);
    return match ? match[0] : '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞
   */
  extractRecipeNumber(text) {
    const match = text.match(this.recipePattern);
    return match ? match[1] : '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Ä—Ü–∏–∏
   */
  extractPortion(text) {
    const match = text.match(this.portionPattern);
    return match ? match[0] : '';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ç–∏–ø–∞
   */
  generatePrice(name, mealType) {
    const nameLower = name.toLowerCase();
    
    // –¶–µ–Ω—ã –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞
    if (mealType === '–∑–∞–≤—Ç—Ä–∞–∫') {
      if (nameLower.includes('–∫–∞—à–∞')) return 80;
      if (nameLower.includes('–æ–ª–∞–¥—å–∏') || nameLower.includes('–±–ª–∏–Ω—á–∏–∫–∏')) return 60;
      if (nameLower.includes('–æ–º–ª–µ—Ç')) return 90;
      if (nameLower.includes('—Å—ã—Ä–Ω–∏–∫–∏')) return 85;
      if (nameLower.includes('–ø—É–¥–∏–Ω–≥')) return 70;
      if (nameLower.includes('–º–æ–ª–æ–∫–æ') || nameLower.includes('—á–∞–π') || nameLower.includes('–∫–∞–∫–∞–æ')) return 25;
      if (nameLower.includes('—Ö–ª–µ–±') || nameLower.includes('—Å—ã—Ä') || nameLower.includes('–º–∞—Å–ª–æ')) return 15;
      if (nameLower.includes('–∫–æ–ª–±–∞—Å–∞') || nameLower.includes('–≤–µ—Ç—á–∏–Ω–∞')) return 40;
      return 50; // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫–∞
    }
    
    // –¶–µ–Ω—ã –¥–ª—è –æ–±–µ–¥–∞
    if (mealType === '–æ–±–µ–¥') {
      if (nameLower.includes('—Å—É–ø') || nameLower.includes('–±–æ—Ä—â')) return 120;
      if (nameLower.includes('–º—è—Å–æ') || nameLower.includes('–∫–æ—Ç–ª–µ—Ç–∞')) return 150;
      if (nameLower.includes('—Ä—ã–±–∞')) return 140;
      if (nameLower.includes('—Å–∞–ª–∞—Ç')) return 60;
      if (nameLower.includes('–æ–≤–æ—â–∏')) return 45;
      if (nameLower.includes('–∫–∞—à–∞') || nameLower.includes('–≥–∞—Ä–Ω–∏—Ä')) return 80;
      if (nameLower.includes('–∫–æ–º–ø–æ—Ç') || nameLower.includes('–Ω–∞–ø–∏—Ç–æ–∫')) return 40;
      return 100; // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ–±–µ–¥–∞
    }
    
    return 80; // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ä—Ü–∏–∏
   */
  generatePortion(name) {
    const nameLower = name.toLowerCase();
    
    if (nameLower.includes('—Å—É–ø') || nameLower.includes('–±–æ—Ä—â')) return '250–≥';
    if (nameLower.includes('–∫–∞—à–∞')) return '200–≥';
    if (nameLower.includes('–º—è—Å–æ') || nameLower.includes('—Ä—ã–±–∞')) return '80–≥';
    if (nameLower.includes('—Å–∞–ª–∞—Ç') || nameLower.includes('–æ–≤–æ—â–∏')) return '60–≥';
    if (nameLower.includes('—Ö–ª–µ–±')) return '20–≥';
    if (nameLower.includes('–º–æ–ª–æ–∫–æ') || nameLower.includes('—á–∞–π') || nameLower.includes('–∫–æ–º–ø–æ—Ç')) return '200–º–ª';
    if (nameLower.includes('–æ–ª–∞–¥—å–∏') || nameLower.includes('–±–ª–∏–Ω—á–∏–∫–∏')) return '2—à—Ç';
    
    return '150–≥'; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ—Ä—Ü–∏—è
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
   */
  generateDescription(name, recipeNumber) {
    let description = `–í–∫—É—Å–Ω–æ–µ –±–ª—é–¥–æ: ${name}`;
    if (recipeNumber) {
      description += ` (—Ä–µ—Ü–µ–ø—Ç ‚Ññ${recipeNumber})`;
    }
    return description;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
   */
  isHeaderRow(row, rowIndex) {
    if (!row || row.length === 0) return true;
    
    const rowText = row.join(' ').toLowerCase();
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∏–ø–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
    if (rowText.includes('–∑–∞–≤—Ç—Ä–∞–∫') || rowText.includes('–æ–±–µ–¥') || 
        rowText.includes('–ø–æ–ª–¥–Ω–∏–∫') || rowText.includes('—É–∂–∏–Ω')) {
      return true;
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
    if (rowText.includes('–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π') || rowText.includes('–≥–∞—Ä–Ω–∏—Ä')) {
      return true;
    }
    
    // –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (row.every(cell => !cell || cell.toString().trim() === '')) {
      return true;
    }
    
    return false;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é
   */
  validateParsedMenu(data) {
    const errors = [];
    const warnings = [];
    
    if (!data || !data.items || !Array.isArray(data.items)) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö');
      return { isValid: false, errors, warnings };
    }
    
    if (data.items.length === 0) {
      warnings.push('–ú–µ–Ω—é –ø—É—Å—Ç–æ–µ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –±–ª—é–¥–æ
    data.items.forEach((item, index) => {
      if (!item.name || item.name.trim().length < 2) {
        errors.push(`–ë–ª—é–¥–æ ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
      }
      
      if (!item.price || item.price <= 0) {
        warnings.push(`–ë–ª—é–¥–æ "${item.name}": —Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ —Ä–∞–≤–Ω–∞ 0`);
      }
      
      if (!item.portion || item.portion.trim().length === 0) {
        warnings.push(`–ë–ª—é–¥–æ "${item.name}": –ø–æ—Ä—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞`);
      }
      
      if (!item.day_of_week || item.day_of_week < 1 || item.day_of_week > 5) {
        warnings.push(`–ë–ª—é–¥–æ "${item.name}": –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏`);
      }
    });
    
    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }
}

export default SchoolMenuParser;
