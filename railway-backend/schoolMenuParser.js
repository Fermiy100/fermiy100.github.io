/**
 * –®–ö–û–õ–¨–ù–´–ô –ü–ê–†–°–ï–† –ú–ï–ù–Æ
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ –∏ —Ç–∏–ø–∞–º–∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
 */

import XLSX from 'xlsx';

export class SchoolMenuParser {
  constructor() {
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    this.weightPattern = /\d+\s*–≥/gi;
    this.recipePattern = /‚Ññ\s*(\d+\/\d+)/gi;
    this.portionPattern = /\d+\s*—à—Ç/gi;
    
    // –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    this.breakfastKeywords = ['–∑–∞–≤—Ç—Ä–∞–∫', '—É—Ç—Ä–æ–º', '—É—Ç—Ä–µ–Ω–Ω–∏–π'];
    this.lunchKeywords = ['–æ–±–µ–¥', '–¥–Ω–µ–≤–Ω–æ–π', '–æ—Å–Ω–æ–≤–Ω–æ–π'];
    this.snackKeywords = ['–ø–æ–ª–¥–Ω–∏–∫', '–ø–µ—Ä–µ–∫—É—Å', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π'];
    this.dinnerKeywords = ['—É–∂–∏–Ω', '–≤–µ—á–µ—Ä–Ω–∏–π', '–≤–µ—á–µ—Ä–æ–º'];
    
    // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    this.daysOfWeek = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞
   */
  parseExcelFile(buffer) {
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞...');
      
      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
      const workbook = XLSX.read(buffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω –ª–∏—Å—Ç: ${sheetName}`);
      console.log(`üìè –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${jsonData.length} —Å—Ç—Ä–æ–∫`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const structure = this.analyzeStructure(jsonData);
      console.log('üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:', structure);
      
      // –ü–∞—Ä—Å–∏–º –±–ª—é–¥–∞
      const items = this.parseMenuItems(jsonData, structure);
      
      console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${items.length} –±–ª—é–¥`);
      return items;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞: ${error.message}`);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
   */
  analyzeStructure(data) {
    const structure = {
      dayColumns: [],
      mealRows: [],
      dataStartRow: 0,
      dataStartCol: 0
    };
    
    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    for (let rowIndex = 0; rowIndex < Math.min(10, data.length); rowIndex++) {
      const row = data[rowIndex];
      if (!row) continue;
      
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        const cell = row[colIndex];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.toLowerCase().trim();
        
        // –ò—â–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        this.daysOfWeek.forEach((day, dayIndex) => {
          if (cellText.includes(day)) {
            structure.dayColumns.push({
              day: dayIndex + 1,
              column: colIndex,
              name: day
            });
          }
        });
      }
    }
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–∏–ø–∞–º–∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {
      const row = data[rowIndex];
      if (!row) continue;
      
      for (let colIndex = 0; colIndex < row.length; colIndex++) {
        const cell = row[colIndex];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.toLowerCase().trim();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        let mealType = null;
        if (this.breakfastKeywords.some(keyword => cellText.includes(keyword))) {
          mealType = '–∑–∞–≤—Ç—Ä–∞–∫';
        } else if (this.lunchKeywords.some(keyword => cellText.includes(keyword))) {
          mealType = '–æ–±–µ–¥';
        } else if (this.snackKeywords.some(keyword => cellText.includes(keyword))) {
          mealType = '–ø–æ–ª–¥–Ω–∏–∫';
        } else if (this.dinnerKeywords.some(keyword => cellText.includes(keyword))) {
          mealType = '–æ–±–µ–¥'; // –£–∂–∏–Ω –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –æ–±–µ–¥—É
        }
        
        if (mealType) {
          structure.mealRows.push({
            meal: mealType,
            row: rowIndex,
            name: cellText
          });
        }
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
    if (structure.dayColumns.length > 0 && structure.mealRows.length > 0) {
      structure.dataStartRow = Math.min(...structure.mealRows.map(m => m.row)) + 1;
      structure.dataStartCol = Math.min(...structure.dayColumns.map(d => d.column));
    }
    
    return structure;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –±–ª—é–¥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
   */
  parseMenuItems(data, structure) {
    const items = [];
    
    if (!structure.dayColumns.length || !structure.mealRows.length) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã');
      return items;
    }
    
    console.log('üçΩÔ∏è –ü–∞—Ä—Å–∏–º –±–ª—é–¥–∞...');
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –¥–Ω—é
    structure.dayColumns.forEach(dayCol => {
      console.log(`üìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${dayCol.name} (–∫–æ–ª–æ–Ω–∫–∞ ${dayCol.column})`);
      
      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
      structure.mealRows.forEach(mealRow => {
        console.log(`  üç¥ ${mealRow.meal} (—Å—Ç—Ä–æ–∫–∞ ${mealRow.row})`);
        
        // –ò—â–µ–º –±–ª—é–¥–∞ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
        const mealItems = this.findDishesInArea(
          data, 
          dayCol.column, 
          mealRow.row + 1, 
          dayCol.day, 
          mealRow.meal
        );
        
        items.push(...mealItems);
        console.log(`    ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${mealItems.length} –±–ª—é–¥`);
      });
    });
    
    return items;
  }

  /**
   * –ü–æ–∏—Å–∫ –±–ª—é–¥ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
   */
  findDishesInArea(data, colIndex, startRow, dayOfWeek, mealType) {
    const items = [];
    
    // –ò—â–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    for (let rowIndex = startRow; rowIndex < Math.min(startRow + 10, data.length); rowIndex++) {
      const row = data[rowIndex];
      if (!row || !row[colIndex]) continue;
      
      const cell = row[colIndex];
      if (!cell || typeof cell !== 'string') continue;
      
      const cellText = cell.trim();
      if (!cellText || cellText.length < 3) continue;
      
      // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ
      const dish = this.createDishFromCell(cellText, rowIndex, colIndex, dayOfWeek, mealType);
      if (dish) {
        items.push(dish);
        console.log(`   ‚úÖ ${dish.name} (${dish.meal_type}, –¥–µ–Ω—å ${dish.day_of_week})`);
      }
    }
    
    return items;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–∑ —è—á–µ–π–∫–∏
   */
  createDishFromCell(text, rowIndex, colIndex, dayOfWeek, mealType) {
    // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    const cleanName = this.cleanDishName(text);
    if (!cleanName || cleanName.length < 3) return null;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å
    const weight = this.extractWeight(text);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞
    const recipeNumber = this.extractRecipeNumber(text);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ä—Ü–∏—é
    const portion = this.extractPortion(text);
    
    // –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã - –∏—Ö –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
    const price = 0;
    
    return {
      name: cleanName,
      description: this.generateDescription(cleanName, recipeNumber),
      price: price,
      portion: portion || weight || this.generatePortion(cleanName),
      day_of_week: dayOfWeek,
      meal_type: mealType,
      school_id: 1,
      week_start: new Date().toISOString().split('T')[0],
      recipe_number: recipeNumber,
      weight: weight
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
   */
  cleanDishName(text) {
    let clean = text.trim();
    
    // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    clean = clean.replace(/‚Ññ\s*\d+\/\d+/g, '');
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    clean = clean.replace(/\s+/g, ' ').trim();
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    clean = clean.replace(/^[^\w–∞-—è—ë]+|[^\w–∞-—è—ë]+$/gi, '');
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –±–ª—é–¥–∞–º–∏
    const excludeWords = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫', '—É–∂–∏–Ω', '–∑–∞–≤—Ç—Ä–∞–∫:', '–æ–±–µ–¥:', '–ø–æ–ª–¥–Ω–∏–∫:', '—É–∂–∏–Ω:'];
    if (excludeWords.some(word => clean.toLowerCase() === word.toLowerCase())) {
      return null;
    }
    
    return clean;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Å–∞
   */
  extractWeight(text) {
    const match = text.match(this.weightPattern);
    return match ? match[0] : '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞
   */
  extractRecipeNumber(text) {
    const match = text.match(this.recipePattern);
    return match ? match[1] : '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Ä—Ü–∏–∏
   */
  extractPortion(text) {
    const match = text.match(this.portionPattern);
    return match ? match[0] : '';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ç–∏–ø–∞
   */
  generatePrice(name, mealType) {
    const nameLower = name.toLowerCase();
    
    // –¶–µ–Ω—ã –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞
    if (mealType === '–∑–∞–≤—Ç—Ä–∞–∫') {
      if (nameLower.includes('–∫–∞—à–∞')) return 80;
      if (nameLower.includes('–æ–ª–∞–¥—å–∏') || nameLower.includes('–±–ª–∏–Ω—á–∏–∫–∏')) return 60;
      if (nameLower.includes('–æ–º–ª–µ—Ç')) return 90;
      if (nameLower.includes('—Å—ã—Ä–Ω–∏–∫–∏')) return 85;
      if (nameLower.includes('–ø—É–¥–∏–Ω–≥')) return 70;
      if (nameLower.includes('–º–æ–ª–æ–∫–æ') || nameLower.includes('—á–∞–π') || nameLower.includes('–∫–∞–∫–∞–æ')) return 25;
      if (nameLower.includes('—Ö–ª–µ–±') || nameLower.includes('—Å—ã—Ä') || nameLower.includes('–º–∞—Å–ª–æ')) return 15;
      if (nameLower.includes('–∫–æ–ª–±–∞—Å–∞') || nameLower.includes('–≤–µ—Ç—á–∏–Ω–∞')) return 40;
      return 50; // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫–∞
    }
    
    // –¶–µ–Ω—ã –¥–ª—è –æ–±–µ–¥–∞
    if (mealType === '–æ–±–µ–¥') {
      if (nameLower.includes('—Å—É–ø') || nameLower.includes('–±–æ—Ä—â')) return 120;
      if (nameLower.includes('–º—è—Å–æ') || nameLower.includes('–∫–æ—Ç–ª–µ—Ç–∞')) return 150;
      if (nameLower.includes('—Ä—ã–±–∞')) return 140;
      if (nameLower.includes('—Å–∞–ª–∞—Ç')) return 60;
      if (nameLower.includes('–æ–≤–æ—â–∏')) return 45;
      if (nameLower.includes('–∫–∞—à–∞') || nameLower.includes('–≥–∞—Ä–Ω–∏—Ä')) return 80;
      if (nameLower.includes('–∫–æ–º–ø–æ—Ç') || nameLower.includes('–Ω–∞–ø–∏—Ç–æ–∫')) return 40;
      return 100; // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ–±–µ–¥–∞
    }
    
    return 80; // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ä—Ü–∏–∏
   */
  generatePortion(name) {
    const nameLower = name.toLowerCase();
    
    if (nameLower.includes('—Å—É–ø') || nameLower.includes('–±–æ—Ä—â')) return '250–≥';
    if (nameLower.includes('–∫–∞—à–∞')) return '200–≥';
    if (nameLower.includes('–º—è—Å–æ') || nameLower.includes('—Ä—ã–±–∞')) return '80–≥';
    if (nameLower.includes('—Å–∞–ª–∞—Ç') || nameLower.includes('–æ–≤–æ—â–∏')) return '60–≥';
    if (nameLower.includes('—Ö–ª–µ–±')) return '20–≥';
    if (nameLower.includes('–º–æ–ª–æ–∫–æ') || nameLower.includes('—á–∞–π') || nameLower.includes('–∫–æ–º–ø–æ—Ç')) return '200–º–ª';
    if (nameLower.includes('–æ–ª–∞–¥—å–∏') || nameLower.includes('–±–ª–∏–Ω—á–∏–∫–∏')) return '2—à—Ç';
    
    return '150–≥'; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ—Ä—Ü–∏—è
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
   */
  generateDescription(name, recipeNumber) {
    let description = `–í–∫—É—Å–Ω–æ–µ –±–ª—é–¥–æ: ${name}`;
    
    if (recipeNumber) {
      description += ` (—Ä–µ—Ü–µ–ø—Ç ‚Ññ${recipeNumber})`;
    }
    
    return description;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é
   */
  validateParsedMenu(items) {
    const errors = [];
    const warnings = [];
    
    if (!items || items.length === 0) {
      errors.push('–ú–µ–Ω—é –ø—É—Å—Ç–æ–µ - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞');
      return { isValid: false, errors, warnings };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª—é–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    const daysWithItems = new Set(items.map(item => item.day_of_week));
    const expectedDays = [1, 2, 3, 4, 5]; // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞
    
    expectedDays.forEach(day => {
      if (!daysWithItems.has(day)) {
        warnings.push(`–ù–µ—Ç –±–ª—é–¥ –¥–ª—è –¥–Ω—è ${day}`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª—é–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    const mealTypes = new Set(items.map(item => item.meal_type));
    const expectedMeals = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫'];
    
    expectedMeals.forEach(meal => {
      if (!mealTypes.has(meal)) {
        warnings.push(`–ù–µ—Ç –±–ª—é–¥ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏: ${meal}`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–∑–≤–∞–Ω–∏–π –±–ª—é–¥
    items.forEach((item, index) => {
      if (!item.name || item.name.length < 3) {
        errors.push(`–ë–ª—é–¥–æ ${index + 1}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`);
      }
      
      if (item.name && item.name.length > 100) {
        warnings.push(`–ë–ª—é–¥–æ "${item.name}": —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`);
      }
    });
    
    return {
      isValid: errors.length === 0,
      errors,
      warnings,
      stats: {
        totalItems: items.length,
        daysCovered: daysWithItems.size,
        mealTypesCovered: mealTypes.size
      }
    };
  }
}