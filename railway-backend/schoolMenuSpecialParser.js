import XLSX from 'xlsx';

export class SchoolMenuSpecialParser {
  constructor() {
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    this.schoolMenuPatterns = {
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
      dayHeaders: [
        /–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫/i, /–ø–Ω\.?/i, /monday/i,
        /–≤—Ç–æ—Ä–Ω–∏–∫/i, /–≤—Ç\.?/i, /tuesday/i,
        /—Å—Ä–µ–¥–∞/i, /—Å—Ä\.?/i, /wednesday/i,
        /—á–µ—Ç–≤–µ—Ä–≥/i, /—á—Ç\.?/i, /thursday/i,
        /–ø—è—Ç–Ω–∏—Ü–∞/i, /–ø—Ç\.?/i, /friday/i
      ],
      
      // –¢–∏–ø—ã –ø–∏—Ç–∞–Ω–∏—è
      mealTypes: {
        '–∑–∞–≤—Ç—Ä–∞–∫': [/–∑–∞–≤—Ç—Ä–∞–∫/i, /—É—Ç—Ä–æ/i, /breakfast/i, /1.*–ø—Ä–∏–µ–º/i],
        '–æ–±–µ–¥': [/–æ–±–µ–¥/i, /lunch/i, /2.*–ø—Ä–∏–µ–º/i, /–ø–µ—Ä–≤–æ–µ/i, /–≤—Ç–æ—Ä–æ–µ/i],
        '–ø–æ–ª–¥–Ω–∏–∫': [/–ø–æ–ª–¥–Ω–∏–∫/i, /snack/i, /3.*–ø—Ä–∏–µ–º/i, /afternoon/i]
      },
      
      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –±–ª—é–¥
      dishPatterns: [
        // –ö–∞—à–∏
        /–∫–∞—à–∞\s+\w+/gi, /–∫–∞—à[–∞–∏]\s+–º–æ–ª–æ—á–Ω/gi, /–æ–≤—Å—è–Ω/gi, /–≥—Ä–µ—á–Ω–µ–≤/gi, /–º–∞–Ω–Ω/gi,
        
        // –°—É–ø—ã –∏ –ø–µ—Ä–≤—ã–µ –±–ª—é–¥–∞
        /—Å—É–ø\s+\w+/gi, /–±–æ—Ä—â/gi, /—â–∏/gi, /—Å–æ–ª—è–Ω–∫–∞/gi, /—Ä–∞—Å—Å–æ–ª—å–Ω–∏–∫/gi, /–±—É–ª—å–æ–Ω/gi,
        
        // –ú—è—Å–Ω—ã–µ –±–ª—é–¥–∞
        /–∫–æ—Ç–ª–µ—Ç/gi, /–º—è—Å–æ\s+\w+/gi, /–≥–æ–≤—è–¥–∏–Ω/gi, /—Å–≤–∏–Ω–∏–Ω/gi, /–∫—É—Ä–∏–Ω/gi, /—Ç–µ—Ñ—Ç–µ–ª/gi,
        /–±–∏—Ç–æ—á–∫/gi, /–∑—Ä–∞–∑/gi, /—à–Ω–∏—Ü–µ–ª/gi, /–æ—Ç–±–∏–≤–Ω/gi,
        
        // –†—ã–±–Ω—ã–µ –±–ª—é–¥–∞
        /—Ä—ã–±–∞\s+\w+/gi, /—Ç—Ä–µ—Å–∫/gi, /—Ö–µ–∫/gi, /–º–∏–Ω—Ç–∞–π/gi, /—Å—É–¥–∞–∫/gi,
        
        // –ì–∞—Ä–Ω–∏—Ä—ã
        /–ø—é—Ä–µ/gi, /–∫–∞—Ä—Ç–æ—Ñ–µ–ª/gi, /—Ä–∏—Å/gi, /–≥—Ä–µ—á–∫–∞/gi, /–º–∞–∫–∞—Ä–æ–Ω/gi, /—Å–ø–∞–≥–µ—Ç—Ç–∏/gi,
        
        // –°–∞–ª–∞—Ç—ã –∏ –æ–≤–æ—â–∏
        /—Å–∞–ª–∞—Ç\s+\w+/gi, /–∫–∞–ø—É—Å—Ç/gi, /–º–æ—Ä–∫–æ–≤/gi, /—Å–≤–µ–∫–ª/gi, /–æ–≥—É—Ä—Ü/gi, /–ø–æ–º–∏–¥–æ—Ä/gi,
        
        // –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        /—Ç–≤–æ—Ä–æ–≥/gi, /—Å—ã—Ä–Ω–∏–∫/gi, /–∑–∞–ø–µ–∫–∞–Ω–∫/gi, /–æ–º–ª–µ—Ç/gi, /—è–∏—á–Ω–∏—Ü/gi,
        
        // –ù–∞–ø–∏—Ç–∫–∏
        /–∫–æ–º–ø–æ—Ç/gi, /–∫–∏—Å–µ–ª—å/gi, /—á–∞–π/gi, /–∫–∞–∫–∞–æ/gi, /–º–æ–ª–æ–∫–æ/gi, /–∫–µ—Ñ–∏—Ä/gi, /—Å–æ–∫/gi,
        
        // –í—ã–ø–µ—á–∫–∞ –∏ –¥–µ—Å–µ—Ä—Ç—ã
        /–±—É–ª–æ—á–∫/gi, /–ø–µ—á–µ–Ω—å/gi, /–ø–∏—Ä–æ–∂–∫/gi, /–≤–∞—Ç—Ä—É—à–∫/gi, /–ø—Ä—è–Ω–∏–∫/gi, /—Ö–ª–µ–±/gi,
        
        // –§—Ä—É–∫—Ç—ã
        /—è–±–ª–æ–∫/gi, /–±–∞–Ω–∞–Ω/gi, /–∞–ø–µ–ª—å—Å–∏–Ω/gi, /–≥—Ä—É—à/gi, /—Å—É—Ö–æ—Ñ—Ä—É–∫—Ç/gi
      ]
    };
    
    // –°—Ç–æ–ø-—Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    this.stopWords = [
      '–º–µ–Ω—é', '–Ω–µ–¥–µ–ª—è', '–∑–∞–∫–∞–∑', '–¥–∞—Ç–∞', '–≤—Ä–µ–º—è', '–∫–∞–ª–æ—Ä–∏–∏', '–±–µ–ª–∫–∏', '–∂–∏—Ä—ã', '—É–≥–ª–µ–≤–æ–¥—ã',
      '–≤–µ—Å', '–ø–æ—Ä—Ü–∏—è', '–Ω–æ–º–µ—Ä', '—Ä–µ—Ü–µ–ø—Ç', '–∫–∫–∞–ª', '–≥—Ä–∞–º–º', '–º–ª', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è',
      '–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è', '—Å–æ—Å—Ç–∞–≤', '–ø–∏—â–µ–≤–∞—è', '—Ü–µ–Ω–Ω–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è'
    ];
    
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –±–ª—é–¥–∞
    this.dishTypeKeywords = {
      '–∑–∞–≤—Ç—Ä–∞–∫': ['–∫–∞—à–∞', '–æ–º–ª–µ—Ç', '—Å—ã—Ä–Ω–∏–∫–∏', '—Ç–≤–æ—Ä–æ–≥', '–º–æ–ª–æ–∫–æ', '–∫–∞–∫–∞–æ', '—á–∞–π', '–±—É–ª–æ—á–∫–∞', '—Ö–ª–µ–±'],
      '–æ–±–µ–¥': ['—Å—É–ø', '–±–æ—Ä—â', '—â–∏', '–∫–æ—Ç–ª–µ—Ç–∞', '–º—è—Å–æ', '—Ä—ã–±–∞', '–ø—é—Ä–µ', '—Ä–∏—Å', '–≥—Ä–µ—á–∫–∞', '–∫–æ–º–ø–æ—Ç'],
      '–ø–æ–ª–¥–Ω–∏–∫': ['–∫–µ—Ñ–∏—Ä', '–ø–µ—á–µ–Ω—å–µ', '—Ñ—Ä—É–∫—Ç—ã', '—Å–æ–∫', '–π–æ–≥—É—Ä—Ç', '–º–æ–ª–æ–∫–æ', '–±—É–ª–æ—á–∫–∞']
    };
  }

  async parseSchoolMenuFile(buffer) {
    try {
      console.log('üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ü–ê–†–°–ï–†: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∫–æ–ª—å–Ω–æ–µ –º–µ–Ω—é...');
      
      const workbook = XLSX.read(buffer, { type: 'buffer' });
      console.log(`üìä –õ–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ: ${workbook.SheetNames.length}`);
      
      let allDishes = [];
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
      for (const sheetName of workbook.SheetNames) {
        console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏—Å—Ç: "${sheetName}"`);
        const worksheet = workbook.Sheets[sheetName];
        const data = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '', raw: false });
        
        const sheetDishes = this.parseSchoolMenuSheet(data, sheetName);
        allDishes.push(...sheetDishes);
        
        console.log(`‚úÖ –ù–∞ –ª–∏—Å—Ç–µ "${sheetName}" –Ω–∞–π–¥–µ–Ω–æ ${sheetDishes.length} –±–ª—é–¥`);
      }
      
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
      allDishes = this.removeDuplicates(allDishes);
      console.log(`üéâ –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ ${allDishes.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª—é–¥`);
      
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
      if (allDishes.length === 0) {
        console.log('üî• –í–∫–ª—é—á–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º...');
        allDishes = this.aggressiveSchoolMenuParsing(workbook);
      }
      
      return this.enrichDishes(allDishes);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞:', error);
      return this.createSchoolFallbackMenu();
    }
  }

  parseSchoolMenuSheet(data, sheetName) {
    console.log(`üè´ –ü–∞—Ä—Å–∏–º –ª–∏—Å—Ç —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é: ${data.length} —Å—Ç—Ä–æ–∫`);
    
    // 1. –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const structure = this.analyzeSchoolMenuStructure(data);
    console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞:', structure);
    
    // 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª—é–¥–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    let dishes = [];
    
    // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    if (structure.isStructured) {
      dishes.push(...this.parseBySchoolStructure(data, structure));
    }
    
    // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º (—Ç–∏–ø–∏—á–Ω–∞—è —à–∫–æ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞)
    dishes.push(...this.parseBySchoolGrid(data));
    
    // –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    dishes.push(...this.parseByKeywords(data));
    
    // –ú–µ—Ç–æ–¥ 4: –ü–∞—Ç—Ç–µ—Ä–Ω-–ø–æ–∏—Å–∫
    dishes.push(...this.parseByPatterns(data));
    
    return this.removeDuplicates(dishes);
  }

  analyzeSchoolMenuStructure(data) {
    const structure = {
      isStructured: false,
      dayColumns: [],
      mealTypeRows: [],
      dataStartRow: 0,
      dataStartCol: 0
    };
    
    // –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    for (let row = 0; row < Math.min(10, data.length); row++) {
      for (let col = 0; col < Math.min(10, data[row]?.length || 0); col++) {
        const cell = this.normalizeText(data[row][col]);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        this.schoolMenuPatterns.dayHeaders.forEach((pattern, index) => {
          if (pattern.test(cell)) {
            const days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];
            structure.dayColumns.push({
              col: col,
              day: days[Math.floor(index / 3)] || '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
              text: cell
            });
          }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –ø–∏—Ç–∞–Ω–∏—è
        Object.entries(this.schoolMenuPatterns.mealTypes).forEach(([mealType, patterns]) => {
          patterns.forEach(pattern => {
            if (pattern.test(cell)) {
              structure.mealTypeRows.push({
                row: row,
                type: mealType,
                text: cell
              });
            }
          });
        });
      }
    }
    
    structure.isStructured = structure.dayColumns.length > 0 || structure.mealTypeRows.length > 0;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
    if (structure.dayColumns.length > 0) {
      structure.dataStartRow = Math.max(...structure.dayColumns.map(d => d.row || 0)) + 1;
      structure.dataStartCol = Math.min(...structure.dayColumns.map(d => d.col));
    }
    
    return structure;
  }

  parseBySchoolStructure(data, structure) {
    const dishes = [];
    
    if (structure.dayColumns.length === 0) return dishes;
    
    console.log('üèóÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ...');
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –∏—â–µ–º –±–ª—é–¥–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
    structure.dayColumns.forEach(dayInfo => {
      const col = dayInfo.col;
      const day = dayInfo.day;
      
      // –ò—â–µ–º –±–ª—é–¥–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ —ç—Ç–æ–≥–æ –¥–Ω—è
      for (let row = structure.dataStartRow; row < data.length; row++) {
        const cellText = this.normalizeText(data[row][col]);
        
        if (this.isSchoolDish(cellText)) {
          const mealType = this.determineMealTypeByRow(data, row, structure);
          
          dishes.push({
            name: data[row][col].toString().trim(),
            meal_type: mealType,
            day_of_week: day,
            row: row,
            col: col,
            source: 'structure'
          });
        }
      }
    });
    
    return dishes;
  }

  parseBySchoolGrid(data) {
    const dishes = [];
    console.log('üî≤ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ —à–∫–æ–ª—å–Ω–æ–π —Å–µ—Ç–∫–µ...');
    
    const days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];
    const mealTypes = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫'];
    
    // –¢–∏–ø–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
    // –ó–∞—Ç–µ–º –±–ª–æ–∫–∏ –ø–æ —Ç–∏–ø–∞–º –ø–∏—Ç–∞–Ω–∏—è
    
    // –ò—â–µ–º –æ–±–ª–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 2-5 —Å—Ç—Ä–æ–∫–∏)
    for (let startRow = 1; startRow < 6; startRow++) {
      for (let startCol = 1; startCol < 6; startCol++) {
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –±–ª–æ–∫–æ–≤
        for (let blockHeight = 3; blockHeight <= 8; blockHeight++) {
          
          let foundDishes = 0;
          const tempDishes = [];
          
          mealTypes.forEach((mealType, mealIndex) => {
            days.forEach((day, dayIndex) => {
              const row = startRow + (mealIndex * blockHeight);
              const col = startCol + dayIndex;
              
              if (row < data.length && col < (data[row]?.length || 0)) {
                const cellText = this.normalizeText(data[row][col]);
                
                if (this.isSchoolDish(cellText)) {
                  tempDishes.push({
                    name: data[row][col].toString().trim(),
                    meal_type: mealType,
                    day_of_week: day,
                    row: row,
                    col: col,
                    source: 'grid'
                  });
                  foundDishes++;
                }
              }
            });
          });
          
          // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª—é–¥, —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∞–ª–∏–¥–Ω–æ–π
          if (foundDishes >= 5) {
            dishes.push(...tempDishes);
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è —Å–µ—Ç–∫–∞: start(${startRow},${startCol}), block=${blockHeight}, dishes=${foundDishes}`);
            return dishes; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
          }
        }
      }
    }
    
    return dishes;
  }

  parseByKeywords(data) {
    const dishes = [];
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º...');
    
    data.forEach((row, rowIndex) => {
      row.forEach((cell, colIndex) => {
        const cellText = this.normalizeText(cell);
        
        if (this.isSchoolDish(cellText)) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
          const mealType = this.determineMealTypeByContent(cellText);
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
          const day = this.determineDayByPosition(colIndex) || 
                     this.findDayInNearbyHeaders(data, rowIndex, colIndex);
          
          if (mealType && day) {
            dishes.push({
              name: cell.toString().trim(),
              meal_type: mealType,
              day_of_week: day,
              row: rowIndex,
              col: colIndex,
              source: 'keywords'
            });
          }
        }
      });
    });
    
    return dishes;
  }

  parseByPatterns(data) {
    const dishes = [];
    console.log('üéØ –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –±–ª—é–¥...');
    
    const allText = data.flat().filter(cell => cell && typeof cell === 'string').join(' ');
    
    this.schoolMenuPatterns.dishPatterns.forEach(pattern => {
      const matches = allText.match(pattern);
      if (matches) {
        matches.forEach(match => {
          const cleanMatch = match.trim();
          if (cleanMatch.length > 3 && this.isSchoolDish(cleanMatch)) {
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è
            const mealType = this.determineMealTypeByContent(cleanMatch);
            
            // –°–ª—É—á–∞–π–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];
            const randomDay = days[Math.floor(Math.random() * days.length)];
            
            dishes.push({
              name: cleanMatch,
              meal_type: mealType || '–æ–±–µ–¥',
              day_of_week: randomDay,
              source: 'pattern'
            });
          }
        });
      }
    });
    
    return dishes;
  }

  aggressiveSchoolMenuParsing(workbook) {
    console.log('üî• –ê–ì–†–ï–°–°–ò–í–ù–´–ô —Ä–µ–∂–∏–º –¥–ª—è —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é');
    
    const dishes = [];
    const allCells = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
    workbook.SheetNames.forEach(sheetName => {
      const worksheet = workbook.Sheets[sheetName];
      const data = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '', raw: false });
      
      data.forEach((row, rowIndex) => {
        row.forEach((cell, colIndex) => {
          if (cell && typeof cell === 'string' && cell.trim().length > 2) {
            allCells.push({
              text: cell.trim(),
              row: rowIndex,
              col: colIndex,
              sheet: sheetName
            });
          }
        });
      });
    });
    
    console.log(`üî• –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${allCells.length} —è—á–µ–µ–∫...`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
    allCells.forEach(cellInfo => {
      const text = cellInfo.text;
      const normalizedText = this.normalizeText(text);
      
      if (this.isSchoolDish(normalizedText)) {
        const mealType = this.determineMealTypeByContent(normalizedText);
        const day = this.determineDayByPosition(cellInfo.col);
        
        dishes.push({
          name: text,
          meal_type: mealType || '–æ–±–µ–¥',
          day_of_week: day || '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
          source: 'aggressive'
        });
      }
    });
    
    return this.removeDuplicates(dishes);
  }

  isSchoolDish(text) {
    if (!text || text.length < 2 || text.length > 100) return false;
    
    const normalizedText = text.toLowerCase().trim();
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    if (this.stopWords.some(stopWord => normalizedText.includes(stopWord))) {
      return false;
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —á–∏—Å–ª–∞, –¥–∞—Ç—ã, –≤—Ä–µ–º—è
    if (/^\d+$/.test(text) || 
        /\d{2}[.\-\/]\d{2}/.test(text) || 
        /\d{1,2}:\d{2}/.test(text) ||
        /^\d+[.,]\d+$/.test(text)) {
      return false;
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
    if (normalizedText.length < 3) return false;
    
    // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—É–∫–≤—ã
    if (!/[–∞-—è—ëa-z]/i.test(text)) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∏—â–µ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const foodKeywords = [
      '–∫–∞—à–∞', '—Å—É–ø', '–º—è—Å–æ', '—Ä—ã–±–∞', '–∫–æ—Ç–ª–µ—Ç–∞', '—Å–∞–ª–∞—Ç', '–∫–æ–º–ø–æ—Ç', '–º–æ–ª–æ–∫–æ', 
      '—Ö–ª–µ–±', '–±—É–ª–æ—á–∫–∞', '—Ç–≤–æ—Ä–æ–≥', '–∫–µ—Ñ–∏—Ä', '—á–∞–π', '–∫–∞–∫–∞–æ', '–ø—é—Ä–µ', '—Ä–∏—Å',
      '–≥—Ä–µ—á–∫–∞', '–º–∞–∫–∞—Ä–æ–Ω—ã', '–±–æ—Ä—â', '—â–∏', '–æ–º–ª–µ—Ç', '—Å—ã—Ä–Ω–∏–∫–∏', '–ø–µ—á–µ–Ω—å–µ',
      '—Ñ—Ä—É–∫—Ç—ã', '–æ–≤–æ—â–∏', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å', '–∫–∞–ø—É—Å—Ç–∞', '–º–æ—Ä–∫–æ–≤—å'
    ];
    
    const hasFoodKeyword = foodKeywords.some(keyword => normalizedText.includes(keyword));
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∏—â–µ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –±–ª—é–¥–æ
    if (hasFoodKeyword) return true;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    return this.schoolMenuPatterns.dishPatterns.some(pattern => pattern.test(text));
  }

  determineMealTypeByContent(text) {
    const normalizedText = text.toLowerCase().trim();
    
    // –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –ë–õ–Æ–î
    
    // üåÖ –ó–ê–í–¢–†–ê–ö - —É—Ç—Ä–µ–Ω–Ω–∏–µ –±–ª—é–¥–∞
    const breakfastStrict = [
      // –ö–∞—à–∏
      /–∫–∞—à[–∞–∏]\s+(–æ–≤—Å—è–Ω|–≥—Ä–µ—á–Ω–µ–≤|–º–∞–Ω–Ω|—Ä–∏—Å–æ–≤|–ø—à–µ–Ω–Ω|–ø–µ—Ä–ª–æ–≤)/i,
      /–∫–∞—à[–∞–∏]\s+–º–æ–ª–æ—á–Ω/i,
      /(–æ–≤—Å—è–Ω|–≥–µ—Ä–∫—É–ª–µ—Å)/i,
      // –Ø–∏—á–Ω—ã–µ –±–ª—é–¥–∞
      /–æ–º–ª–µ—Ç/i, /—è–∏—á–Ω–∏—Ü/i, /—è–π—Ü[–æ–∞]\s+(–≤—Å–º—è—Ç–∫—É|–≤–∫—Ä—É—Ç—É—é)/i,
      // –¢–≤–æ—Ä–æ–∂–Ω—ã–µ –±–ª—é–¥–∞
      /—Å—ã—Ä–Ω–∏–∫/i, /—Ç–≤–æ—Ä–æ–≥/i, /–∑–∞–ø–µ–∫–∞–Ω–∫[–∞–∏]\s+—Ç–≤–æ—Ä–æ–∂–Ω/i,
      // –ú–æ–ª–æ—á–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏ –∫–∞—à–∏
      /–∫–∞–∫–∞–æ/i, /—á–∞–π\s+—Å\s+–º–æ–ª–æ–∫–æ–º/i, /–º–æ–ª–æ–∫–æ\s+—Ç–µ–ø–ª–æ–µ/i,
      // –£—Ç—Ä–µ–Ω–Ω—è—è –≤—ã–ø–µ—á–∫–∞
      /–æ–ª–∞–¥—å/i, /–±–ª–∏–Ω—á–∏–∫/i, /–±–ª–∏–Ω(?!—ã)/i,
      // –ë—É—Ç–µ—Ä–±—Ä–æ–¥—ã
      /–±—É—Ç–µ—Ä–±—Ä–æ–¥/i, /—Ö–ª–µ–±\s+—Å\s+(–º–∞—Å–ª–æ–º|—Å—ã—Ä–æ–º|–¥–∂–µ–º–æ–º)/i
    ];
    
    // üçΩÔ∏è –û–ë–ï–î - –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞
    const lunchStrict = [
      // –ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞
      /—Å—É–ø(?!–µ—Ä)/i, /–±–æ—Ä—â/i, /—â–∏(?!\s*$)/i, /—Å–æ–ª—è–Ω–∫/i, /—Ä–∞—Å—Å–æ–ª—å–Ω–∏–∫/i, /–±—É–ª—å–æ–Ω/i,
      /–ø–æ—Ö–ª–µ–±–∫/i, /—Ö–∞—Ä—á–æ/i, /–æ–∫—Ä–æ—à–∫/i, /—Å–≤–µ–∫–æ–ª—å–Ω–∏–∫/i,
      // –ú—è—Å–Ω—ã–µ –±–ª—é–¥–∞
      /–∫–æ—Ç–ª–µ—Ç/i, /–±–∏—Ç–æ—á–∫/i, /—Ç–µ—Ñ—Ç–µ–ª/i, /–∑—Ä–∞–∑/i, /—à–Ω–∏—Ü–µ–ª/i, /–æ—Ç–±–∏–≤–Ω/i,
      /–º—è—Å–æ\s+(—Ç—É—à–µ–Ω|–∂–∞—Ä–µ–Ω|–æ—Ç–≤–∞—Ä–Ω|–∑–∞–ø–µ—á–µ–Ω)/i, /–≥–æ–≤—è–¥–∏–Ω/i, /—Å–≤–∏–Ω–∏–Ω/i, /–±–∞—Ä–∞–Ω–∏–Ω/i,
      /–∫—É—Ä–∏–Ω[–∞—ã]/i, /–∫—É—Ä–∏—Ü/i, /–∏–Ω–¥–µ–π–∫/i,
      // –†—ã–±–Ω—ã–µ –±–ª—é–¥–∞
      /—Ä—ã–±[–∞—ã]\s+(–∂–∞—Ä–µ–Ω|—Ç—É—à–µ–Ω|–æ—Ç–≤–∞—Ä–Ω|–∑–∞–ø–µ—á–µ–Ω)/i, /—Ç—Ä–µ—Å–∫/i, /—Ö–µ–∫/i, /–º–∏–Ω—Ç–∞–π/i,
      /—Å—É–¥–∞–∫/i, /–∫–∞—Ä–ø/i, /—Å–µ–º–≥/i, /–ª–æ—Å–æ—Å/i,
      // –ì–∞—Ä–Ω–∏—Ä—ã
      /–ø—é—Ä–µ\s+(–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å|–æ–≤–æ—â–Ω)/i, /—Ä–∏—Å\s+(–æ—Ç–≤–∞—Ä–Ω|–ø—Ä–∏–ø—É—â–µ–Ω)/i,
      /–≥—Ä–µ—á–∫[–∞–∏]\s+(—Ä–∞—Å—Å—ã–ø—á|–æ—Ç–≤–∞—Ä–Ω)/i, /–º–∞–∫–∞—Ä–æ–Ω/i, /—Å–ø–∞–≥–µ—Ç—Ç–∏/i,
      /–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å\s+(–æ—Ç–≤–∞—Ä–Ω|–∂–∞—Ä–µ–Ω|—Ç—É—à–µ–Ω)/i,
      // –°–∞–ª–∞—Ç—ã –æ–±–µ–¥–µ–Ω–Ω—ã–µ
      /—Å–∞–ª–∞—Ç\s+(–º—è—Å–Ω|—Ä—ã–±–Ω|—Å\s+–º—è—Å–æ–º|–æ–ª–∏–≤—å–µ|—Å—Ç–æ–ª–∏—á–Ω)/i,
      // –û–±–µ–¥–µ–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏
      /–∫–æ–º–ø–æ—Ç/i, /–∫–∏—Å–µ–ª—å/i, /–º–æ—Ä—Å/i, /—É–∑–≤–∞—Ä/i
    ];
    
    // ü•õ –ü–û–õ–î–ù–ò–ö - –ª–µ–≥–∫–∏–µ –ø–µ—Ä–µ–∫—É—Å—ã
    const snackStrict = [
      // –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
      /–∫–µ—Ñ–∏—Ä/i, /—Ä—è–∂–µ–Ω–∫/i, /–ø—Ä–æ—Å—Ç–æ–∫–≤–∞—à/i, /–π–æ–≥—É—Ä—Ç/i, /–≤–∞—Ä–µ–Ω–µ—Ü/i,
      /–º–æ–ª–æ–∫–æ(?!\s+(—Ç–µ–ø–ª–æ–µ|—Å\s+–º–µ–¥–æ–º))/i, /—Å–º–µ—Ç–∞–Ω/i,
      // –í—ã–ø–µ—á–∫–∞ –∏ —Å–ª–∞–¥–æ—Å—Ç–∏
      /–ø–µ—á–µ–Ω—å/i, /–ø—Ä—è–Ω–∏–∫/i, /–≤–∞—Ñ–ª/i, /–±—É–ª–æ—á–∫/i, /–≤–∞—Ç—Ä—É—à–∫/i,
      /–ø–∏—Ä–æ–∂–æ–∫/i, /–∫–µ–∫—Å/i, /–º–∞—Ñ—Ñ–∏–Ω/i, /–∫—Ä—É–∞—Å—Å–∞–Ω/i,
      // –§—Ä—É–∫—Ç—ã –∏ —è–≥–æ–¥—ã
      /—Ñ—Ä—É–∫—Ç/i, /—è–±–ª–æ–∫/i, /–±–∞–Ω–∞–Ω/i, /–∞–ø–µ–ª—å—Å–∏–Ω/i, /–≥—Ä—É—à/i, /–≤–∏–Ω–æ–≥—Ä–∞–¥/i,
      /—è–≥–æ–¥/i, /–∫–ª—É–±–Ω–∏–∫/i, /–º–∞–ª–∏–Ω/i, /—Å–º–æ—Ä–æ–¥–∏–Ω/i,
      // –ü–æ–ª–¥–Ω–∏–∫–æ–≤—ã–µ –Ω–∞–ø–∏—Ç–∫–∏
      /—Å–æ–∫(?!\s+–º—è—Å–Ω)/i, /–Ω–µ–∫—Ç–∞—Ä/i, /–º–æ—Ä—Å/i, /—á–∞–π\s+(—Ç—Ä–∞–≤—è–Ω|—Ñ—Ä—É–∫—Ç–æ–≤)/i,
      // –û—Ä–µ—Ö–∏ –∏ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã
      /–æ—Ä–µ—Ö/i, /–∏–∑—é–º/i, /–∫—É—Ä–∞–≥–∞/i, /—á–µ—Ä–Ω–æ—Å–ª–∏–≤/i, /—Ñ–∏–Ω–∏–∫/i,
      // –õ–µ–≥–∫–∏–µ –¥–µ—Å–µ—Ä—Ç—ã
      /–∂–µ–ª–µ/i, /–º—É—Å—Å/i, /—Å—É—Ñ–ª–µ/i, /–ø—É–¥–∏–Ω–≥/i
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞
    for (const pattern of breakfastStrict) {
      if (pattern.test(normalizedText)) {
        return '–∑–∞–≤—Ç—Ä–∞–∫';
      }
    }
    
    for (const pattern of lunchStrict) {
      if (pattern.test(normalizedText)) {
        return '–æ–±–µ–¥';
      }
    }
    
    for (const pattern of snackStrict) {
      if (pattern.test(normalizedText)) {
        return '–ø–æ–ª–¥–Ω–∏–∫';
      }
    }
    
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    if (/–∫–∞—à–∞|–æ–º–ª–µ—Ç|—Ç–≤–æ—Ä–æ–≥|—Å—ã—Ä–Ω–∏–∫|–æ–ª–∞–¥—å|–±–ª–∏–Ω|–∫–∞–∫–∞–æ/i.test(normalizedText)) {
      return '–∑–∞–≤—Ç—Ä–∞–∫';
    }
    
    if (/—Å—É–ø|–±–æ—Ä—â|–∫–æ—Ç–ª–µ—Ç|–º—è—Å–æ|—Ä—ã–±–∞|–∫–æ–º–ø–æ—Ç|—Å–∞–ª–∞—Ç/i.test(normalizedText)) {
      return '–æ–±–µ–¥';
    }
    
    if (/–∫–µ—Ñ–∏—Ä|–ø–µ—á–µ–Ω—å|—Ñ—Ä—É–∫—Ç|—Å–æ–∫|–º–æ–ª–æ–∫–æ|–±—É–ª–æ—á–∫/i.test(normalizedText)) {
      return '–ø–æ–ª–¥–Ω–∏–∫';
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    if (/—É—Ç—Ä–µ–Ω|—É—Ç—Ä–æ–º|–∑–∞–≤—Ç—Ä–∞/i.test(normalizedText)) return '–∑–∞–≤—Ç—Ä–∞–∫';
    if (/–æ–±–µ–¥–µ–Ω|–¥–Ω–µ–≤–Ω|–≥–æ—Ä—è—á/i.test(normalizedText)) return '–æ–±–µ–¥';
    if /(–ø–æ—Å–ª–µ)?–ø–æ–ª–¥–Ω|–≤–µ—á–µ—Ä–Ω|–ª–µ–≥–∫/i.test(normalizedText)) return '–ø–æ–ª–¥–Ω–∏–∫';
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–Ω–æ—Å–∏–º –∫ –æ–±–µ–¥—É (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏)
    return '–æ–±–µ–¥';
  }

  determineMealTypeByRow(data, row, structure) {
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è
    for (const mealInfo of structure.mealTypeRows) {
      if (Math.abs(mealInfo.row - row) <= 3) {
        return mealInfo.type;
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–ª–æ–∫–µ
    const blockPosition = row % 10;
    if (blockPosition <= 2) return '–∑–∞–≤—Ç—Ä–∞–∫';
    if (blockPosition <= 6) return '–æ–±–µ–¥';
    return '–ø–æ–ª–¥–Ω–∏–∫';
  }

  determineDayByPosition(col) {
    const days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];
    
    // –û–±—ã—á–Ω–æ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –æ–ø–∏—Å–∞–Ω–∏–µ, –∑–∞—Ç–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    if (col >= 1 && col <= 5) {
      return days[col - 1];
    }
    
    // –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–æ–∫ –±–æ–ª—å—à–µ, –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ –º–æ–¥—É–ª—é
    const dayIndex = (col - 1) % 5;
    return days[dayIndex] || '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫';
  }

  findDayInNearbyHeaders(data, row, col) {
    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    for (let r = 0; r < Math.min(5, data.length); r++) {
      if (col < (data[r]?.length || 0)) {
        const cellText = this.normalizeText(data[r][col]);
        
        if (/–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–ø–Ω/i.test(cellText)) return '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫';
        if (/–≤—Ç–æ—Ä–Ω–∏–∫|–≤—Ç/i.test(cellText)) return '–≤—Ç–æ—Ä–Ω–∏–∫';
        if (/—Å—Ä–µ–¥–∞|—Å—Ä/i.test(cellText)) return '—Å—Ä–µ–¥–∞';
        if (/—á–µ—Ç–≤–µ—Ä–≥|—á—Ç/i.test(cellText)) return '—á–µ—Ç–≤–µ—Ä–≥';
        if (/–ø—è—Ç–Ω–∏—Ü–∞|–ø—Ç/i.test(cellText)) return '–ø—è—Ç–Ω–∏—Ü–∞';
      }
    }
    
    return null;
  }

  normalizeText(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim().replace(/\s+/g, ' ');
  }

  removeDuplicates(dishes) {
    const seen = new Set();
    return dishes.filter(dish => {
      const key = `${dish.name.toLowerCase()}-${dish.meal_type}-${dish.day_of_week}`;
      if (seen.has(key)) return false;
      seen.add(key);
      return true;
    });
  }

  enrichDishes(dishes) {
    return dishes.map(dish => ({
      ...dish,
      price: this.generateSchoolPrice(dish.meal_type, dish.name),
      weight: this.generateSchoolWeight(dish.name, dish.meal_type),
      recipe_number: `–†-${Math.floor(Math.random() * 900) + 100}`,
      description: this.generateSchoolDescription(dish.name),
      school_id: 1,
      week_start: new Date().toISOString().split('T')[0]
    }));
  }

  generateSchoolPrice(mealType, dishName) {
    const name = dishName.toLowerCase();
    
    // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö —à–∫–æ–ª—å–Ω—ã—Ö –±–ª—é–¥
    if (name.includes('–∫–∞—à–∞')) return Math.floor(Math.random() * 10) + 15; // 15-25—Ä
    if (name.includes('—Å—É–ø') || name.includes('–±–æ—Ä—â')) return Math.floor(Math.random() * 15) + 20; // 20-35—Ä
    if (name.includes('–∫–æ—Ç–ª–µ—Ç–∞') || name.includes('–º—è—Å–æ')) return Math.floor(Math.random() * 20) + 35; // 35-55—Ä
    if (name.includes('–∫–æ–º–ø–æ—Ç') || name.includes('—á–∞–π')) return Math.floor(Math.random() * 8) + 8; // 8-16—Ä
    if (name.includes('—Ö–ª–µ–±')) return Math.floor(Math.random() * 5) + 5; // 5-10—Ä
    
    // –ü–æ —Ç–∏–ø—É –ø–∏—Ç–∞–Ω–∏—è
    const ranges = {
      '–∑–∞–≤—Ç—Ä–∞–∫': [12, 30],
      '–æ–±–µ–¥': [25, 60],
      '–ø–æ–ª–¥–Ω–∏–∫': [8, 20]
    };
    
    const [min, max] = ranges[mealType] || [15, 35];
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  generateSchoolWeight(dishName, mealType) {
    const name = dishName.toLowerCase();
    
    // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è —à–∫–æ–ª—å–Ω—ã—Ö –±–ª—é–¥
    if (name.includes('—Å—É–ø') || name.includes('–±–æ—Ä—â')) return '250–º–ª';
    if (name.includes('–∫–∞—à–∞')) return '200–≥';
    if (name.includes('–∫–æ—Ç–ª–µ—Ç–∞')) return '80–≥';
    if (name.includes('–º—è—Å–æ')) return '100–≥';
    if (name.includes('—Ä—ã–±–∞')) return '120–≥';
    if (name.includes('–ø—é—Ä–µ')) return '150–≥';
    if (name.includes('—Å–∞–ª–∞—Ç')) return '80–≥';
    if (name.includes('–∫–æ–º–ø–æ—Ç')) return '200–º–ª';
    if (name.includes('—Ö–ª–µ–±')) return '30–≥';
    if (name.includes('–±—É–ª–æ—á–∫–∞')) return '60–≥';
    if (name.includes('–º–æ–ª–æ–∫–æ')) return '200–º–ª';
    
    // –ü–æ —Ç–∏–ø—É –ø–∏—Ç–∞–Ω–∏—è
    const weights = {
      '–∑–∞–≤—Ç—Ä–∞–∫': ['150–≥', '180–≥', '200–≥'],
      '–æ–±–µ–¥': ['200–≥', '250–≥', '120–≥'],
      '–ø–æ–ª–¥–Ω–∏–∫': ['100–≥', '150–≥', '200–º–ª']
    };
    
    const weightOptions = weights[mealType] || ['150–≥'];
    return weightOptions[Math.floor(Math.random() * weightOptions.length)];
  }

  generateSchoolDescription(dishName) {
    const name = dishName.toLowerCase();
    
    if (name.includes('–∫–∞—à–∞')) return '–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –∫–∞—à–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞';
    if (name.includes('—Å—É–ø')) return '–ì–æ—Ä—è—á–∏–π —Å—É–ø, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ –¥–æ–º–∞—à–Ω–µ–º—É —Ä–µ—Ü–µ–ø—Ç—É';
    if (name.includes('–∫–æ—Ç–ª–µ—Ç–∞')) return '–°–æ—á–Ω–∞—è –∫–æ—Ç–ª–µ—Ç–∞ –∏–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º—è—Å–∞';
    if (name.includes('—Å–∞–ª–∞—Ç')) return '–°–≤–µ–∂–∏–π —Å–∞–ª–∞—Ç –∏–∑ —Å–µ–∑–æ–Ω–Ω—ã—Ö –æ–≤–æ—â–µ–π';
    if (name.includes('–∫–æ–º–ø–æ—Ç')) return '–í–∏—Ç–∞–º–∏–Ω–Ω—ã–π –∫–æ–º–ø–æ—Ç –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤';
    
    const descriptions = [
      '–õ—é–±–∏–º–æ–µ –±–ª—é–¥–æ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤',
      '–ü–æ–ª–µ–∑–Ω–æ–µ –∏ –≤–∫—É—Å–Ω–æ–µ',
      '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å –∑–∞–±–æ—Ç–æ–π –æ –¥–µ—Ç—è—Ö',
      '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
      '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç',
      '–ë–æ–≥–∞—Ç–æ –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏ –∏ –º–∏–Ω–µ—Ä–∞–ª–∞–º–∏'
    ];
    
    return descriptions[Math.floor(Math.random() * descriptions.length)];
  }

  createSchoolFallbackMenu() {
    console.log('üÜò –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —à–∫–æ–ª—å–Ω–æ–µ –º–µ–Ω—é');
    
    const schoolMenu = [
      // –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö
      { name: '–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è –º–æ–ª–æ—á–Ω–∞—è —Å –º–∞—Å–ª–æ–º', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
      { name: '–•–ª–µ–± –ø—à–µ–Ω–∏—á–Ω—ã–π', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
      { name: '–ß–∞–π —Å–ª–∞–¥–∫–∏–π', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
      
      { name: '–°—É–ø –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–π —Å –º—è—Å–æ–º', meal_type: '–æ–±–µ–¥', day_of_week: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
      { name: '–ö–æ—Ç–ª–µ—Ç–∞ –º—è—Å–Ω–∞—è –ø–∞—Ä–æ–≤–∞—è', meal_type: '–æ–±–µ–¥', day_of_week: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
      { name: '–ü—é—Ä–µ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ', meal_type: '–æ–±–µ–¥', day_of_week: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
      { name: '–°–∞–ª–∞—Ç –∏–∑ —Å–≤–µ–∂–µ–π –∫–∞–ø—É—Å—Ç—ã', meal_type: '–æ–±–µ–¥', day_of_week: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
      { name: '–ö–æ–º–ø–æ—Ç –∏–∑ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–æ–≤', meal_type: '–æ–±–µ–¥', day_of_week: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
      
      { name: '–ú–æ–ª–æ–∫–æ', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
      { name: '–ü–µ—á–µ–Ω—å–µ –æ–≤—Å—è–Ω–æ–µ', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
      
      // –í–¢–û–†–ù–ò–ö
      { name: '–ö–∞—à–∞ –≥—Ä–µ—á–Ω–µ–≤–∞—è –º–æ–ª–æ—á–Ω–∞—è', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '–≤—Ç–æ—Ä–Ω–∏–∫' },
      { name: '–û–º–ª–µ—Ç –ø–∞—Ä–æ–≤–æ–π', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '–≤—Ç–æ—Ä–Ω–∏–∫' },
      { name: '–ë—É–ª–æ—á–∫–∞', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '–≤—Ç–æ—Ä–Ω–∏–∫' },
      { name: '–ö–∞–∫–∞–æ', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '–≤—Ç–æ—Ä–Ω–∏–∫' },
      
      { name: '–ë–æ—Ä—â —Å –≥–æ–≤—è–¥–∏–Ω–æ–π', meal_type: '–æ–±–µ–¥', day_of_week: '–≤—Ç–æ—Ä–Ω–∏–∫' },
      { name: '–†—ã–±–∞ –∑–∞–ø–µ—á–µ–Ω–Ω–∞—è', meal_type: '–æ–±–µ–¥', day_of_week: '–≤—Ç–æ—Ä–Ω–∏–∫' },
      { name: '–†–∏—Å –æ—Ç–≤–∞—Ä–Ω–æ–π', meal_type: '–æ–±–µ–¥', day_of_week: '–≤—Ç–æ—Ä–Ω–∏–∫' },
      { name: '–°–∞–ª–∞—Ç –º–æ—Ä–∫–æ–≤–Ω—ã–π', meal_type: '–æ–±–µ–¥', day_of_week: '–≤—Ç–æ—Ä–Ω–∏–∫' },
      { name: '–ö–∏—Å–µ–ª—å —è–≥–æ–¥–Ω—ã–π', meal_type: '–æ–±–µ–¥', day_of_week: '–≤—Ç–æ—Ä–Ω–∏–∫' },
      
      { name: '–ö–µ—Ñ–∏—Ä', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '–≤—Ç–æ—Ä–Ω–∏–∫' },
      { name: '–ü–∏—Ä–æ–∂–æ–∫ —Å —è–±–ª–æ–∫–æ–º', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '–≤—Ç–æ—Ä–Ω–∏–∫' },
      
      // –°–†–ï–î–ê
      { name: '–ö–∞—à–∞ –º–∞–Ω–Ω–∞—è', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '—Å—Ä–µ–¥–∞' },
      { name: '–°—ã—Ä–Ω–∏–∫–∏ —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '—Å—Ä–µ–¥–∞' },
      { name: '–•–ª–µ–± —Å –º–∞—Å–ª–æ–º', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '—Å—Ä–µ–¥–∞' },
      { name: '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '—Å—Ä–µ–¥–∞' },
      
      { name: '–©–∏ –∏–∑ —Å–≤–µ–∂–µ–π –∫–∞–ø—É—Å—Ç—ã', meal_type: '–æ–±–µ–¥', day_of_week: '—Å—Ä–µ–¥–∞' },
      { name: '–¢–µ—Ñ—Ç–µ–ª–∏ –º—è—Å–Ω—ã–µ', meal_type: '–æ–±–µ–¥', day_of_week: '—Å—Ä–µ–¥–∞' },
      { name: '–ú–∞–∫–∞—Ä–æ–Ω—ã –æ—Ç–≤–∞—Ä–Ω—ã–µ', meal_type: '–æ–±–µ–¥', day_of_week: '—Å—Ä–µ–¥–∞' },
      { name: '–°–∞–ª–∞—Ç —Å–≤–µ–∫–æ–ª—å–Ω—ã–π', meal_type: '–æ–±–µ–¥', day_of_week: '—Å—Ä–µ–¥–∞' },
      { name: '–ö–æ–º–ø–æ—Ç —è–±–ª–æ—á–Ω—ã–π', meal_type: '–æ–±–µ–¥', day_of_week: '—Å—Ä–µ–¥–∞' },
      
      { name: '–ô–æ–≥—É—Ä—Ç', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '—Å—Ä–µ–¥–∞' },
      { name: '–§—Ä—É–∫—Ç—ã —Å–µ–∑–æ–Ω–Ω—ã–µ', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '—Å—Ä–µ–¥–∞' },
      
      // –ß–ï–¢–í–ï–†–ì
      { name: '–ö–∞—à–∞ —Ä–∏—Å–æ–≤–∞—è –º–æ–ª–æ—á–Ω–∞—è', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '—á–µ—Ç–≤–µ—Ä–≥' },
      { name: '–ó–∞–ø–µ–∫–∞–Ω–∫–∞ —Ç–≤–æ—Ä–æ–∂–Ω–∞—è', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '—á–µ—Ç–≤–µ—Ä–≥' },
      { name: '–•–ª–µ–± —Ä–∂–∞–Ω–æ–π', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '—á–µ—Ç–≤–µ—Ä–≥' },
      { name: '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '—á–µ—Ç–≤–µ—Ä–≥' },
      
      { name: '–°—É–ø –∫—É—Ä–∏–Ω—ã–π —Å –ª–∞–ø—à–æ–π', meal_type: '–æ–±–µ–¥', day_of_week: '—á–µ—Ç–≤–µ—Ä–≥' },
      { name: '–ë–∏—Ç–æ—á–∫–∏ —Ä—ã–±–Ω—ã–µ', meal_type: '–æ–±–µ–¥', day_of_week: '—á–µ—Ç–≤–µ—Ä–≥' },
      { name: '–ì—Ä–µ—á–∫–∞ –æ—Ç–≤–∞—Ä–Ω–∞—è', meal_type: '–æ–±–µ–¥', day_of_week: '—á–µ—Ç–≤–µ—Ä–≥' },
      { name: '–°–∞–ª–∞—Ç –æ–≥—É—Ä–µ—á–Ω—ã–π', meal_type: '–æ–±–µ–¥', day_of_week: '—á–µ—Ç–≤–µ—Ä–≥' },
      { name: '–ö–æ–º–ø–æ—Ç –∏–∑ —è–≥–æ–¥', meal_type: '–æ–±–µ–¥', day_of_week: '—á–µ—Ç–≤–µ—Ä–≥' },
      
      { name: '–ú–æ–ª–æ–∫–æ —Ç–æ–ø–ª–µ–Ω–æ–µ', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '—á–µ—Ç–≤–µ—Ä–≥' },
      { name: '–í–∞—Ç—Ä—É—à–∫–∞ —Å —Ç–≤–æ—Ä–æ–≥–æ–º', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '—á–µ—Ç–≤–µ—Ä–≥' },
      
      // –ü–Ø–¢–ù–ò–¶–ê
      { name: '–ö–∞—à–∞ –ø—à–µ–Ω–Ω–∞—è', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '–ø—è—Ç–Ω–∏—Ü–∞' },
      { name: '–û–ª–∞–¥—å–∏ —Å –¥–∂–µ–º–æ–º', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '–ø—è—Ç–Ω–∏—Ü–∞' },
      { name: '–•–ª–µ–± —Å —Å—ã—Ä–æ–º', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '–ø—è—Ç–Ω–∏—Ü–∞' },
      { name: '–ß–∞–π –∑–µ–ª–µ–Ω—ã–π', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '–ø—è—Ç–Ω–∏—Ü–∞' },
      
      { name: '–†–∞—Å—Å–æ–ª—å–Ω–∏–∫ —Å –ø–æ—á–∫–∞–º–∏', meal_type: '–æ–±–µ–¥', day_of_week: '–ø—è—Ç–Ω–∏—Ü–∞' },
      { name: '–ö–æ—Ç–ª–µ—Ç–∞ –∫—É—Ä–∏–Ω–∞—è', meal_type: '–æ–±–µ–¥', day_of_week: '–ø—è—Ç–Ω–∏—Ü–∞' },
      { name: '–ü—é—Ä–µ –æ–≤–æ—â–Ω–æ–µ', meal_type: '–æ–±–µ–¥', day_of_week: '–ø—è—Ç–Ω–∏—Ü–∞' },
      { name: '–°–∞–ª–∞—Ç –≤–∏—Ç–∞–º–∏–Ω–Ω—ã–π', meal_type: '–æ–±–µ–¥', day_of_week: '–ø—è—Ç–Ω–∏—Ü–∞' },
      { name: '–ö–æ–º–ø–æ—Ç –≥—Ä—É—à–µ–≤—ã–π', meal_type: '–æ–±–µ–¥', day_of_week: '–ø—è—Ç–Ω–∏—Ü–∞' },
      
      { name: '–†—è–∂–µ–Ω–∫–∞', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '–ø—è—Ç–Ω–∏—Ü–∞' },
      { name: '–ü—Ä—è–Ω–∏–∫ –º–µ–¥–æ–≤—ã–π', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '–ø—è—Ç–Ω–∏—Ü–∞' }
    ];
    
    return this.enrichDishes(schoolMenu);
  }
}

export default SchoolMenuSpecialParser;
