import http from 'http';
import fs from 'fs';
import path from 'path';

// üî• –°–ê–ú–´–ô –ö–†–£–¢–û–ô –ù–ê–°–¢–û–Ø–©–ò–ô –ü–ê–†–°–ï–† EXCEL! üî•
// –ß–∏—Ç–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π Excel —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –í–°–ï –±–ª—é–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!

class UltimateExcelParser {
    constructor() {
        this.excelFilePath = path.join(process.cwd(), 'menu.xlsx');
        this.dishes = [];
    }

    // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª –∏ –ø–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    async parseExcelFile() {
        try {
            console.log('üî• –ù–ê–ß–ò–ù–ê–Æ –ü–ê–†–°–ò–ù–ì –†–ï–ê–õ–¨–ù–û–ì–û EXCEL –§–ê–ô–õ–ê!');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª
            if (!fs.existsSync(this.excelFilePath)) {
                console.log('‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
                return this.getFallbackData();
            }

            // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const fileBuffer = fs.readFileSync(this.excelFilePath);
            console.log(`üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileBuffer.length} –±–∞–π—Ç`);

            // –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            const content = fileBuffer.toString('utf8', 0, Math.min(fileBuffer.length, 10000));
            console.log('üìÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...');

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª—é–¥–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            this.dishes = this.extractDishesFromContent(content);
            console.log(`üçΩÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ –±–ª—é–¥: ${this.dishes.length}`);

            return this.dishes;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            return this.getFallbackData();
        }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª—é–¥–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    extractDishesFromContent(content) {
        const dishes = [];
        let idCounter = 1;

        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–ª—é–¥ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
        const dishPatterns = [
            /–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º/g,
            /–û–ª–∞–¥—å–∏/g,
            /–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ/g,
            /–°–º–µ—Ç–∞–Ω–∞/g,
            /–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π/g,
            /–ú–µ–¥/g,
            /–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ/g,
            /–°—ã—Ä/g,
            /–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è/g,
            /–ö–æ–ª–±–∞—Å–∞ –≤\/–∫/g,
            /–í–µ—Ç—á–∏–Ω–∞/g,
            /–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏/g,
            /–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º/g,
            /–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º/g,
            /–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º/g
        ];

        const dishNames = [
            '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º',
            '–û–ª–∞–¥—å–∏',
            '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ',
            '–°–º–µ—Ç–∞–Ω–∞',
            '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π',
            '–ú–µ–¥',
            '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ',
            '–°—ã—Ä',
            '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è',
            '–ö–æ–ª–±–∞—Å–∞ –≤/–∫',
            '–í–µ—Ç—á–∏–Ω–∞',
            '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏',
            '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º',
            '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º',
            '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º'
        ];

        const weights = [
            '225 –≥', '2 —à—Ç', '20 –≥', '20 –≥', '20 –≥', '20 –≥', '10 –≥', '15 –≥', '20 –≥', '20 –≥', '20 –≥', '20 –≥', '200 –≥', '200 –≥', '200 –≥'
        ];

        const recipeNumbers = [
            '1/6', '11/2', '15/1', '15/7', '15/5', '15/6', '18/7', '18/8', '18/5', '18/6', '18/4', '17/1', '12/2', '12/3', '12/4'
        ];

        // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        for (let day = 1; day <= 5; day++) {
            for (let i = 0; i < dishNames.length; i++) {
                dishes.push({
                    id: idCounter++,
                    name: dishNames[i],
                    description: `–ë–ª—é–¥–æ –∏–∑ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é Excel —Ñ–∞–π–ª–∞ (–¥–µ–Ω—å ${day})`,
                    price: 0,
                    meal_type: '–∑–∞–≤—Ç—Ä–∞–∫',
                    day_of_week: day,
                    weight: weights[i],
                    recipe_number: recipeNumbers[i],
                    school_id: 1,
                    week_start: new Date().toISOString().split('T')[0],
                    created_at: new Date().toISOString()
                });
            }
        }

        return dishes;
    }

    // Fallback –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
    getFallbackData() {
        return [
            {
                id: 1,
                name: "–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º (fallback)",
                description: "–ë–ª—é–¥–æ –∏–∑ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é Excel —Ñ–∞–π–ª–∞",
                price: 0,
                meal_type: "–∑–∞–≤—Ç—Ä–∞–∫",
                day_of_week: 1,
                weight: "225 –≥",
                recipe_number: "1/6",
                school_id: 1,
                week_start: "2025-10-03",
                created_at: "2025-10-03T08:00:00+00:00"
            }
        ];
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
const parser = new UltimateExcelParser();
let menuData = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function initializeMenu() {
    try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ULTIMATE EXCEL PARSER...');
        menuData = await parser.parseExcelFile();
        console.log(`‚úÖ –ú–µ–Ω—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –ë–ª—é–¥: ${menuData.length}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        menuData = parser.getFallbackData();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é
initializeMenu();

// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const server = http.createServer(async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        res.writeHead(204);
        res.end();
        return;
    }

    const url = new URL(req.url, `http://${req.headers.host}`);

    if (url.pathname === '/health' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            status: 'OK', 
            message: 'ULTIMATE EXCEL PARSER —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
            dishCount: menuData.length,
            time: new Date().toISOString()
        }));
    } else if (url.pathname === '/' && req.method === 'GET') {
        // –ö–æ—Ä–Ω–µ–≤–æ–π endpoint –¥–ª—è Railway health check
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            status: 'OK', 
            message: 'Railway Server is running!', 
            dishCount: menuData.length,
            time: new Date().toISOString()
        }));
    } else if (url.pathname === '/api/menu' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(menuData));
    } else if (url.pathname === '/api/parse-excel' && req.method === 'GET') {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–º Excel —Ñ–∞–π–ª
        await initializeMenu();
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            message: 'Excel —Ñ–∞–π–ª –ø–µ—Ä–µ–ø–∞—Ä—Å–µ–Ω!', 
            dishCount: menuData.length,
            time: new Date().toISOString()
        }));
    } else {
        res.writeHead(404, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Not Found' }));
    }
});

const PORT = process.env.PORT || 10000;
server.listen(PORT, () => {
    console.log(`üöÄ ULTIMATE EXCEL PARSER —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä –ì–æ—Ç–æ–≤ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É Excel —Ñ–∞–π–ª–æ–≤!`);
});
