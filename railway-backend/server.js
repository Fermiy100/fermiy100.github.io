const http = require('http');

console.log('üöÄ –ó–ê–ü–£–°–ö RAILWAY SERVER v29.7.0 - EXCEL PARSER ADDED!');

// –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é (15 –±–ª—é–¥ –∫–∞–∫ –≤ mock-data.js)
let menuData = [
    // –ó–∞–≤—Ç—Ä–∞–∫
    { id: 1, name: '–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è', description: '–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è - –î–µ–Ω—å 1 - –∑–∞–≤—Ç—Ä–∞–∫', price: 0, meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: 1, weight: '200–≥', recipe_number: '1/1', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 2, name: '–ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –º–∞—Å–ª–æ–º', description: '–ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –º–∞—Å–ª–æ–º - –î–µ–Ω—å 1 - –∑–∞–≤—Ç—Ä–∞–∫', price: 0, meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: 1, weight: '80–≥', recipe_number: '1/2', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 3, name: '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º', description: '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º - –î–µ–Ω—å 1 - –∑–∞–≤—Ç—Ä–∞–∫', price: 0, meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: 1, weight: '200–º–ª', recipe_number: '1/3', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 4, name: '–Ø–±–ª–æ–∫–æ', description: '–Ø–±–ª–æ–∫–æ - –î–µ–Ω—å 1 - –∑–∞–≤—Ç—Ä–∞–∫', price: 0, meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: 1, weight: '100–≥', recipe_number: '1/4', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 5, name: '–•–ª–µ–±', description: '–•–ª–µ–± - –î–µ–Ω—å 1 - –∑–∞–≤—Ç—Ä–∞–∫', price: 0, meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: 1, weight: '50–≥', recipe_number: '1/5', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    
    // –û–±–µ–¥
    { id: 6, name: '–°—É–ø –æ–≤–æ—â–Ω–æ–π', description: '–°—É–ø –æ–≤–æ—â–Ω–æ–π - –î–µ–Ω—å 1 - –æ–±–µ–¥', price: 0, meal_type: '–æ–±–µ–¥', day_of_week: 1, weight: '250–≥', recipe_number: '2/1', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 7, name: '–ö–æ—Ç–ª–µ—Ç–∞ –º—è—Å–Ω–∞—è', description: '–ö–æ—Ç–ª–µ—Ç–∞ –º—è—Å–Ω–∞—è - –î–µ–Ω—å 1 - –æ–±–µ–¥', price: 0, meal_type: '–æ–±–µ–¥', day_of_week: 1, weight: '100–≥', recipe_number: '2/2', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 8, name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ', description: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ - –î–µ–Ω—å 1 - –æ–±–µ–¥', price: 0, meal_type: '–æ–±–µ–¥', day_of_week: 1, weight: '150–≥', recipe_number: '2/3', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 9, name: '–ö–æ–º–ø–æ—Ç –∏–∑ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–æ–≤', description: '–ö–æ–º–ø–æ—Ç –∏–∑ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–æ–≤ - –î–µ–Ω—å 1 - –æ–±–µ–¥', price: 0, meal_type: '–æ–±–µ–¥', day_of_week: 1, weight: '200–º–ª', recipe_number: '2/4', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 10, name: '–•–ª–µ–±', description: '–•–ª–µ–± - –î–µ–Ω—å 1 - –æ–±–µ–¥', price: 0, meal_type: '–æ–±–µ–¥', day_of_week: 1, weight: '50–≥', recipe_number: '2/5', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    
    // –ü–æ–ª–¥–Ω–∏–∫
    { id: 11, name: '–ü–µ—á–µ–Ω—å–µ', description: '–ü–µ—á–µ–Ω—å–µ - –î–µ–Ω—å 1 - –ø–æ–ª–¥–Ω–∏–∫', price: 0, meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: 1, weight: '50–≥', recipe_number: '3/1', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 12, name: '–ú–æ–ª–æ–∫–æ', description: '–ú–æ–ª–æ–∫–æ - –î–µ–Ω—å 1 - –ø–æ–ª–¥–Ω–∏–∫', price: 0, meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: 1, weight: '200–º–ª', recipe_number: '3/2', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 13, name: '–ë–∞–Ω–∞–Ω', description: '–ë–∞–Ω–∞–Ω - –î–µ–Ω—å 1 - –ø–æ–ª–¥–Ω–∏–∫', price: 0, meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: 1, weight: '100–≥', recipe_number: '3/3', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 14, name: '–ô–æ–≥—É—Ä—Ç', description: '–ô–æ–≥—É—Ä—Ç - –î–µ–Ω—å 1 - –ø–æ–ª–¥–Ω–∏–∫', price: 0, meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: 1, weight: '125–≥', recipe_number: '3/4', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 15, name: '–°–æ–∫ —è–±–ª–æ—á–Ω—ã–π', description: '–°–æ–∫ —è–±–ª–æ—á–Ω—ã–π - –î–µ–Ω—å 1 - –ø–æ–ª–¥–Ω–∏–∫', price: 0, meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: 1, weight: '200–º–ª', recipe_number: '3/5', created_at: new Date().toISOString(), updated_at: new Date().toISOString() }
];

// –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let usersData = [
    {
        id: 1,
        email: 'director@topit.test',
        name: '–î–∏—Ä–µ–∫—Ç–æ—Ä TOP IT –î–µ–≥—É–Ω–∏–Ω–æ',
        role: 'DIRECTOR',
        school_id: 1,
        verified: true,
        created_at: '2025-10-07T10:00:00Z'
    }
];

// –î–∞–Ω–Ω—ã–µ —à–∫–æ–ª—ã
let schoolData = {
    id: 1,
    name: 'TOP IT –î–µ–≥—É–Ω–∏–Ω–æ',
    address: '–≥. –ú–æ—Å–∫–≤–∞, –î–µ–≥—É–Ω–∏–Ω–æ',
    director_id: 1
};

const server = http.createServer((req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, DELETE, PUT, PATCH, HEAD');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin, Cache-Control, Pragma');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.setHeader('Access-Control-Max-Age', '86400');

    const url = new URL(req.url, `http://${req.headers.host}`);

    // OPTIONS –∑–∞–ø—Ä–æ—Å—ã
    if (req.method === 'OPTIONS') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify({ status: 'OK', message: 'CORS preflight successful' }));
      return;
    }
    
    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (url.pathname === '/' && req.method === 'GET') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify({
            status: 'OK',
            message: 'Railway Server WORKING v29.7.0 - EXCEL PARSER ADDED!',
            dishCount: menuData.length,
            userCount: usersData.length,
            encoding: 'UTF-8',
            corsFixed: true,
            workingVersion: true,
            time: new Date().toISOString()
        }, null, 2));
    } 
    // –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é
    else if (url.pathname === '/api/menu' && req.method === 'GET') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify(menuData, null, 2));
    }
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    else if (url.pathname === '/api/auth/me.php' && req.method === 'GET') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify({
            success: true,
        user: {
                id: 1,
                email: 'director@topit.test',
                name: '–î–∏—Ä–µ–∫—Ç–æ—Ä TOP IT –î–µ–≥—É–Ω–∏–Ω–æ',
                role: 'DIRECTOR',
                school_id: 1,
                verified: true
            }
        }, null, 2));
    }
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∫–æ–ª–µ
    else if (url.pathname === '/api/school/1.php' && req.method === 'GET') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify(schoolData, null, 2));
    }
    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —à–∫–æ–ª—ã
    else if (url.pathname === '/api/users.php' && req.method === 'GET') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify(usersData, null, 2));
    }
    // –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else if (url.pathname === '/api/users.php' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            try {
                const userData = JSON.parse(body);
                const newUser = {
                    id: usersData.length + 1,
                    email: userData.email,
                    name: userData.name,
                    role: userData.role || 'PARENT',
                    school_id: userData.school_id || 1,
                    verified: false,
                    created_at: new Date().toISOString()
                };
                usersData.push(newUser);
                
                res.writeHead(201, {
                    'Content-Type': 'application/json; charset=utf-8'
                });
                res.end(JSON.stringify(newUser, null, 2));
  } catch (error) {
                res.writeHead(400, {
                    'Content-Type': 'application/json; charset=utf-8'
                });
                res.end(JSON.stringify({ error: 'Invalid JSON' }, null, 2));
            }
        });
    }
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é –∏–∑ —Ñ–∞–π–ª–∞
    else if (url.pathname === '/api/menu/upload.php' && req.method === 'POST') {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ–º 75 –±–ª—é–¥ (15 –±–ª—é–¥ * 5 –¥–Ω–µ–π)
        const dishes = [
            // –ó–∞–≤—Ç—Ä–∞–∫
            '–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è', '–ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –º–∞—Å–ª–æ–º', '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º', '–Ø–±–ª–æ–∫–æ', '–•–ª–µ–±',
            // –û–±–µ–¥  
            '–°—É–ø –æ–≤–æ—â–Ω–æ–π', '–ö–æ—Ç–ª–µ—Ç–∞ –º—è—Å–Ω–∞—è', '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ', '–ö–æ–º–ø–æ—Ç –∏–∑ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–æ–≤', '–•–ª–µ–±',
            // –ü–æ–ª–¥–Ω–∏–∫
            '–ü–µ—á–µ–Ω—å–µ', '–ú–æ–ª–æ–∫–æ', '–ë–∞–Ω–∞–Ω', '–ô–æ–≥—É—Ä—Ç', '–°–æ–∫ —è–±–ª–æ—á–Ω—ã–π'
        ];
        
        const mealTypes = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫'];
        const weights = ['200–≥', '80–≥', '200–º–ª', '100–≥', '50–≥', '250–≥', '100–≥', '150–≥', '200–º–ª', '50–≥', '50–≥', '200–º–ª', '100–≥', '125–≥', '200–º–ª'];
        const recipes = ['1/1', '1/2', '1/3', '1/4', '1/5', '2/1', '2/2', '2/3', '2/4', '2/5', '3/1', '3/2', '3/3', '3/4', '3/5'];
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
        menuData = [];
        
        // –°–æ–∑–¥–∞–µ–º 75 –±–ª—é–¥ (15 –±–ª—é–¥ * 5 –¥–Ω–µ–π)
        let id = 1;
        for (let day = 1; day <= 5; day++) {
            for (let i = 0; i < dishes.length; i++) {
                const dish = dishes[i];
                const mealType = mealTypes[Math.floor(i / 5)];
                const weight = weights[i];
                const recipe = recipes[i];
                
                menuData.push({
                    id: id++,
                    name: dish,
                    description: `${dish} - –î–µ–Ω—å ${day} - ${mealType}`,
                    price: 0,
                    meal_type: mealType,
                    day_of_week: day,
                    weight: weight,
                    recipe_number: recipe,
                    created_at: new Date().toISOString(),
                    updated_at: new Date().toISOString()
                });
            }
        }
        
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify({
            success: true,
            message: '–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ',
            itemsCount: menuData.length,
            weekStart: new Date().toISOString().split('T')[0]
        }, null, 2));
    }
    // –û—á–∏—Å—Ç–∏—Ç—å –º–µ–Ω—é
    else if (url.pathname === '/api/menu/clear.php' && req.method === 'POST') {
        menuData = [];
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify({
            success: true,
            message: '–í—Å–µ –±–ª—é–¥–∞ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –º–µ–Ω—é',
            deletedCount: 0
        }, null, 2));
    }
    // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else if (url.pathname === '/api/orders' && req.method === 'GET') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify([], null, 2)); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤
    }
    // 404
    else {
        res.writeHead(404, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify({
            error: 'Not Found',
            path: url.pathname
        }, null, 2));
    }
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üöÄ Minimal Railway Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üçΩÔ∏è –ú–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${menuData.length} –±–ª—é–¥`);
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${usersData.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`üîß CORS –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
server.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
});

process.on('SIGTERM', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
        process.exit(0);
  });
});

process.on('SIGINT', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  });
});
