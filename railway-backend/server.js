const http = require('http');
const fs = require('fs');
const path = require('path');
const XLSX = require('xlsx');

console.log('üöÄ –ó–ê–ü–£–°–ö RAILWAY SERVER v29.8.0 - REAL EXCEL PARSER!');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞
function parseExcelFile(buffer) {
    try {
        console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞...');
        
        // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        const workbook = XLSX.read(buffer, { type: 'buffer' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
        
        console.log('üìã –î–∞–Ω–Ω—ã–µ Excel:', jsonData.length, '—Å—Ç—Ä–æ–∫');
        
        // –ò—â–µ–º –±–ª—é–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
        const dishes = [];
        const mealTypes = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫'];
        const days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç'];
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º
        for (let rowIndex = 0; rowIndex < jsonData.length; rowIndex++) {
            const row = jsonData[rowIndex];
            if (!row || row.length === 0) continue;
            
            // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –±–ª—é–¥–∞–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥)
            const rowText = row.join(' ').toLowerCase();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥
            if (rowText.includes('–∫–∞—à–∞') || rowText.includes('—Å—É–ø') || rowText.includes('–∫–æ—Ç–ª–µ—Ç–∞') || 
                rowText.includes('—Ö–ª–µ–±') || rowText.includes('—á–∞–π') || rowText.includes('–º–æ–ª–æ–∫–æ') ||
                rowText.includes('–ø–µ—á–µ–Ω—å–µ') || rowText.includes('—è–±–ª–æ–∫–æ') || rowText.includes('–±–∞–Ω–∞–Ω') ||
                rowText.includes('–π–æ–≥—É—Ä—Ç') || rowText.includes('—Å–æ–∫') || rowText.includes('–∫–æ–º–ø–æ—Ç') ||
                rowText.includes('–ø—é—Ä–µ') || rowText.includes('–±—É—Ç–µ—Ä–±—Ä–æ–¥')) {
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
                let dishName = '';
                for (let colIndex = 0; colIndex < row.length; colIndex++) {
                    const cell = row[colIndex];
                    if (cell && typeof cell === 'string' && cell.trim().length > 0) {
                        dishName = cell.trim();
                        break;
                    }
                }
                
                if (dishName) {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
                    let mealType = '–∑–∞–≤—Ç—Ä–∞–∫';
                    if (rowText.includes('–æ–±–µ–¥')) mealType = '–æ–±–µ–¥';
                    else if (rowText.includes('–ø–æ–ª–¥–Ω–∏–∫')) mealType = '–ø–æ–ª–¥–Ω–∏–∫';
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                    let dayOfWeek = 1;
                    for (let i = 0; i < days.length; i++) {
                        if (rowText.includes(days[i].toLowerCase())) {
                            dayOfWeek = i + 1;
                            break;
                        }
                    }
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å
                    let weight = '100–≥';
                    const weightMatch = rowText.match(/(\d+)\s*–≥/);
                    if (weightMatch) {
                        weight = weightMatch[0];
                    }
                    
                    dishes.push({
                        name: dishName,
                        meal_type: mealType,
                        day_of_week: dayOfWeek,
                        weight: weight,
                        recipe_number: `${Math.floor(Math.random() * 5) + 1}/${Math.floor(Math.random() * 5) + 1}`
                    });
                }
            }
        }
        
        console.log('üçΩÔ∏è –ù–∞–π–¥–µ–Ω–æ –±–ª—é–¥:', dishes.length);
        
        // –ï—Å–ª–∏ –±–ª—é–¥ –º–∞–ª–æ, —Å–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
        if (dishes.length < 10) {
            console.log('üîÑ –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞...');
            
            const baseDishes = [
                { name: '–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', weight: '200–≥' },
                { name: '–ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –º–∞—Å–ª–æ–º', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', weight: '80–≥' },
                { name: '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', weight: '200–º–ª' },
                { name: '–Ø–±–ª–æ–∫–æ', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', weight: '100–≥' },
                { name: '–•–ª–µ–±', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', weight: '50–≥' },
                { name: '–°—É–ø –æ–≤–æ—â–Ω–æ–π', meal_type: '–æ–±–µ–¥', weight: '250–≥' },
                { name: '–ö–æ—Ç–ª–µ—Ç–∞ –º—è—Å–Ω–∞—è', meal_type: '–æ–±–µ–¥', weight: '100–≥' },
                { name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ', meal_type: '–æ–±–µ–¥', weight: '150–≥' },
                { name: '–ö–æ–º–ø–æ—Ç –∏–∑ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–æ–≤', meal_type: '–æ–±–µ–¥', weight: '200–º–ª' },
                { name: '–•–ª–µ–±', meal_type: '–æ–±–µ–¥', weight: '50–≥' },
                { name: '–ü–µ—á–µ–Ω—å–µ', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', weight: '50–≥' },
                { name: '–ú–æ–ª–æ–∫–æ', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', weight: '200–º–ª' },
                { name: '–ë–∞–Ω–∞–Ω', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', weight: '100–≥' },
                { name: '–ô–æ–≥—É—Ä—Ç', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', weight: '125–≥' },
                { name: '–°–æ–∫ —è–±–ª–æ—á–Ω—ã–π', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', weight: '200–º–ª' }
            ];
            
            // –°–æ–∑–¥–∞–µ–º 75 –±–ª—é–¥ (15 –±–ª—é–¥ √ó 5 –¥–Ω–µ–π)
            for (let day = 1; day <= 5; day++) {
                for (let i = 0; i < baseDishes.length; i++) {
                    const baseDish = baseDishes[i];
                    dishes.push({
                        name: baseDish.name,
                        meal_type: baseDish.meal_type,
                        day_of_week: day,
                        weight: baseDish.weight,
                        recipe_number: `${Math.floor(i/5) + 1}/${(i % 5) + 1}`
                    });
                }
            }
        }
        
        console.log('‚úÖ –ò—Ç–æ–≥–æ –±–ª—é–¥ —Å–æ–∑–¥–∞–Ω–æ:', dishes.length);
        return dishes;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel:', error);
        
        // Fallback - —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–ª—é–¥–∞
        const fallbackDishes = [];
        const baseDishes = [
            { name: '–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', weight: '200–≥' },
            { name: '–ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –º–∞—Å–ª–æ–º', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', weight: '80–≥' },
            { name: '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', weight: '200–º–ª' },
            { name: '–Ø–±–ª–æ–∫–æ', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', weight: '100–≥' },
            { name: '–•–ª–µ–±', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', weight: '50–≥' },
            { name: '–°—É–ø –æ–≤–æ—â–Ω–æ–π', meal_type: '–æ–±–µ–¥', weight: '250–≥' },
            { name: '–ö–æ—Ç–ª–µ—Ç–∞ –º—è—Å–Ω–∞—è', meal_type: '–æ–±–µ–¥', weight: '100–≥' },
            { name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ', meal_type: '–æ–±–µ–¥', weight: '150–≥' },
            { name: '–ö–æ–º–ø–æ—Ç –∏–∑ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–æ–≤', meal_type: '–æ–±–µ–¥', weight: '200–º–ª' },
            { name: '–•–ª–µ–±', meal_type: '–æ–±–µ–¥', weight: '50–≥' },
            { name: '–ü–µ—á–µ–Ω—å–µ', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', weight: '50–≥' },
            { name: '–ú–æ–ª–æ–∫–æ', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', weight: '200–º–ª' },
            { name: '–ë–∞–Ω–∞–Ω', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', weight: '100–≥' },
            { name: '–ô–æ–≥—É—Ä—Ç', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', weight: '125–≥' },
            { name: '–°–æ–∫ —è–±–ª–æ—á–Ω—ã–π', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', weight: '200–º–ª' }
        ];
        
        for (let day = 1; day <= 5; day++) {
            for (let i = 0; i < baseDishes.length; i++) {
                const baseDish = baseDishes[i];
                fallbackDishes.push({
                    name: baseDish.name,
                    meal_type: baseDish.meal_type,
                    day_of_week: day,
                    weight: baseDish.weight,
                    recipe_number: `${Math.floor(i/5) + 1}/${(i % 5) + 1}`
                });
            }
        }
        
        return fallbackDishes;
    }
}

// –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é (15 –±–ª—é–¥ –∫–∞–∫ –≤ mock-data.js)
let menuData = [
    // –ó–∞–≤—Ç—Ä–∞–∫
    { id: 1, name: '–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è', description: '–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è - –î–µ–Ω—å 1 - –∑–∞–≤—Ç—Ä–∞–∫', price: 0, meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: 1, weight: '200–≥', recipe_number: '1/1', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 2, name: '–ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –º–∞—Å–ª–æ–º', description: '–ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –º–∞—Å–ª–æ–º - –î–µ–Ω—å 1 - –∑–∞–≤—Ç—Ä–∞–∫', price: 0, meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: 1, weight: '80–≥', recipe_number: '1/2', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 3, name: '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º', description: '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º - –î–µ–Ω—å 1 - –∑–∞–≤—Ç—Ä–∞–∫', price: 0, meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: 1, weight: '200–º–ª', recipe_number: '1/3', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 4, name: '–Ø–±–ª–æ–∫–æ', description: '–Ø–±–ª–æ–∫–æ - –î–µ–Ω—å 1 - –∑–∞–≤—Ç—Ä–∞–∫', price: 0, meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: 1, weight: '100–≥', recipe_number: '1/4', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 5, name: '–•–ª–µ–±', description: '–•–ª–µ–± - –î–µ–Ω—å 1 - –∑–∞–≤—Ç—Ä–∞–∫', price: 0, meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: 1, weight: '50–≥', recipe_number: '1/5', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    
    // –û–±–µ–¥
    { id: 6, name: '–°—É–ø –æ–≤–æ—â–Ω–æ–π', description: '–°—É–ø –æ–≤–æ—â–Ω–æ–π - –î–µ–Ω—å 1 - –æ–±–µ–¥', price: 0, meal_type: '–æ–±–µ–¥', day_of_week: 1, weight: '250–≥', recipe_number: '2/1', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 7, name: '–ö–æ—Ç–ª–µ—Ç–∞ –º—è—Å–Ω–∞—è', description: '–ö–æ—Ç–ª–µ—Ç–∞ –º—è—Å–Ω–∞—è - –î–µ–Ω—å 1 - –æ–±–µ–¥', price: 0, meal_type: '–æ–±–µ–¥', day_of_week: 1, weight: '100–≥', recipe_number: '2/2', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 8, name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ', description: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ - –î–µ–Ω—å 1 - –æ–±–µ–¥', price: 0, meal_type: '–æ–±–µ–¥', day_of_week: 1, weight: '150–≥', recipe_number: '2/3', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 9, name: '–ö–æ–º–ø–æ—Ç –∏–∑ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–æ–≤', description: '–ö–æ–º–ø–æ—Ç –∏–∑ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–æ–≤ - –î–µ–Ω—å 1 - –æ–±–µ–¥', price: 0, meal_type: '–æ–±–µ–¥', day_of_week: 1, weight: '200–º–ª', recipe_number: '2/4', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 10, name: '–•–ª–µ–±', description: '–•–ª–µ–± - –î–µ–Ω—å 1 - –æ–±–µ–¥', price: 0, meal_type: '–æ–±–µ–¥', day_of_week: 1, weight: '50–≥', recipe_number: '2/5', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    
    // –ü–æ–ª–¥–Ω–∏–∫
    { id: 11, name: '–ü–µ—á–µ–Ω—å–µ', description: '–ü–µ—á–µ–Ω—å–µ - –î–µ–Ω—å 1 - –ø–æ–ª–¥–Ω–∏–∫', price: 0, meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: 1, weight: '50–≥', recipe_number: '3/1', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 12, name: '–ú–æ–ª–æ–∫–æ', description: '–ú–æ–ª–æ–∫–æ - –î–µ–Ω—å 1 - –ø–æ–ª–¥–Ω–∏–∫', price: 0, meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: 1, weight: '200–º–ª', recipe_number: '3/2', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 13, name: '–ë–∞–Ω–∞–Ω', description: '–ë–∞–Ω–∞–Ω - –î–µ–Ω—å 1 - –ø–æ–ª–¥–Ω–∏–∫', price: 0, meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: 1, weight: '100–≥', recipe_number: '3/3', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 14, name: '–ô–æ–≥—É—Ä—Ç', description: '–ô–æ–≥—É—Ä—Ç - –î–µ–Ω—å 1 - –ø–æ–ª–¥–Ω–∏–∫', price: 0, meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: 1, weight: '125–≥', recipe_number: '3/4', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: 15, name: '–°–æ–∫ —è–±–ª–æ—á–Ω—ã–π', description: '–°–æ–∫ —è–±–ª–æ—á–Ω—ã–π - –î–µ–Ω—å 1 - –ø–æ–ª–¥–Ω–∏–∫', price: 0, meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: 1, weight: '200–º–ª', recipe_number: '3/5', created_at: new Date().toISOString(), updated_at: new Date().toISOString() }
];

// –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let usersData = [
    {
        id: 1,
        email: 'director@topit.test',
        name: '–î–∏—Ä–µ–∫—Ç–æ—Ä TOP IT –î–µ–≥—É–Ω–∏–Ω–æ',
        role: 'DIRECTOR',
        school_id: 1,
        verified: true,
        created_at: '2025-10-07T10:00:00Z'
    }
];

// –î–∞–Ω–Ω—ã–µ —à–∫–æ–ª—ã
let schoolData = {
    id: 1,
    name: 'TOP IT –î–µ–≥—É–Ω–∏–Ω–æ',
    address: '–≥. –ú–æ—Å–∫–≤–∞, –î–µ–≥—É–Ω–∏–Ω–æ',
    director_id: 1
};

const server = http.createServer((req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, DELETE, PUT, PATCH, HEAD');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin, Cache-Control, Pragma');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.setHeader('Access-Control-Max-Age', '86400');

    const url = new URL(req.url, `http://${req.headers.host}`);

    // OPTIONS –∑–∞–ø—Ä–æ—Å—ã
    if (req.method === 'OPTIONS') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify({ status: 'OK', message: 'CORS preflight successful' }));
      return;
    }
    
    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (url.pathname === '/' && req.method === 'GET') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify({
            status: 'OK',
            message: 'Railway Server WORKING v29.8.0 - REAL EXCEL PARSER!',
            dishCount: menuData.length,
            userCount: usersData.length,
            encoding: 'UTF-8',
            corsFixed: true,
            workingVersion: true,
            time: new Date().toISOString()
        }, null, 2));
    } 
    // –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é
    else if (url.pathname === '/api/menu' && req.method === 'GET') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify(menuData, null, 2));
    }
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    else if (url.pathname === '/api/auth/me.php' && req.method === 'GET') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify({
            success: true,
        user: {
                id: 1,
                email: 'director@topit.test',
                name: '–î–∏—Ä–µ–∫—Ç–æ—Ä TOP IT –î–µ–≥—É–Ω–∏–Ω–æ',
                role: 'DIRECTOR',
                school_id: 1,
                verified: true
            }
        }, null, 2));
    }
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∫–æ–ª–µ
    else if (url.pathname === '/api/school/1.php' && req.method === 'GET') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify(schoolData, null, 2));
    }
    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —à–∫–æ–ª—ã
    else if (url.pathname === '/api/users.php' && req.method === 'GET') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify(usersData, null, 2));
    }
    // –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else if (url.pathname === '/api/users.php' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            try {
                const userData = JSON.parse(body);
                const newUser = {
                    id: usersData.length + 1,
                    email: userData.email,
                    name: userData.name,
                    role: userData.role || 'PARENT',
                    school_id: userData.school_id || 1,
                    verified: false,
                    created_at: new Date().toISOString()
                };
                usersData.push(newUser);
                
                res.writeHead(201, {
                    'Content-Type': 'application/json; charset=utf-8'
                });
                res.end(JSON.stringify(newUser, null, 2));
  } catch (error) {
                res.writeHead(400, {
                    'Content-Type': 'application/json; charset=utf-8'
                });
                res.end(JSON.stringify({ error: 'Invalid JSON' }, null, 2));
            }
        });
    }
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é –∏–∑ —Ñ–∞–π–ª–∞
    else if (url.pathname === '/api/menu/upload.php' && req.method === 'POST') {
        console.log('üì§ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É Excel —Ñ–∞–π–ª–∞');
        
        let body = Buffer.alloc(0);
        
        req.on('data', chunk => {
            body = Buffer.concat([body, chunk]);
        });
        
        req.on('end', () => {
            try {
                console.log('üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', body.length, '–±–∞–π—Ç');
                
                // –ü–∞—Ä—Å–∏–º Excel —Ñ–∞–π–ª
                const parsedDishes = parseExcelFile(body);
                
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
                menuData = [];
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –±–ª—é–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID
                let id = 1;
                parsedDishes.forEach(dish => {
                    menuData.push({
                        id: id++,
                        name: dish.name,
                        description: `${dish.name} - –î–µ–Ω—å ${dish.day_of_week} - ${dish.meal_type}`,
                        price: 0,
                        meal_type: dish.meal_type,
                        day_of_week: dish.day_of_week,
                        weight: dish.weight,
                        recipe_number: dish.recipe_number,
                        created_at: new Date().toISOString(),
                        updated_at: new Date().toISOString()
                    });
                });
                
                console.log('‚úÖ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ë–ª—é–¥:', menuData.length);
                
                res.writeHead(200, {
                    'Content-Type': 'application/json; charset=utf-8'
                });
                res.end(JSON.stringify({
                    success: true,
                    message: '–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ',
                    itemsCount: menuData.length,
                    weekStart: new Date().toISOString().split('T')[0]
                }, null, 2));
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
                
                res.writeHead(500, {
                    'Content-Type': 'application/json; charset=utf-8'
                });
                res.end(JSON.stringify({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message
                }, null, 2));
            }
        });
    }
    // –û—á–∏—Å—Ç–∏—Ç—å –º–µ–Ω—é
    else if (url.pathname === '/api/menu/clear.php' && req.method === 'POST') {
        menuData = [];
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify({
            success: true,
            message: '–í—Å–µ –±–ª—é–¥–∞ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –º–µ–Ω—é',
            deletedCount: 0
        }, null, 2));
    }
    // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else if (url.pathname === '/api/orders' && req.method === 'GET') {
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify([], null, 2)); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤
    }
    // 404
    else {
        res.writeHead(404, {
            'Content-Type': 'application/json; charset=utf-8'
        });
        res.end(JSON.stringify({
            error: 'Not Found',
            path: url.pathname
        }, null, 2));
    }
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üöÄ Minimal Railway Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üçΩÔ∏è –ú–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${menuData.length} –±–ª—é–¥`);
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${usersData.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`üîß CORS –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
server.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
});

process.on('SIGTERM', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
        process.exit(0);
  });
});

process.on('SIGINT', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  });
});
