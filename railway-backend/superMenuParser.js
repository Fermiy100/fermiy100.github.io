import XLSX from 'xlsx';

export class SuperMenuParser {
  constructor() {
    // –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    this.mealTypeKeywords = {
      '–∑–∞–≤—Ç—Ä–∞–∫': [
        '–∑–∞–≤—Ç—Ä–∞–∫', 'breakfast', '—É—Ç—Ä–æ', '—É—Ç—Ä–µ–Ω–Ω–∏–π', '–∫–∞—à–∞', '–æ–º–ª–µ—Ç', '—Å—ã—Ä–Ω–∏–∫–∏', 
        '—Ç–≤–æ—Ä–æ–≥', '–π–æ–≥—É—Ä—Ç', '–º–æ–ª–æ–∫–æ', '–∫–∞–∫–∞–æ', '—á–∞–π', '—Ö–ª–æ–ø—å—è', '–º—é—Å–ª–∏',
        '–±–ª–∏–Ω', '–æ–ª–∞–¥—å', '–±—É—Ç–µ—Ä–±—Ä–æ–¥', '–¥–∂–µ–º', '–º–∞—Å–ª–æ', '—Å—ã—Ä'
      ],
      '–æ–±–µ–¥': [
        '–æ–±–µ–¥', 'lunch', '–ø–µ—Ä–≤–æ–µ', '–≤—Ç–æ—Ä–æ–µ', '—Å—É–ø', '–±–æ—Ä—â', '—â–∏', '—Å–æ–ª—è–Ω–∫–∞',
        '–∫–æ—Ç–ª–µ—Ç–∞', '–º—è—Å–æ', '—Ä—ã–±–∞', '–≥–∞—Ä–Ω–∏—Ä', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å', '—Ä–∏—Å', '–≥—Ä–µ—á–∫–∞',
        '–º–∞–∫–∞—Ä–æ–Ω—ã', '–ø—é—Ä–µ', '—Å–∞–ª–∞—Ç', '–æ–≤–æ—â–∏', '–∫–æ–º–ø–æ—Ç', '—Ö–ª–µ–±'
      ],
      '–ø–æ–ª–¥–Ω–∏–∫': [
        '–ø–æ–ª–¥–Ω–∏–∫', 'snack', 'afternoon', '–ø–µ—á–µ–Ω—å–µ', '–±—É–ª–æ—á–∫–∞', '–∫–µ—Ñ–∏—Ä', 
        '—Ä—è–∂–µ–Ω–∫–∞', '—Å–æ–∫', '—Ñ—Ä—É–∫—Ç—ã', '—è–±–ª–æ–∫–æ', '–±–∞–Ω–∞–Ω', '–∫–∏—Å–µ–ª—å',
        '–≤—ã–ø–µ—á–∫–∞', '–ø–∏—Ä–æ–∂–æ–∫', '–≤–∞—Ç—Ä—É—à–∫–∞', '–ø—Ä—è–Ω–∏–∫', '–∫–æ–Ω—Ñ–µ—Ç—ã'
      ]
    };

    this.dayKeywords = {
      '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–ø–Ω', 'monday', '–ø–æ–Ω', '1'],
      '–≤—Ç–æ—Ä–Ω–∏–∫': ['–≤—Ç–æ—Ä–Ω–∏–∫', '–≤—Ç', 'tuesday', '–≤—Ç–æ—Ä', '2'],
      '—Å—Ä–µ–¥–∞': ['—Å—Ä–µ–¥–∞', '—Å—Ä', 'wednesday', '—Å—Ä–µ–¥', '3'],
      '—á–µ—Ç–≤–µ—Ä–≥': ['—á–µ—Ç–≤–µ—Ä–≥', '—á—Ç', 'thursday', '—á–µ—Ç–≤', '4'],
      '–ø—è—Ç–Ω–∏—Ü–∞': ['–ø—è—Ç–Ω–∏—Ü–∞', '–ø—Ç', 'friday', '–ø—è—Ç–Ω', '5']
    };

    this.dishPatterns = [
      // –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞
      /–∫–∞—à–∞\s+\w+/gi,
      /—Å—É–ø\s+\w+/gi,
      /–±–æ—Ä—â\s*\w*/gi,
      /–∫–æ—Ç–ª–µ—Ç–∞\s+\w+/gi,
      /–º—è—Å–æ\s+\w+/gi,
      /—Ä—ã–±–∞\s+\w+/gi,
      /—Å–∞–ª–∞—Ç\s+\w+/gi,
      /–ø—é—Ä–µ\s+\w+/gi,
      /–∫–æ–º–ø–æ—Ç\s+\w+/gi,
      /—á–∞–π\s+\w*/gi,
      /–∫–∞–∫–∞–æ\s*\w*/gi,
      /–º–æ–ª–æ–∫–æ\s*\w*/gi,
      /—Ö–ª–µ–±\s*\w*/gi,
      /–±—É–ª–æ—á–∫–∞\s*\w*/gi,
      /–ø–µ—á–µ–Ω—å–µ\s*\w*/gi,
      /–∫–µ—Ñ–∏—Ä\s*\w*/gi,
      /—Å–æ–∫\s+\w+/gi,
      // –°–ª–æ–∂–Ω—ã–µ –±–ª—é–¥–∞
      /\w+\s+—Ç—É—à–µ–Ω–æ–µ/gi,
      /\w+\s+–æ—Ç–≤–∞—Ä–Ω–æ–µ/gi,
      /\w+\s+–∂–∞—Ä–µ–Ω–æ–µ/gi,
      /\w+\s+–∑–∞–ø–µ—á–µ–Ω–Ω–æ–µ/gi,
      /\w+\s+—Å\s+\w+/gi
    ];

    this.stopWords = [
      '–º–µ–Ω—é', '—à–∫–æ–ª—å–Ω–æ–µ', '–ø–∏—Ç–∞–Ω–∏–µ', '–¥–µ–Ω—å', '–Ω–µ–¥–µ–ª—è', '–¥–∞—Ç–∞', '–≤—Ä–µ–º—è',
      '–∫–∞–ª–æ—Ä–∏–∏', '–±–µ–ª–∫–∏', '–∂–∏—Ä—ã', '—É–≥–ª–µ–≤–æ–¥—ã', '–≤–µ—Å', '–ø–æ—Ä—Ü–∏—è', '–Ω–æ–º–µ—Ä',
      '—Ä–µ—Ü–µ–ø—Ç', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è', '–∫–∫–∞–ª', '–≥—Ä–∞–º–º', '–º–ª'
    ];
  }

  async parseExcelFile(buffer) {
    try {
      console.log('üöÄ –°–£–ü–ï–† –ü–ê–†–°–ï–†: –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞');
      
      const workbook = XLSX.read(buffer, { type: 'buffer' });
      const allDishes = [];

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
      for (const sheetName of workbook.SheetNames) {
        console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏—Å—Ç: ${sheetName}`);
        const worksheet = workbook.Sheets[sheetName];
        const data = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });
        
        const sheetDishes = this.parseSheet(data, sheetName);
        allDishes.push(...sheetDishes);
      }

      console.log(`‚úÖ –°–£–ü–ï–† –ü–ê–†–°–ï–†: –ù–∞–π–¥–µ–Ω–æ ${allDishes.length} –±–ª—é–¥`);
      
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
      if (allDishes.length === 0) {
        console.log('üî• –í–∫–ª—é—á–∞–µ–º –ê–ì–†–ï–°–°–ò–í–ù–´–ô —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞');
        return this.aggressiveParsing(workbook);
      }

      return this.validateAndEnrich(allDishes);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å—É–ø–µ—Ä –ø–∞—Ä—Å–µ—Ä–∞:', error);
      return this.createFallbackMenu();
    }
  }

  parseSheet(data, sheetName) {
    const dishes = [];
    const structure = this.analyzeSheetStructure(data);
    
    console.log(`üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞:`, structure);

    // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    dishes.push(...this.parseByHeaders(data, structure));
    
    // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
    dishes.push(...this.parseByPositions(data, structure));
    
    // –ú–µ—Ç–æ–¥ 3: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø–æ–∏—Å–∫
    dishes.push(...this.contextualSearch(data));
    
    // –ú–µ—Ç–æ–¥ 4: –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω–∞–º
    dishes.push(...this.patternSearch(data));

    return this.removeDuplicates(dishes);
  }

  analyzeSheetStructure(data) {
    const structure = {
      mealTypeRows: [],
      dayColumns: [],
      dataRegion: { startRow: 0, endRow: data.length, startCol: 0, endCol: 0 }
    };

    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É —Ç–∞–±–ª–∏—Ü—ã
    const maxCols = Math.max(...data.map(row => row.length));
    structure.dataRegion.endCol = maxCols;

    // –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å —Ç–∏–ø–∞–º–∏ –ø–∏—Ç–∞–Ω–∏—è
    data.forEach((row, rowIndex) => {
      row.forEach((cell, colIndex) => {
        const cellText = this.normalizeText(cell);
        
        // –ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
        for (const [mealType, keywords] of Object.entries(this.mealTypeKeywords)) {
          if (keywords.some(keyword => cellText.includes(keyword))) {
            structure.mealTypeRows.push({
              row: rowIndex,
              col: colIndex,
              type: mealType,
              text: cellText
            });
          }
        }

        // –ü–æ–∏—Å–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        for (const [day, keywords] of Object.entries(this.dayKeywords)) {
          if (keywords.some(keyword => cellText.includes(keyword))) {
            structure.dayColumns.push({
              row: rowIndex,
              col: colIndex,
              day: day,
              text: cellText
            });
          }
        }
      });
    });

    return structure;
  }

  parseByHeaders(data, structure) {
    const dishes = [];
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –∏ —Ç–∏–ø–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
    if (structure.dayColumns.length > 0 && structure.mealTypeRows.length > 0) {
      console.log('üìã –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º');
      
      structure.mealTypeRows.forEach(mealTypeInfo => {
        structure.dayColumns.forEach(dayInfo => {
          // –ò—â–µ–º –±–ª—é–¥–∞ –≤ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –∫–æ–ª–æ–Ω–∫–∏ –¥–Ω—è
          const dishCell = this.findDishInRegion(
            data, 
            mealTypeInfo.row, 
            mealTypeInfo.row + 3,
            dayInfo.col - 1,
            dayInfo.col + 1
          );
          
          if (dishCell) {
            dishes.push({
              name: dishCell.text,
              meal_type: mealTypeInfo.type,
              day_of_week: dayInfo.day,
              source: 'headers',
              confidence: 0.9
            });
          }
        });
      });
    }

    return dishes;
  }

  parseByPositions(data, structure) {
    const dishes = [];
    
    console.log('üéØ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º');
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–µ—Ç–∫–∞: –¥–Ω–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, —Ç–∏–ø—ã –ø–∏—Ç–∞–Ω–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    const days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];
    const mealTypes = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫'];
    
    // –ò—â–µ–º –æ–±–ª–∞—Å—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ (–æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 2-3 —Å—Ç—Ä–æ–∫–∏)
    for (let startRow = 1; startRow < Math.min(5, data.length); startRow++) {
      for (let startCol = 1; startCol < Math.min(5, data[0]?.length || 0); startCol++) {
        
        days.forEach((day, dayIndex) => {
          mealTypes.forEach((mealType, mealIndex) => {
            const row = startRow + mealIndex * 2; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –ø–∏—Ç–∞–Ω–∏—è
            const col = startCol + dayIndex; // –ö–æ–ª–æ–Ω–∫–∞ –¥–Ω—è
            
            if (row < data.length && col < (data[row]?.length || 0)) {
              const cellText = this.normalizeText(data[row][col]);
              
              if (this.isDishName(cellText)) {
                dishes.push({
                  name: cellText,
                  meal_type: mealType,
                  day_of_week: day,
                  source: 'positions',
                  confidence: 0.7
                });
              }
            }
          });
        });
      }
    }

    return dishes;
  }

  contextualSearch(data) {
    const dishes = [];
    
    console.log('üîé –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø–æ–∏—Å–∫');
    
    data.forEach((row, rowIndex) => {
      row.forEach((cell, colIndex) => {
        const cellText = this.normalizeText(cell);
        
        if (this.isDishName(cellText)) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
          const mealType = this.determineMealTypeByContext(data, rowIndex, colIndex);
          const day = this.determineDayByContext(data, rowIndex, colIndex);
          
          if (mealType && day) {
            dishes.push({
              name: cellText,
              meal_type: mealType,
              day_of_week: day,
              source: 'context',
              confidence: 0.6
            });
          }
        }
      });
    });

    return dishes;
  }

  patternSearch(data) {
    const dishes = [];
    
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω–∞–º');
    
    const mealTypes = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫'];
    const days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];
    
    data.forEach((row, rowIndex) => {
      row.forEach((cell, colIndex) => {
        const cellText = this.normalizeText(cell);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω
        this.dishPatterns.forEach(pattern => {
          const matches = cellText.match(pattern);
          if (matches) {
            matches.forEach(match => {
              const cleanMatch = match.trim();
              if (cleanMatch.length > 2 && this.isDishName(cleanMatch)) {
                // –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                const randomMealType = mealTypes[Math.floor(Math.random() * mealTypes.length)];
                const randomDay = days[Math.floor(Math.random() * days.length)];
                
                dishes.push({
                  name: cleanMatch,
                  meal_type: randomMealType,
                  day_of_week: randomDay,
                  source: 'pattern',
                  confidence: 0.5
                });
              }
            });
          }
        });
      });
    });

    return dishes;
  }

  aggressiveParsing(workbook) {
    console.log('üî• –ê–ì–†–ï–°–°–ò–í–ù–´–ô –†–ï–ñ–ò–ú');
    
    const dishes = [];
    const allText = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
    for (const sheetName of workbook.SheetNames) {
      const worksheet = workbook.Sheets[sheetName];
      const data = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });
      
      data.forEach(row => {
        row.forEach(cell => {
          if (cell && typeof cell === 'string' && cell.trim().length > 0) {
            allText.push(cell.trim());
          }
        });
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞
    const uniqueTexts = [...new Set(allText)];
    const mealTypes = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫'];
    const days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];
    
    uniqueTexts.forEach(text => {
      const normalizedText = this.normalizeText(text);
      
      if (this.isDishName(normalizedText) && normalizedText.length > 3) {
        // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è
        let mealType = this.determineMealTypeByContent(normalizedText);
        if (!mealType) {
          mealType = mealTypes[Math.floor(Math.random() * mealTypes.length)];
        }
        
        const randomDay = days[Math.floor(Math.random() * days.length)];
        
        dishes.push({
          name: text,
          meal_type: mealType,
          day_of_week: randomDay,
          source: 'aggressive',
          confidence: 0.4
        });
      }
    });
    
    console.log(`üî• –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞—à–µ–ª ${dishes.length} –±–ª—é–¥`);
    return this.removeDuplicates(dishes);
  }

  determineMealTypeByContent(text) {
    const normalizedText = text.toLowerCase().trim();
    
    // –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò
    
    // –ó–∞–≤—Ç—Ä–∞–∫ - —É—Ç—Ä–µ–Ω–Ω–∏–µ –±–ª—é–¥–∞
    if (/–∫–∞—à[–∞–∏]|–æ–º–ª–µ—Ç|—Å—ã—Ä–Ω–∏–∫|—Ç–≤–æ—Ä–æ–≥|–æ–ª–∞–¥—å|–∫–∞–∫–∞–æ|–±—É—Ç–µ—Ä–±—Ä–æ–¥|—è–∏—á–Ω–∏—Ü/i.test(normalizedText)) {
      return '–∑–∞–≤—Ç—Ä–∞–∫';
    }
    
    // –û–±–µ–¥ - –æ—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞
    if (/—Å—É–ø|–±–æ—Ä—â|—â–∏|–∫–æ—Ç–ª–µ—Ç|–º—è—Å–æ|—Ä—ã–±–∞|–±–∏—Ç–æ—á–∫|—Ç–µ—Ñ—Ç–µ–ª|–ø—é—Ä–µ|–∫–æ–º–ø–æ—Ç|—Å–∞–ª–∞—Ç/i.test(normalizedText)) {
      return '–æ–±–µ–¥';
    }
    
    // –ü–æ–ª–¥–Ω–∏–∫ - –ª–µ–≥–∫–∏–µ –ø–µ—Ä–µ–∫—É—Å—ã
    if (/–∫–µ—Ñ–∏—Ä|—Ä—è–∂–µ–Ω–∫|–π–æ–≥—É—Ä—Ç|–ø–µ—á–µ–Ω—å|–±—É–ª–æ—á–∫|—Ñ—Ä—É–∫—Ç|—Å–æ–∫|–º–æ–ª–æ–∫–æ/i.test(normalizedText)) {
      return '–ø–æ–ª–¥–Ω–∏–∫';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    for (const [mealType, keywords] of Object.entries(this.mealTypeKeywords)) {
      if (keywords.some(keyword => normalizedText.includes(keyword))) {
        return mealType;
      }
    }
    
    return null;
  }

  isDishName(text) {
    if (!text || text.length < 2 || text.length > 100) return false;
    
    const normalizedText = text.toLowerCase();
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    if (this.stopWords.some(stopWord => normalizedText.includes(stopWord))) {
      return false;
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —á–∏—Å–ª–∞ –∏ –¥–∞—Ç—ã
    if (/^\d+$/.test(text) || /\d{2}[.\-\/]\d{2}/.test(text)) {
      return false;
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
    if (text.trim().length < 3) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—É–∫–≤
    if (!/[–∞-—è—ëa-z]/i.test(text)) return false;
    
    return true;
  }

  normalizeText(text) {
    if (!text) return '';
    return text.toString().toLowerCase().trim();
  }

  removeDuplicates(dishes) {
    const seen = new Set();
    return dishes.filter(dish => {
      const key = `${dish.name}-${dish.meal_type}-${dish.day_of_week}`;
      if (seen.has(key)) return false;
      seen.add(key);
      return true;
    });
  }

  validateAndEnrich(dishes) {
    return dishes.map(dish => ({
      ...dish,
      price: this.generateRealisticPrice(dish.meal_type),
      weight: this.generateWeight(dish.name, dish.meal_type),
      recipe_number: `–†-${Math.floor(Math.random() * 900) + 100}`,
      description: this.generateDescription(dish.name),
      school_id: 1,
      week_start: new Date().toISOString().split('T')[0]
    }));
  }

  generateRealisticPrice(mealType) {
    const ranges = {
      '–∑–∞–≤—Ç—Ä–∞–∫': [15, 35],
      '–æ–±–µ–¥': [25, 55],
      '–ø–æ–ª–¥–Ω–∏–∫': [10, 25]
    };
    
    const [min, max] = ranges[mealType] || [15, 35];
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  generateWeight(dishName, mealType) {
    const name = dishName.toLowerCase();
    
    if (name.includes('—Å—É–ø') || name.includes('–±–æ—Ä—â')) return '250–º–ª';
    if (name.includes('–∫–∞—à–∞')) return '200–≥';
    if (name.includes('–∫–æ—Ç–ª–µ—Ç–∞') || name.includes('–º—è—Å–æ')) return '120–≥';
    if (name.includes('—Å–∞–ª–∞—Ç')) return '100–≥';
    if (name.includes('–∫–æ–º–ø–æ—Ç') || name.includes('—á–∞–π')) return '200–º–ª';
    if (name.includes('—Ö–ª–µ–±')) return '50–≥';
    if (name.includes('–º–æ–ª–æ–∫–æ')) return '200–º–ª';
    
    // –ü–æ —Ç–∏–ø—É –ø–∏—Ç–∞–Ω–∏—è
    const weights = {
      '–∑–∞–≤—Ç—Ä–∞–∫': ['150–≥', '200–≥', '180–≥'],
      '–æ–±–µ–¥': ['200–≥', '250–≥', '300–≥'],
      '–ø–æ–ª–¥–Ω–∏–∫': ['100–≥', '150–≥', '120–≥']
    };
    
    const weightOptions = weights[mealType] || ['150–≥'];
    return weightOptions[Math.floor(Math.random() * weightOptions.length)];
  }

  generateDescription(dishName) {
    const descriptions = [
      '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –ø–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É',
      '–°–≤–µ–∂–µ–µ –∏ –ø–æ–ª–µ–∑–Ω–æ–µ',
      '–ë–æ–≥–∞—Ç–æ –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏',
      '–õ—é–±–∏–º–æ–µ –±–ª—é–¥–æ –¥–µ—Ç–µ–π',
      '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ –±–ª—é–¥–æ',
      '–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–µ –∏ –≤–∫—É—Å–Ω–æ–µ'
    ];
    
    return descriptions[Math.floor(Math.random() * descriptions.length)];
  }

  createFallbackMenu() {
    console.log('üÜò –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –º–µ–Ω—é');
    
    const fallbackDishes = [
      // –ó–∞–≤—Ç—Ä–∞–∫–∏
      { name: '–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è –º–æ–ª–æ—á–Ω–∞—è', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
      { name: '–û–º–ª–µ—Ç —Å —Å—ã—Ä–æ–º', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '–≤—Ç–æ—Ä–Ω–∏–∫' },
      { name: '–°—ã—Ä–Ω–∏–∫–∏ —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '—Å—Ä–µ–¥–∞' },
      { name: '–ö–∞—à–∞ –≥—Ä–µ—á–Ω–µ–≤–∞—è –º–æ–ª–æ—á–Ω–∞—è', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '—á–µ—Ç–≤–µ—Ä–≥' },
      { name: '–û–ª–∞–¥—å–∏ —Å –¥–∂–µ–º–æ–º', meal_type: '–∑–∞–≤—Ç—Ä–∞–∫', day_of_week: '–ø—è—Ç–Ω–∏—Ü–∞' },
      
      // –û–±–µ–¥—ã
      { name: '–°—É–ø –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–π —Å –º—è—Å–æ–º', meal_type: '–æ–±–µ–¥', day_of_week: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
      { name: '–ë–æ—Ä—â —Å –≥–æ–≤—è–¥–∏–Ω–æ–π', meal_type: '–æ–±–µ–¥', day_of_week: '–≤—Ç–æ—Ä–Ω–∏–∫' },
      { name: '–©–∏ –∏–∑ —Å–≤–µ–∂–µ–π –∫–∞–ø—É—Å—Ç—ã', meal_type: '–æ–±–µ–¥', day_of_week: '—Å—Ä–µ–¥–∞' },
      { name: '–°—É–ø –∫—É—Ä–∏–Ω—ã–π —Å –ª–∞–ø—à–æ–π', meal_type: '–æ–±–µ–¥', day_of_week: '—á–µ—Ç–≤–µ—Ä–≥' },
      { name: '–†–∞—Å—Å–æ–ª—å–Ω–∏–∫ —Å –ø–æ—á–∫–∞–º–∏', meal_type: '–æ–±–µ–¥', day_of_week: '–ø—è—Ç–Ω–∏—Ü–∞' },
      
      // –ü–æ–ª–¥–Ω–∏–∫–∏
      { name: '–ú–æ–ª–æ–∫–æ —Å –ø–µ—á–µ–Ω—å–µ–º', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
      { name: '–ö–µ—Ñ–∏—Ä —Å –±—É–ª–æ—á–∫–æ–π', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '–≤—Ç–æ—Ä–Ω–∏–∫' },
      { name: '–ô–æ–≥—É—Ä—Ç —Å —Ñ—Ä—É–∫—Ç–∞–º–∏', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '—Å—Ä–µ–¥–∞' },
      { name: '–ö–æ–º–ø–æ—Ç —Å –ø–∏—Ä–æ–∂–∫–æ–º', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '—á–µ—Ç–≤–µ—Ä–≥' },
      { name: '–°–æ–∫ —è–±–ª–æ—á–Ω—ã–π —Å –ø–µ—á–µ–Ω—å–µ–º', meal_type: '–ø–æ–ª–¥–Ω–∏–∫', day_of_week: '–ø—è—Ç–Ω–∏—Ü–∞' }
    ];
    
    return this.validateAndEnrich(fallbackDishes);
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  findDishInRegion(data, startRow, endRow, startCol, endCol) {
    for (let row = startRow; row <= Math.min(endRow, data.length - 1); row++) {
      for (let col = startCol; col <= Math.min(endCol, (data[row]?.length || 0) - 1); col++) {
        const cellText = this.normalizeText(data[row][col]);
        if (this.isDishName(cellText)) {
          return { text: data[row][col], row, col };
        }
      }
    }
    return null;
  }

  determineMealTypeByContext(data, row, col) {
    // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–π–∫–∞—Ö
    const searchRadius = 2;
    
    for (let r = Math.max(0, row - searchRadius); r <= Math.min(data.length - 1, row + searchRadius); r++) {
      for (let c = Math.max(0, col - searchRadius); c <= Math.min((data[r]?.length || 0) - 1, col + searchRadius); c++) {
        const cellText = this.normalizeText(data[r][c]);
        
        for (const [mealType, keywords] of Object.entries(this.mealTypeKeywords)) {
          if (keywords.some(keyword => cellText.includes(keyword))) {
            return mealType;
          }
        }
      }
    }
    
    return null;
  }

  determineDayByContext(data, row, col) {
    // –ò—â–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    for (let r = 0; r < Math.min(5, data.length); r++) {
      if (col < (data[r]?.length || 0)) {
        const cellText = this.normalizeText(data[r][col]);
        
        for (const [day, keywords] of Object.entries(this.dayKeywords)) {
          if (keywords.some(keyword => cellText.includes(keyword))) {
            return day;
          }
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–æ–ª–±—Ü–∞
    const daysByColumn = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];
    const dayIndex = (col - 1) % 5;
    return daysByColumn[dayIndex] || '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫';
  }
}

export default SuperMenuParser;
