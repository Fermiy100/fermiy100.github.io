// üß™ –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ Excel —Ñ–∞–π–ª–æ–≤
const FinalExcelParser = require('./final-excel-parser');

console.log('üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ü–ê–†–°–ï–†–ê...');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
const parser = new FinalExcelParser();

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
try {
    const dishes = parser.parse();
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:');
    console.log(`üçΩÔ∏è –í—Å–µ–≥–æ –±–ª—é–¥: ${dishes.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    const dishesByDay = {};
    dishes.forEach(dish => {
        if (!dishesByDay[dish.day_of_week]) {
            dishesByDay[dish.day_of_week] = [];
        }
        dishesByDay[dish.day_of_week].push(dish);
    });
    
    console.log('\nüìÖ –ë–ª—é–¥–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:');
    Object.keys(dishesByDay).forEach(day => {
        console.log(`   –î–µ–Ω—å ${day}: ${dishesByDay[day].length} –±–ª—é–¥`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –±–ª—é–¥
    console.log('\nüçΩÔ∏è –ü–µ—Ä–≤—ã–µ 5 –±–ª—é–¥:');
    dishes.slice(0, 5).forEach((dish, index) => {
        console.log(`   ${index + 1}. ${dish.name} (${dish.weight}) - ${dish.recipe_number}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –±–ª—é–¥
    const uniqueDishes = [...new Set(dishes.map(d => d.name))];
    console.log(`\nüîç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª—é–¥: ${uniqueDishes.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å–∞
    const uniqueWeights = [...new Set(dishes.map(d => d.weight))];
    console.log(`‚öñÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤: ${uniqueWeights.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
    const uniqueRecipes = [...new Set(dishes.map(d => d.recipe_number))];
    console.log(`üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤: ${uniqueRecipes.length}`);
    
    console.log('\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    
} catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï:', error);
}
