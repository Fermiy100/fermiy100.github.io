// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
import fs from 'fs';
import path from 'path';

console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º ULTIMATE EXCEL PARSER...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Excel —Ñ–∞–π–ª
const excelPath = path.join(process.cwd(), 'menu.xlsx');
console.log('üìÅ –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É:', excelPath);

if (fs.existsSync(excelPath)) {
    console.log('‚úÖ Excel —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω!');
    const stats = fs.statSync(excelPath);
    console.log('üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', stats.size, '–±–∞–π—Ç');
} else {
    console.log('‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ package.json
const packagePath = path.join(process.cwd(), 'package.json');
if (fs.existsSync(packagePath)) {
    console.log('‚úÖ package.json –Ω–∞–π–¥–µ–Ω!');
    const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    console.log('üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:', Object.keys(packageData.dependencies || {}));
} else {
    console.log('‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
}

console.log('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');