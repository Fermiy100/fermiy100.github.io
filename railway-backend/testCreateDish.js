/**
 * –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ë–õ–Æ–î–ê
 */

import { UltimateMenuParser } from './ultimateMenuParser.js';

const parser = new UltimateMenuParser();

console.log('üîç –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ë–õ–Æ–î–ê...\n');

const testCases = [
  { text: '–ë–æ—Ä—â —Å –º—è—Å–æ–º', row: ['–ë–æ—Ä—â —Å –º—è—Å–æ–º', '120 —Ä—É–±'], rowIndex: 0, colIndex: 0 },
  { text: '–ì—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞', row: ['–ì—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞', '80 —Ä—É–±'], rowIndex: 1, colIndex: 0 },
  { text: '–ö–æ—Ç–ª–µ—Ç–∞', row: ['–ö–æ—Ç–ª–µ—Ç–∞', '150 —Ä—É–±'], rowIndex: 2, colIndex: 0 }
];

testCases.forEach((testCase, i) => {
  console.log(`–¢–µ—Å—Ç ${i + 1}: "${testCase.text}"`);
  
  try {
    const dish = parser.createDishFromCell(
      testCase.text, 
      testCase.row, 
      testCase.rowIndex, 
      testCase.colIndex, 
      {}
    );
    
    if (dish) {
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ: ${dish.name}`);
      console.log(`   üí∞ –¶–µ–Ω–∞: ${dish.price}‚ÇΩ`);
      console.log(`   üìè –ü–æ—Ä—Ü–∏—è: ${dish.portion}`);
      console.log(`   üìÖ –î–µ–Ω—å: ${dish.day_of_week}`);
      console.log(`   üçΩÔ∏è –¢–∏–ø: ${dish.meal_type}`);
    } else {
      console.log('‚ùå –ù–ï –°–û–ó–î–ê–ù–û');
    }
  } catch (error) {
    console.log(`‚ùå –û–®–ò–ë–ö–ê: ${error.message}`);
  }
  
  console.log('');
});
