/**
 * –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –§–ê–ô–õ–ê
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–∞ —Ñ–∞–π–ª–µ "2-–Ø –ù–ï–î–ï–õ–Ø –î–õ–Ø –ó–ê–ö–ê–ó–ê 22.09-26.09 (–∫–æ–ø–∏—è) ‚Äî –∫–æ–ø–∏—è.xlsx"
 */

import { ImprovedMenuParser } from './improvedMenuParser.js';
import XLSX from 'xlsx';
import fs from 'fs';

async function testRealFile() {
  console.log('üß™ –¢–ï–°–¢–ò–†–£–ï–ú –ü–ê–†–°–ï–† –ù–ê –†–ï–ê–õ–¨–ù–û–ú –§–ê–ô–õ–ï...');
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    const filePath = '../2-–Ø –ù–ï–î–ï–õ–Ø –î–õ–Ø –ó–ê–ö–ê–ó–ê  22.09-26.09 (–∫–æ–ø–∏—è) ‚Äî –∫–æ–ø–∏—è.xlsx';
    const buffer = fs.readFileSync(filePath);
    
    console.log(`üìÅ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: ${buffer.length} –±–∞–π—Ç`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    const parser = new ImprovedMenuParser();
    console.log('üîß –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    console.log('\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–ê–†–°–ò–ù–ì...');
    const items = parser.parseExcelFile(buffer);
    
    console.log(`\n‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!`);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –±–ª—é–¥: ${items.length}`);
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const validation = parser.validateParsedMenu(items);
    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:');
    console.log(`  ‚úÖ –í–∞–ª–∏–¥–Ω–æ: ${validation.isValid}`);
    console.log(`  ‚ùå –û—à–∏–±–∫–∏: ${validation.errors.length}`);
    console.log(`  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${validation.warnings.length}`);
    console.log(`  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, validation.stats);
    
    if (validation.errors.length > 0) {
      console.log('\n‚ùå –û–®–ò–ë–ö–ò:');
      validation.errors.forEach((error, index) => {
        console.log(`  ${index + 1}. ${error}`);
      });
    }
    
    if (validation.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:');
      validation.warnings.forEach((warning, index) => {
        console.log(`  ${index + 1}. ${warning}`);
      });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –±–ª—é–¥
    console.log('\nüçΩÔ∏è –ü–†–ò–ú–ï–†–´ –ù–ê–ô–î–ï–ù–ù–´–• –ë–õ–Æ–î:');
    items.slice(0, 20).forEach((item, index) => {
      console.log(`  ${index + 1}. ${item.name} (${item.meal_type}, –¥–µ–Ω—å ${item.day_of_week})`);
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    const groupedByDay = items.reduce((acc, item) => {
      if (!acc[item.day_of_week]) acc[item.day_of_week] = [];
      acc[item.day_of_week].push(item);
      return acc;
    }, {});
    
    console.log('\nüìÖ –ë–õ–Æ–î–ê –ü–û –î–ù–Ø–ú:');
    Object.keys(groupedByDay).forEach(day => {
      const dayNames = ['', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
      console.log(`  ${dayNames[day]}: ${groupedByDay[day].length} –±–ª—é–¥`);
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    const groupedByMeal = items.reduce((acc, item) => {
      if (!acc[item.meal_type]) acc[item.meal_type] = [];
      acc[item.meal_type].push(item);
      return acc;
    }, {});
    
    console.log('\nüç¥ –ë–õ–Æ–î–ê –ü–û –¢–ò–ü–ê–ú –ü–†–ò–ï–ú–û–í –ü–ò–©–ò:');
    Object.keys(groupedByMeal).forEach(meal => {
      console.log(`  ${meal}: ${groupedByMeal[meal].length} –±–ª—é–¥`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥
    const badNames = items.filter(item => !item.name || item.name.length < 3);
    if (badNames.length > 0) {
      console.log(`  ‚ùå –ü–ª–æ—Ö–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è: ${badNames.length}`);
      badNames.slice(0, 5).forEach(item => {
        console.log(`    - "${item.name}" (–¥–µ–Ω—å ${item.day_of_week}, ${item.meal_type})`);
      });
    } else {
      console.log(`  ‚úÖ –í—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const duplicates = [];
    const seen = new Set();
    items.forEach(item => {
      const key = `${item.name}-${item.day_of_week}-${item.meal_type}`;
      if (seen.has(key)) {
        duplicates.push(item);
      } else {
        seen.add(key);
      }
    });
    
    if (duplicates.length > 0) {
      console.log(`  ‚ùå –î—É–±–ª–∏–∫–∞—Ç—ã: ${duplicates.length}`);
      duplicates.slice(0, 5).forEach(item => {
        console.log(`    - ${item.name} (–¥–µ–Ω—å ${item.day_of_week}, ${item.meal_type})`);
      });
    } else {
      console.log(`  ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ü–∏–∏
    const noPortions = items.filter(item => !item.portion || item.portion.length === 0);
    if (noPortions.length > 0) {
      console.log(`  ‚ö†Ô∏è –ë–µ–∑ –ø–æ—Ä—Ü–∏–π: ${noPortions.length}`);
    } else {
      console.log(`  ‚úÖ –£ –≤—Å–µ—Ö –±–ª—é–¥ –µ—Å—Ç—å –ø–æ—Ä—Ü–∏–∏`);
    }
    
    console.log('\nüéØ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    return {
      success: true,
      itemsCount: items.length,
      validation,
      groupedByDay,
      groupedByMeal,
      quality: {
        badNames: badNames.length,
        duplicates: duplicates.length,
        noPortions: noPortions.length
      }
    };
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:');
    console.error(`  –û—à–∏–±–∫–∞: ${error.message}`);
    console.error(`  Stack: ${error.stack}`);
    
    return {
      success: false,
      error: error.message,
      stack: error.stack
    };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testRealFile().then(result => {
  if (result.success) {
    console.log('\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.');
    process.exit(0);
  } else {
    console.log('\n‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´! –ù—É–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.');
    process.exit(1);
  }
});
