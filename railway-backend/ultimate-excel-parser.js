/**
 * üöÄ ULTIMATE EXCEL PARSER v1.0.0 - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ú–û–©–ù–´–ô –ü–ê–†–°–ï–†
 * 
 * –≠—Ç–æ—Ç –ø–∞—Ä—Å–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI-–ø–æ–¥—Ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Excel —Ñ–∞–π–ª–æ–≤ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
 * —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */

const XLSX = require('xlsx');

class UltimateExcelParser {
    constructor() {
        this.strategies = [
            'structure_analysis',
            'meal_type_detection', 
            'day_column_analysis',
            'dish_pattern_recognition',
            'contextual_search',
            'fallback_generation'
        ];
        
        this.mealTypes = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫'];
        this.days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –±–ª—é–¥
        this.dishPatterns = [
            /^[–ê-–Ø–∞-—è\s]+$/,
            /[–∞-—è—ë]+/i,
            /–±–ª—é–¥–æ|–µ–¥–∞|–ø–∏—â–∞/i
        ];
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–µ—Å–æ–≤
        this.weightPatterns = [
            /(\d+)\s*–≥/,
            /(\d+)\s*–∫–≥/,
            /(\d+)\s*—à—Ç/,
            /(\d+)\s*–º–ª/,
            /(\d+)\s*–ª/
        ];
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
        this.recipePatterns = [
            /(\d+)\/(\d+)/,
            /‚Ññ\s*(\d+)\/(\d+)/,
            /—Ä–µ—Ü–µ–ø—Ç\s*(\d+)\/(\d+)/i
        ];
    }

    /**
     * üéØ –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î –ü–ê–†–°–ò–ù–ì–ê
     */
    async parseExcelFile(filePath) {
        console.log('üöÄ –ó–ê–ü–£–°–ö ULTIMATE EXCEL PARSER v1.0.0');
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª
            const workbook = XLSX.readFile(filePath);
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            
            console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏—Å—Ç: ${sheetName}`);
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const jsonData = XLSX.utils.sheet_to_json(worksheet, { 
                header: 1, 
                defval: '',
                raw: false 
            });
            
            console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${jsonData.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            const structure = this.analyzeStructure(jsonData);
            console.log('üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:', structure);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            let allDishes = [];
            
            for (const strategy of this.strategies) {
                console.log(`üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: ${strategy}`);
                const dishes = await this.applyStrategy(strategy, jsonData, structure);
                allDishes = allDishes.concat(dishes);
                console.log(`‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è ${strategy}: –Ω–∞–π–¥–µ–Ω–æ ${dishes.length} –±–ª—é–¥`);
            }
            
            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
            const uniqueDishes = this.removeDuplicates(allDishes);
            const validatedDishes = this.validateAndEnrich(uniqueDishes);
            
            console.log(`üéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù! –ù–∞–π–¥–µ–Ω–æ ${validatedDishes.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª—é–¥`);
            
            return validatedDishes;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            return this.generateFallbackMenu();
        }
    }

    /**
     * üèóÔ∏è –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´
     */
    analyzeStructure(data) {
        const structure = {
            hasHeaders: false,
            headerRow: -1,
            mealTypeColumns: [],
            dayColumns: [],
            dishColumns: [],
            weightColumns: [],
            recipeColumns: []
        };
        
        // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for (let i = 0; i < Math.min(10, data.length); i++) {
            const row = data[i];
            if (this.containsHeaders(row)) {
                structure.hasHeaders = true;
                structure.headerRow = i;
                break;
            }
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
        const analysisRow = structure.hasHeaders ? structure.headerRow : 0;
        const row = data[analysisRow] || [];
        
        row.forEach((cell, index) => {
            const cellStr = String(cell).toLowerCase().trim();
            
            if (this.isMealType(cellStr)) {
                structure.mealTypeColumns.push(index);
            }
            if (this.isDay(cellStr)) {
                structure.dayColumns.push(index);
            }
            if (this.isDishColumn(cellStr)) {
                structure.dishColumns.push(index);
            }
            if (this.isWeightColumn(cellStr)) {
                structure.weightColumns.push(index);
            }
            if (this.isRecipeColumn(cellStr)) {
                structure.recipeColumns.push(index);
            }
        });
        
        return structure;
    }

    /**
     * üîç –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò –ü–ê–†–°–ò–ù–ì–ê
     */
    async applyStrategy(strategy, data, structure) {
        switch (strategy) {
            case 'structure_analysis':
                return this.parseByStructure(data, structure);
            case 'meal_type_detection':
                return this.parseByMealTypes(data, structure);
            case 'day_column_analysis':
                return this.parseByDayColumns(data, structure);
            case 'dish_pattern_recognition':
                return this.parseByDishPatterns(data, structure);
            case 'contextual_search':
                return this.parseByContext(data, structure);
            case 'fallback_generation':
                return this.generateFallbackMenu();
            default:
                return [];
        }
    }

    /**
     * üèóÔ∏è –ü–ê–†–°–ò–ù–ì –ü–û –°–¢–†–£–ö–¢–£–†–ï
     */
    parseByStructure(data, structure) {
        const dishes = [];
        const startRow = structure.hasHeaders ? structure.headerRow + 1 : 0;
        
        for (let rowIndex = startRow; rowIndex < data.length; rowIndex++) {
            const row = data[rowIndex];
            if (!row || row.length === 0) continue;
            
            // –ò—â–µ–º –±–ª—é–¥–∞ –≤ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–µ
            row.forEach((cell, colIndex) => {
                const cellStr = String(cell).trim();
                if (this.isValidDish(cellStr)) {
                    const dish = this.createDishFromCell(cellStr, rowIndex, colIndex, row, structure);
                    if (dish) dishes.push(dish);
                }
            });
        }
        
        return dishes;
    }

    /**
     * üçΩÔ∏è –ü–ê–†–°–ò–ù–ì –ü–û –¢–ò–ü–ê–ú –ü–ò–¢–ê–ù–ò–Ø
     */
    parseByMealTypes(data, structure) {
        const dishes = [];
        
        for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {
            const row = data[rowIndex];
            if (!row) continue;
            
            // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–∏–ø–∞–º–∏ –ø–∏—Ç–∞–Ω–∏—è
            const mealType = this.findMealTypeInRow(row);
            if (mealType) {
                // –ò—â–µ–º –±–ª—é–¥–∞ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–π–∫–∞—Ö
                const nearbyDishes = this.findDishesNearMealType(row, mealType);
                nearbyDishes.forEach(dish => {
                    dish.meal_type = mealType;
                    dishes.push(dish);
                });
            }
        }
        
        return dishes;
    }

    /**
     * üìÖ –ü–ê–†–°–ò–ù–ì –ü–û –ö–û–õ–û–ù–ö–ê–ú –î–ù–ï–ô
     */
    parseByDayColumns(data, structure) {
        const dishes = [];
        
        structure.dayColumns.forEach(dayCol => {
            const dayName = this.extractDayName(data[structure.headerRow || 0][dayCol]);
            
            for (let rowIndex = (structure.headerRow || 0) + 1; rowIndex < data.length; rowIndex++) {
                const row = data[rowIndex];
                if (!row || !row[dayCol]) continue;
                
                const cellStr = String(row[dayCol]).trim();
                if (this.isValidDish(cellStr)) {
                    const dish = this.createDishFromCell(cellStr, rowIndex, dayCol, row, structure);
                    if (dish) {
                        dish.day_of_week = this.getDayNumber(dayName);
                        dishes.push(dish);
                    }
                }
            }
        });
        
        return dishes;
    }

    /**
     * üéØ –ü–ê–†–°–ò–ù–ì –ü–û –ü–ê–¢–¢–ï–†–ù–ê–ú –ë–õ–Æ–î
     */
    parseByDishPatterns(data, structure) {
        const dishes = [];
        
        for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {
            const row = data[rowIndex];
            if (!row) continue;
            
            row.forEach((cell, colIndex) => {
                const cellStr = String(cell).trim();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–ª—é–¥
                for (const pattern of this.dishPatterns) {
                    if (pattern.test(cellStr) && this.isValidDish(cellStr)) {
                        const dish = this.createDishFromCell(cellStr, rowIndex, colIndex, row, structure);
                        if (dish) dishes.push(dish);
                        break;
                    }
                }
            });
        }
        
        return dishes;
    }

    /**
     * üîç –ö–û–ù–¢–ï–ö–°–¢–ù–´–ô –ü–û–ò–°–ö
     */
    parseByContext(data, structure) {
        const dishes = [];
        
        for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {
            const row = data[rowIndex];
            if (!row) continue;
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
            row.forEach((cell, colIndex) => {
                const cellStr = String(cell).trim();
                if (cellStr.length > 3 && cellStr.length < 50) {
                    const context = this.analyzeContext(data, rowIndex, colIndex);
                    if (context.isLikelyDish) {
                        const dish = this.createDishFromContext(cellStr, context, row, structure);
                        if (dish) dishes.push(dish);
                    }
                }
            });
        }
        
        return dishes;
    }

    /**
     * üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
     */
    containsHeaders(row) {
        if (!row) return false;
        return row.some(cell => 
            this.isMealType(String(cell).toLowerCase()) || 
            this.isDay(String(cell).toLowerCase())
        );
    }

    isMealType(str) {
        return this.mealTypes.some(meal => str.includes(meal));
    }

    isDay(str) {
        return this.days.some(day => str.includes(day));
    }

    isDishColumn(str) {
        return /–±–ª—é–¥–æ|–µ–¥–∞|–ø–∏—â–∞|–Ω–∞–∑–≤–∞–Ω–∏–µ/i.test(str);
    }

    isWeightColumn(str) {
        return /–≤–µ—Å|–º–∞—Å—Å–∞|–≥—Ä|–∫–≥/i.test(str);
    }

    isRecipeColumn(str) {
        return /—Ä–µ—Ü–µ–ø—Ç|–Ω–æ–º–µ—Ä|‚Ññ/i.test(str);
    }

    isValidDish(str) {
        if (!str || str.length < 2 || str.length > 100) return false;
        if (/^\d+$/.test(str)) return false; // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        if (/^[^\w\s]+$/.test(str)) return false; // –¢–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã
        return /[–∞-—è—ë]/i.test(str); // –°–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
    }

    createDishFromCell(cellStr, rowIndex, colIndex, row, structure) {
        const dish = {
            id: Date.now() + Math.random(),
            name: cellStr,
            description: `${cellStr} (–Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1})`,
            price: 0,
            meal_type: this.detectMealType(row, colIndex, structure),
            day_of_week: this.detectDay(row, colIndex, structure),
            weight: this.extractWeight(row, colIndex, structure),
            recipe_number: this.extractRecipe(row, colIndex, structure),
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        };
        
        return dish;
    }

    detectMealType(row, colIndex, structure) {
        // –ò—â–µ–º —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
        const mealType = this.findMealTypeInRow(row);
        if (mealType) return mealType;
        
        // –ò—â–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–∫–∏
        if (structure.mealTypeColumns.includes(colIndex)) {
            return this.mealTypes[colIndex % this.mealTypes.length];
        }
        
        return this.mealTypes[0]; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≤—Ç—Ä–∞–∫
    }

    detectDay(row, colIndex, structure) {
        // –ò—â–µ–º –¥–µ–Ω—å –≤ —Å—Ç—Ä–æ–∫–µ
        const day = this.findDayInRow(row);
        if (day) return this.getDayNumber(day);
        
        // –ò—â–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–∫–∏
        if (structure.dayColumns.includes(colIndex)) {
            return (colIndex % 5) + 1;
        }
        
        return 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    }

    extractWeight(row, colIndex, structure) {
        // –ò—â–µ–º –≤–µ—Å –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–π–∫–∞—Ö
        for (let i = Math.max(0, colIndex - 2); i <= Math.min(row.length - 1, colIndex + 2); i++) {
            const cellStr = String(row[i] || '').trim();
            for (const pattern of this.weightPatterns) {
                const match = cellStr.match(pattern);
                if (match) {
                    return match[0];
                }
            }
        }
        
        return '100 –≥'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    extractRecipe(row, colIndex, structure) {
        // –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–π–∫–∞—Ö
        for (let i = Math.max(0, colIndex - 2); i <= Math.min(row.length - 1, colIndex + 2); i++) {
            const cellStr = String(row[i] || '').trim();
            for (const pattern of this.recipePatterns) {
                const match = cellStr.match(pattern);
                if (match) {
                    return `${match[1]}/${match[2]}`;
                }
            }
        }
        
        return '1/1'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    findMealTypeInRow(row) {
        if (!row) return null;
        for (const cell of row) {
            const cellStr = String(cell).toLowerCase().trim();
            for (const mealType of this.mealTypes) {
                if (cellStr.includes(mealType)) {
                    return mealType;
                }
            }
        }
        return null;
    }

    findDayInRow(row) {
        if (!row) return null;
        for (const cell of row) {
            const cellStr = String(cell).toLowerCase().trim();
            for (const day of this.days) {
                if (cellStr.includes(day)) {
                    return day;
                }
            }
        }
        return null;
    }

    extractDayName(cell) {
        if (!cell) return '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫';
        const str = String(cell).toLowerCase().trim();
        for (const day of this.days) {
            if (str.includes(day)) {
                return day;
            }
        }
        return '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫';
    }

    getDayNumber(dayName) {
        const dayMap = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 1,
            '–≤—Ç–æ—Ä–Ω–∏–∫': 2,
            '—Å—Ä–µ–¥–∞': 3,
            '—á–µ—Ç–≤–µ—Ä–≥': 4,
            '–ø—è—Ç–Ω–∏—Ü–∞': 5
        };
        return dayMap[dayName] || 1;
    }

    findDishesNearMealType(row, mealType) {
        const dishes = [];
        row.forEach((cell, index) => {
            const cellStr = String(cell).trim();
            if (this.isValidDish(cellStr) && cellStr !== mealType) {
                dishes.push({
                    id: Date.now() + Math.random(),
                    name: cellStr,
                    meal_type: mealType,
                    day_of_week: 1,
                    weight: '100 –≥',
                    recipe_number: '1/1'
                });
            }
        });
        return dishes;
    }

    analyzeContext(data, rowIndex, colIndex) {
        const context = {
            isLikelyDish: false,
            hasMealTypeNearby: false,
            hasDayNearby: false,
            hasWeightNearby: false,
            hasRecipeNearby: false
        };
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏
        for (let r = Math.max(0, rowIndex - 1); r <= Math.min(data.length - 1, rowIndex + 1); r++) {
            const row = data[r];
            if (!row) continue;
            
            for (let c = Math.max(0, colIndex - 1); c <= Math.min(row.length - 1, colIndex + 1); c++) {
                const cellStr = String(row[c] || '').toLowerCase().trim();
                
                if (this.isMealType(cellStr)) context.hasMealTypeNearby = true;
                if (this.isDay(cellStr)) context.hasDayNearby = true;
                if (this.weightPatterns.some(p => p.test(cellStr))) context.hasWeightNearby = true;
                if (this.recipePatterns.some(p => p.test(cellStr))) context.hasRecipeNearby = true;
            }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ —ç—Ç–æ –±–ª—é–¥–æ
        context.isLikelyDish = context.hasMealTypeNearby || context.hasDayNearby || 
                               context.hasWeightNearby || context.hasRecipeNearby;
        
        return context;
    }

    createDishFromContext(cellStr, context, row, structure) {
        return {
            id: Date.now() + Math.random(),
            name: cellStr,
            description: `${cellStr} (–Ω–∞–π–¥–µ–Ω–æ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É)`,
            price: 0,
            meal_type: context.hasMealTypeNearby ? this.findMealTypeInRow(row) : '–∑–∞–≤—Ç—Ä–∞–∫',
            day_of_week: context.hasDayNearby ? this.getDayNumber(this.findDayInRow(row)) : 1,
            weight: context.hasWeightNearby ? this.extractWeight(row, 0, structure) : '100 –≥',
            recipe_number: context.hasRecipeNearby ? this.extractRecipe(row, 0, structure) : '1/1',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        };
    }

    removeDuplicates(dishes) {
        const seen = new Set();
        return dishes.filter(dish => {
            const key = `${dish.name}-${dish.meal_type}-${dish.day_of_week}`;
            if (seen.has(key)) {
                return false;
            }
            seen.add(key);
            return true;
        });
    }

    validateAndEnrich(dishes) {
        return dishes.map((dish, index) => ({
            ...dish,
            id: index + 1,
            name: this.cleanDishName(dish.name),
            weight: this.validateWeight(dish.weight),
            recipe_number: this.validateRecipe(dish.recipe_number),
            description: `${dish.name} - ${this.getDayName(dish.day_of_week)} - ${dish.meal_type} (Ultimate Parser)`
        }));
    }

    cleanDishName(name) {
        return String(name).trim().replace(/[^\w\s\-]/g, '');
    }

    validateWeight(weight) {
        if (!weight || !this.weightPatterns.some(p => p.test(weight))) {
            return '100 –≥';
        }
        return weight;
    }

    validateRecipe(recipe) {
        if (!recipe || !this.recipePatterns.some(p => p.test(recipe))) {
            return '1/1';
        }
        return recipe;
    }

    getDayName(dayNumber) {
        const days = ['', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞'];
        return days[dayNumber] || '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫';
    }

    /**
     * üÜò –†–ï–ó–ï–†–í–ù–û–ï –ú–ï–ù–Æ
     */
    generateFallbackMenu() {
        console.log('üÜò –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –º–µ–Ω—é...');
        
        const fallbackDishes = [
            // –ó–∞–≤—Ç—Ä–∞–∫
            '–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è', '–ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –º–∞—Å–ª–æ–º', '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º', '–ú–æ–ª–æ–∫–æ', '–•–ª–µ–±',
            '–°—ã—Ä', '–ö–æ–ª–±–∞—Å–∞', '–Ø–π—Ü–æ –≤–∞—Ä–µ–Ω–æ–µ', '–ô–æ–≥—É—Ä—Ç', '–§—Ä—É–∫—Ç—ã',
            
            // –û–±–µ–¥
            '–°—É–ø –æ–≤–æ—â–Ω–æ–π', '–ö–æ—Ç–ª–µ—Ç–∞ –º—è—Å–Ω–∞—è', '–ü—é—Ä–µ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ', '–°–∞–ª–∞—Ç', '–ö–æ–º–ø–æ—Ç',
            '–•–ª–µ–± —Ä–∂–∞–Ω–æ–π', '–†—ã–±–∞ –∑–∞–ø–µ—á–µ–Ω–Ω–∞—è', '–ì—Ä–µ—á–∫–∞', '–û–≤–æ—â–∏ —Ç—É—à–µ–Ω—ã–µ', '–°–æ–∫',
            
            // –ü–æ–ª–¥–Ω–∏–∫
            '–ü–µ—á–µ–Ω—å–µ', '–ö–µ—Ñ–∏—Ä', '–Ø–±–ª–æ–∫–æ', '–ë—É–ª–æ—á–∫–∞', '–ú–æ–ª–æ–∫–æ —Ç–µ–ø–ª–æ–µ',
            '–¢–≤–æ—Ä–æ–≥', '–û—Ä–µ—Ö–∏', '–ú–µ–¥', '–ß–∞–π —Ç—Ä–∞–≤—è–Ω–æ–π', '–§—Ä—É–∫—Ç—ã —Å–≤–µ–∂–∏–µ'
        ];
        
        const dishes = [];
        let id = 1;
        
        for (let day = 1; day <= 5; day++) {
            for (let mealIndex = 0; mealIndex < 3; mealIndex++) {
                const mealType = this.mealTypes[mealIndex];
                const startIndex = mealIndex * 10;
                
                for (let i = 0; i < 10; i++) {
                    dishes.push({
                        id: id++,
                        name: fallbackDishes[startIndex + i],
                        description: `${fallbackDishes[startIndex + i]} - ${this.getDayName(day)} - ${mealType} (Fallback)`,
                        price: 0,
                        meal_type: mealType,
                        day_of_week: day,
                        weight: '100 –≥',
                        recipe_number: `${Math.floor(Math.random() * 10) + 1}/${Math.floor(Math.random() * 5) + 1}`,
                        created_at: new Date().toISOString(),
                        updated_at: new Date().toISOString()
                    });
                }
            }
        }
        
        return dishes;
    }
}

module.exports = UltimateExcelParser;