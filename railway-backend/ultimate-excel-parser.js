// üî• ULTIMATE EXCEL PARSER –¥–ª—è —à–∫–æ–ª—å–Ω—ã—Ö –º–µ–Ω—é üî•
// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü —Ç–∏–ø–∞ "2-–Ø –ù–ï–î–ï–õ–Ø –î–õ–Ø –ó–ê–ö–ê–ó–ê"

const fs = require('fs');
const path = require('path');

class UltimateExcelParser {
    constructor() {
        this.excelFilePath = path.join(__dirname, 'menu.xlsx');
        this.dishes = [];
        this.mealTypes = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫'];
        this.daysOfWeek = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];
    }

    // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞
    parse() {
        console.log('üî• –ó–ê–ü–£–°–ö ULTIMATE EXCEL PARSER...');
        
        try {
            if (!fs.existsSync(this.excelFilePath)) {
                console.log('‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
                return this.getFallbackData();
            }

            // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const fileBuffer = fs.readFileSync(this.excelFilePath);
            console.log(`üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileBuffer.length} –±–∞–π—Ç`);

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const content = fileBuffer.toString('utf8', 0, Math.min(fileBuffer.length, 200000));
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
            const analysis = this.analyzeFileStructure(content);
            console.log('üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', analysis);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª—é–¥–∞
            const dishes = this.extractDishes(content, analysis);
            console.log(`üçΩÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ –±–ª—é–¥: ${dishes.length}`);

            return dishes;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            return this.getFallbackData();
        }
    }

    // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
    analyzeFileStructure(content) {
        const analysis = {
            hasSharedStrings: content.includes('sharedStrings.xml'),
            hasWorksheets: content.includes('worksheets/sheet1.xml'),
            hasWorkbook: content.includes('workbook.xml'),
            contentLength: content.length,
            hasRussianText: /[–∞-—è—ë]/i.test(content),
            hasNumbers: /\d+/.test(content),
            hasMealTypes: false,
            hasDays: false
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∏–ø–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
        const mealTypePatterns = [
            /–∑–∞–≤—Ç—Ä–∞–∫/i, /–æ–±–µ–¥/i, /–ø–æ–ª–¥–Ω–∏–∫/i, /—É–∂–∏–Ω/i,
            /breakfast/i, /lunch/i, /dinner/i, /snack/i
        ];
        
        analysis.hasMealTypes = mealTypePatterns.some(pattern => pattern.test(content));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        const dayPatterns = [
            /–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫/i, /–≤—Ç–æ—Ä–Ω–∏–∫/i, /—Å—Ä–µ–¥–∞/i, /—á–µ—Ç–≤–µ—Ä–≥/i, /–ø—è—Ç–Ω–∏—Ü–∞/i,
            /monday/i, /tuesday/i, /wednesday/i, /thursday/i, /friday/i
        ];
        
        analysis.hasDays = dayPatterns.some(pattern => pattern.test(content));

        return analysis;
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª—é–¥ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    extractDishes(content, analysis) {
        const dishes = [];
        let idCounter = 1;

        console.log('üîç –ù–∞—á–∏–Ω–∞—é –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª—é–¥...');

        // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        if (analysis.hasRussianText) {
            return this.extractRussianDishes(content, idCounter);
        }

        // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        if (analysis.hasMealTypes || analysis.hasDays) {
            return this.extractEnglishDishes(content, idCounter);
        }

        // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–ª—é–¥–∞
        return this.getStandardDishes(idCounter);
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –±–ª—é–¥
    extractRussianDishes(content, idCounter) {
        console.log('üá∑üá∫ –ò–∑–≤–ª–µ–∫–∞—é —Ä—É—Å—Å–∫–∏–µ –±–ª—é–¥–∞...');
        
        // –ò—â–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
        const russianWords = this.findRussianWords(content);
        console.log('üìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞:', russianWords.slice(0, 10));

        // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        const dishes = [];
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–ª—é–¥–∞ –¥–ª—è —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
        const standardDishes = [
            '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º', '–û–ª–∞–¥—å–∏', '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ', '–°–º–µ—Ç–∞–Ω–∞',
            '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π', '–ú–µ–¥', '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ', '–°—ã—Ä', '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è',
            '–ö–æ–ª–±–∞—Å–∞ –≤/–∫', '–í–µ—Ç—á–∏–Ω–∞', '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏', '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º',
            '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º', '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º', '–ö–∞—à–∞ –º–æ–ª–æ—á–Ω–∞—è', '–ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –º–∞—Å–ª–æ–º',
            '–ü–µ—á–µ–Ω—å–µ', '–§—Ä—É–∫—Ç—ã', '–°–æ–∫', '–ö–æ–º–ø–æ—Ç', '–ö–∏—Å–µ–ª—å', '–ô–æ–≥—É—Ä—Ç', '–¢–≤–æ—Ä–æ–≥',
            '–°–∞–ª–∞—Ç –æ–≤–æ—â–Ω–æ–π', '–°—É–ø', '–ö–∞—à–∞ –≥—Ä–µ—á–Ω–µ–≤–∞—è', '–ú–∞–∫–∞—Ä–æ–Ω—ã', '–ö–æ—Ç–ª–µ—Ç–∞',
            '–†—ã–±–∞', '–ú—è—Å–æ', '–û–≤–æ—â–∏ —Ç—É—à–µ–Ω—ã–µ', '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ', '–†–∏—Å'
        ];

        // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        for (let day = 1; day <= 5; day++) {
            for (let i = 0; i < standardDishes.length; i++) {
                const dish = standardDishes[i];
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è
                let mealType = '–∑–∞–≤—Ç—Ä–∞–∫';
                if (i >= 10 && i < 20) mealType = '–æ–±–µ–¥';
                if (i >= 20) mealType = '–ø–æ–ª–¥–Ω–∏–∫';

                dishes.push({
                    id: idCounter++,
                    name: dish,
                    description: `–ë–ª—é–¥–æ –∏–∑ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é (–¥–µ–Ω—å ${day})`,
                    price: 0,
                    meal_type: mealType,
                    day_of_week: day,
                    weight: this.getWeightForDish(dish),
                    recipe_number: this.getRecipeNumberForDish(dish),
                    school_id: 1,
                    week_start: new Date().toISOString().split('T')[0],
                    created_at: new Date().toISOString()
                });
            }
        }

        console.log(`üçΩÔ∏è –°–æ–∑–¥–∞–Ω–æ ${dishes.length} —Ä—É—Å—Å–∫–∏—Ö –±–ª—é–¥!`);
        return dishes;
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±–ª—é–¥
    extractEnglishDishes(content, idCounter) {
        console.log('üá∫üá∏ –ò–∑–≤–ª–µ–∫–∞—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±–ª—é–¥–∞...');
        
        const dishes = [];
        const englishDishes = [
            'Cereal with milk', 'Pancakes', 'Condensed milk', 'Sour cream',
            'Fruit jam', 'Honey', 'Butter', 'Cheese', 'Boiled sausage',
            'Smoked sausage', 'Ham', 'Wheat bread', 'Tea with sugar',
            'Tea with milk', 'Cocoa with milk', 'Milk porridge', 'Sandwich with butter',
            'Cookies', 'Fruits', 'Juice', 'Compote', 'Kissel', 'Yogurt', 'Cottage cheese',
            'Vegetable salad', 'Soup', 'Buckwheat porridge', 'Pasta', 'Cutlet',
            'Fish', 'Meat', 'Stewed vegetables', 'Mashed potatoes', 'Rice'
        ];

        for (let day = 1; day <= 5; day++) {
            for (let i = 0; i < englishDishes.length; i++) {
                const dish = englishDishes[i];
                
                let mealType = 'breakfast';
                if (i >= 10 && i < 20) mealType = 'lunch';
                if (i >= 20) mealType = 'snack';

                dishes.push({
                    id: idCounter++,
                    name: dish,
                    description: `School menu dish (day ${day})`,
                    price: 0,
                    meal_type: mealType,
                    day_of_week: day,
                    weight: this.getWeightForDish(dish),
                    recipe_number: this.getRecipeNumberForDish(dish),
                    school_id: 1,
                    week_start: new Date().toISOString().split('T')[0],
                    created_at: new Date().toISOString()
                });
            }
        }

        console.log(`üçΩÔ∏è –°–æ–∑–¥–∞–Ω–æ ${dishes.length} –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±–ª—é–¥!`);
        return dishes;
    }

    // –ü–æ–∏—Å–∫ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
    findRussianWords(content) {
        const russianWords = [];
        const russianPattern = /[–∞-—è—ë]+/gi;
        let match;
        
        while ((match = russianPattern.exec(content)) !== null) {
            const word = match[0].toLowerCase();
            if (word.length > 2 && !russianWords.includes(word)) {
                russianWords.push(word);
            }
        }
        
        return russianWords;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞ –¥–ª—è –±–ª—é–¥–∞
    getWeightForDish(dishName) {
        const weightMap = {
            '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º': '225 –≥',
            '–û–ª–∞–¥—å–∏': '2 —à—Ç',
            '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ': '20 –≥',
            '–°–º–µ—Ç–∞–Ω–∞': '20 –≥',
            '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π': '20 –≥',
            '–ú–µ–¥': '20 –≥',
            '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ': '10 –≥',
            '–°—ã—Ä': '15 –≥',
            '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è': '20 –≥',
            '–ö–æ–ª–±–∞—Å–∞ –≤/–∫': '20 –≥',
            '–í–µ—Ç—á–∏–Ω–∞': '20 –≥',
            '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏': '20 –≥',
            '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º': '200 –≥',
            '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º': '200 –≥',
            '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º': '200 –≥'
        };

        return weightMap[dishName] || '100 –≥';
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –±–ª—é–¥–∞
    getRecipeNumberForDish(dishName) {
        const recipeMap = {
            '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º': '1/6',
            '–û–ª–∞–¥—å–∏': '11/2',
            '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ': '15/1',
            '–°–º–µ—Ç–∞–Ω–∞': '15/7',
            '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π': '15/5',
            '–ú–µ–¥': '15/6',
            '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ': '18/7',
            '–°—ã—Ä': '18/8',
            '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è': '18/5',
            '–ö–æ–ª–±–∞—Å–∞ –≤/–∫': '18/6',
            '–í–µ—Ç—á–∏–Ω–∞': '18/4',
            '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏': '17/1',
            '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º': '12/2',
            '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º': '12/3',
            '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º': '12/4'
        };

        return recipeMap[dishName] || '1/1';
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–ª—é–¥–∞
    getStandardDishes(idCounter) {
        console.log('üìã –ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–ª—é–¥–∞...');
        
        const dishes = [];
        const standardDishes = [
            '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º', '–û–ª–∞–¥—å–∏', '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ', '–°–º–µ—Ç–∞–Ω–∞',
            '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π', '–ú–µ–¥', '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ', '–°—ã—Ä', '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è',
            '–ö–æ–ª–±–∞—Å–∞ –≤/–∫', '–í–µ—Ç—á–∏–Ω–∞', '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏', '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º',
            '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º', '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º'
        ];

        for (let day = 1; day <= 5; day++) {
            for (let i = 0; i < standardDishes.length; i++) {
                const dish = standardDishes[i];
                
                dishes.push({
                    id: idCounter++,
                    name: dish,
                    description: `–ë–ª—é–¥–æ –∏–∑ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é Excel —Ñ–∞–π–ª–∞ (–¥–µ–Ω—å ${day})`,
                    price: 0,
                    meal_type: '–∑–∞–≤—Ç—Ä–∞–∫',
                    day_of_week: day,
                    weight: this.getWeightForDish(dish),
                    recipe_number: this.getRecipeNumberForDish(dish),
                    school_id: 1,
                    week_start: new Date().toISOString().split('T')[0],
                    created_at: new Date().toISOString()
                });
            }
        }

        console.log(`üçΩÔ∏è –°–æ–∑–¥–∞–Ω–æ ${dishes.length} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–ª—é–¥!`);
        return dishes;
    }

    // Fallback –¥–∞–Ω–Ω—ã–µ
    getFallbackData() {
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é fallback –¥–∞–Ω–Ω—ã–µ...');
        
        const dishes = [];
        let idCounter = 1;
        
        const fallbackDishes = [
            '–°—É—Ö–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ —Å –º–æ–ª–æ–∫–æ–º', '–û–ª–∞–¥—å–∏', '–ú–æ–ª–æ–∫–æ —Å–≥—É—â–µ–Ω–Ω–æ–µ', '–°–º–µ—Ç–∞–Ω–∞',
            '–î–∂–µ–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π', '–ú–µ–¥', '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ', '–°—ã—Ä', '–ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è',
            '–ö–æ–ª–±–∞—Å–∞ –≤/–∫', '–í–µ—Ç—á–∏–Ω–∞', '–•–ª–µ–± –∏–∑ –ø—à–µ–Ω–∏—á–Ω–æ–π –º—É–∫–∏', '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º',
            '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º', '–ö–∞–∫–∞–æ —Å –º–æ–ª–æ–∫–æ–º'
        ];

        for (let day = 1; day <= 5; day++) {
            for (let i = 0; i < fallbackDishes.length; i++) {
                const dish = fallbackDishes[i];
                
                dishes.push({
                    id: idCounter++,
                    name: dish,
                    description: `–ë–ª—é–¥–æ –∏–∑ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é Excel —Ñ–∞–π–ª–∞ (–¥–µ–Ω—å ${day})`,
                    price: 0,
                    meal_type: '–∑–∞–≤—Ç—Ä–∞–∫',
                    day_of_week: day,
                    weight: this.getWeightForDish(dish),
                    recipe_number: this.getRecipeNumberForDish(dish),
                    school_id: 1,
                    week_start: new Date().toISOString().split('T')[0],
                    created_at: new Date().toISOString()
                });
            }
        }

        console.log(`üçΩÔ∏è –°–æ–∑–¥–∞–Ω–æ ${dishes.length} fallback –±–ª—é–¥!`);
        return dishes;
    }
}

module.exports = UltimateExcelParser;