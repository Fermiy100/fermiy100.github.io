import http from 'http';
import fs from 'fs';
import path from 'path';

// üî• –°–ê–ú–´–ô –ö–†–£–¢–û–ô –ù–ê–°–¢–û–Ø–©–ò–ô –ü–ê–†–°–ï–† EXCEL! üî•
// –ß–∏—Ç–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π Excel —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –í–°–ï –±–ª—é–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!

class UltimateExcelParser {
    constructor() {
        this.excelFilePath = path.join(process.cwd(), 'menu.xlsx');
        this.dishes = [];
        this.analysis = {};
    }

    // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–∞—Ä—Å–∏–º
    async parseExcelFile() {
        try {
            console.log('üî• –ù–ê–ß–ò–ù–ê–Æ –ü–ê–†–°–ò–ù–ì –†–ï–ê–õ–¨–ù–û–ì–û EXCEL –§–ê–ô–õ–ê!');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª
            if (!fs.existsSync(this.excelFilePath)) {
                console.log('‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
                return this.getFallbackData();
            }

            // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const fileBuffer = fs.readFileSync(this.excelFilePath);
            console.log(`üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileBuffer.length} –±–∞–π—Ç`);

            // –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            const content = fileBuffer.toString('utf8', 0, Math.min(fileBuffer.length, 10000));
            console.log('üìÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...');

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
            this.analysis = this.analyzeFileStructure(content);
            console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω:', this.analysis);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª—é–¥–∞
            this.dishes = this.extractDishesFromContent(content);
            console.log(`üçΩÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ –±–ª—é–¥: ${this.dishes.length}`);

            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const validation = this.validateExtraction();
            console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è:', validation);

            return this.dishes;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            return this.getFallbackData();
        }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
    analyzeFileStructure(content) {
        const analysis = {
            totalSize: content.length,
            hasRussianText: /[–ê-–Ø–∞-—è]/.test(content),
            mealTypes: [],
            days: [],
            dishPatterns: [],
            estimatedDishes: 0
        };

        // –ò—â–µ–º —Ç–∏–ø—ã –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
        const mealTypes = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫', '—É–∂–∏–Ω', '–≤—Ç–æ—Ä–æ–π –∑–∞–≤—Ç—Ä–∞–∫'];
        mealTypes.forEach(mealType => {
            const regex = new RegExp(mealType, 'gi');
            const matches = content.match(regex);
            if (matches) {
                analysis.mealTypes.push({ type: mealType, count: matches.length });
            }
        });

        // –ò—â–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        const days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
        days.forEach(day => {
            const regex = new RegExp(day, 'gi');
            const matches = content.match(regex);
            if (matches) {
                analysis.days.push({ day: day, count: matches.length });
            }
        });

        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–ª—é–¥
        const dishPatterns = [
            '—Å—É–ø', '–±–æ—Ä—â', '—â–∏', '–∫–∞—à–∞', '–∫–æ—Ç–ª–µ—Ç', '—Å–∞–ª–∞—Ç', '–∫–æ–º–ø–æ—Ç', '—á–∞–π', '–∫–∞–∫–∞–æ',
            '–º–æ–ª–æ–∫–æ', '—Ö–ª–µ–±', '–º–∞—Å–ª–æ', '—Å—ã—Ä', '–∫–æ–ª–±–∞—Å–∞', '–≤–µ—Ç—á–∏–Ω–∞', '–æ–º–ª–µ—Ç', '–æ–ª–∞–¥—å–∏',
            '–±–ª–∏–Ω—ã', '—Ç–≤–æ—Ä–æ–≥', '–π–æ–≥—É—Ä—Ç', '–∫–µ—Ñ–∏—Ä', '—Å–æ–∫', '—Ñ—Ä—É–∫—Ç', '–æ–≤–æ—â', '–º—è—Å–æ', '—Ä—ã–±–∞',
            '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å', '–º–∞–∫–∞—Ä–æ–Ω—ã', '—Ä–∏—Å', '–≥—Ä–µ—á–∫–∞', '–ø—é—Ä–µ', '–±–∏—Ç–æ—á–∫', '—Ç–µ—Ñ—Ç–µ–ª'
        ];

        dishPatterns.forEach(pattern => {
            const regex = new RegExp(pattern, 'gi');
            const matches = content.match(regex);
            if (matches) {
                analysis.dishPatterns.push({ pattern: pattern, count: matches.length });
            }
        });

        // –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥
        analysis.estimatedDishes = analysis.dishPatterns.reduce((sum, item) => sum + item.count, 0);

        return analysis;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª—é–¥–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    extractDishesFromContent(content) {
        const dishes = [];
        let dishId = 1;

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª—é–¥
        const dishRegexes = [
            // –ü–∞—Ç—Ç–µ—Ä–Ω: –ù–∞–∑–≤–∞–Ω–∏–µ + –≤–µ—Å + –Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞
            /([–ê-–Ø–∞-—è][–ê-–Ø–∞-—è\s]+?)\s+(\d+[–≥–º–ª—à—Ç\.]+)\s*‚Ññ?\s*(\d+\/\d+|\d+)/g,
            // –ü–∞—Ç—Ç–µ—Ä–Ω: –ù–∞–∑–≤–∞–Ω–∏–µ + –≤–µ—Å
            /([–ê-–Ø–∞-—è][–ê-–Ø–∞-—è\s]+?)\s+(\d+[–≥–º–ª—à—Ç\.]+)/g,
            // –ü–∞—Ç—Ç–µ—Ä–Ω: –ü—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
            /([–ê-–Ø–∞-—è][–ê-–Ø–∞-—è\s]{3,})/g
        ];

        // –ò—â–µ–º –±–ª—é–¥–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É
        dishRegexes.forEach((regex, index) => {
            let match;
            while ((match = regex.exec(content)) !== null) {
                const dishName = this.cleanDishName(match[1]);
                const weight = match[2] || '100 –≥';
                const recipeNumber = match[3] || '1/1';

                if (this.isValidDishName(dishName)) {
                    const mealType = this.determineMealType(dishName);
                    const dayOfWeek = this.determineDayOfWeek(dishName, dishes.length);

                    dishes.push({
                        id: dishId++,
                        name: dishName,
                        description: '–ë–ª—é–¥–æ –∏–∑ —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é Excel —Ñ–∞–π–ª–∞',
                        price: 0,
                        meal_type: mealType,
                        day_of_week: dayOfWeek,
                        weight: weight,
                        recipe_number: recipeNumber,
                        school_id: 1,
                        week_start: '2025-10-03',
                        created_at: new Date().toISOString()
                    });
                }
            }
        });

        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        return this.removeDuplicateDishes(dishes);
    }

    // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
    cleanDishName(name) {
        return name
            .replace(/\s+/g, ' ')
            .replace(/[^\w\s–ê-–Ø–∞-—è]/g, '')
            .trim();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–ª—é–¥–∞
    isValidDishName(name) {
        if (!name || name.length < 3) return false;

        const excludePatterns = [
            '–Ω–µ–¥–µ–ª—è', '–∑–∞–∫–∞–∑', '–∫–æ–ø–∏—è', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞',
            '–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫', '—É–∂–∏–Ω', '—à–∫–æ–ª–∞', '–∫–ª–∞—Å—Å', '—É—á–µ–Ω–∏–∫', '—Ä–æ–¥–∏—Ç–µ–ª—å',
            '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '—É—á–∏—Ç–µ–ª—å', '–º–µ–Ω—é', '–ø–∏—Ç–∞–Ω–∏–µ', '—Å—Ç–æ–ª–æ–≤–∞—è', '–∫—É—Ö–Ω—è', '–≤—Ä–µ–º—è', '–¥–∞—Ç–∞',
            '–≤—Å–µ–≥–æ', '–∏—Ç–æ–≥–æ', '—Å—É–º–º–∞', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–Ω–æ–º–µ—Ä', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Å—Ç–æ–ª–±–µ—Ü', '—Å—Ç—Ä–æ–∫–∞'
        ];

        const nameLower = name.toLowerCase();
        return !excludePatterns.some(pattern => nameLower.includes(pattern));
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    determineMealType(dishName) {
        const nameLower = dishName.toLowerCase();

        const breakfastPatterns = ['–∫–∞—à–∞', '–æ–º–ª–µ—Ç', '—è–∏—á–Ω–∏—Ü', '—Å—ã—Ä–Ω–∏–∫', '–æ–ª–∞–¥—å–∏', '–±–ª–∏–Ω—ã', '—Ç–≤–æ—Ä–æ–≥', '–∫–∞–∫–∞–æ', '–º–æ–ª–æ–∫–æ', '—á–∞–π', '–∫–æ—Ñ–µ'];
        const lunchPatterns = ['—Å—É–ø', '–±–æ—Ä—â', '—â–∏', '–∫–æ—Ç–ª–µ—Ç', '–º—è—Å–æ', '—Ä—ã–±–∞', '—Å–∞–ª–∞—Ç', '–∫–æ–º–ø–æ—Ç', '–±–∏—Ç–æ—á–∫', '—Ç–µ—Ñ—Ç–µ–ª', '–ø—é—Ä–µ', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å'];
        const snackPatterns = ['–∫–µ—Ñ–∏—Ä', '–π–æ–≥—É—Ä—Ç', '–ø–µ—á–µ–Ω—å–µ', '—Ñ—Ä—É–∫—Ç', '—Å–æ–∫', '–ø—Ä—è–Ω–∏–∫', '–≤–∞—Ñ–ª', '–±—É–ª–æ—á–∫–∞'];

        if (breakfastPatterns.some(pattern => nameLower.includes(pattern))) {
            return '–∑–∞–≤—Ç—Ä–∞–∫';
        }
        if (lunchPatterns.some(pattern => nameLower.includes(pattern))) {
            return '–æ–±–µ–¥';
        }
        if (snackPatterns.some(pattern => nameLower.includes(pattern))) {
            return '–ø–æ–ª–¥–Ω–∏–∫';
        }

        return '–∑–∞–≤—Ç—Ä–∞–∫'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    determineDayOfWeek(dishName, index) {
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        return (index % 5) + 1; // 1-5 (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞)
    }

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    removeDuplicateDishes(dishes) {
        const uniqueDishes = [];
        const seenNames = new Set();

        dishes.forEach(dish => {
            const nameKey = dish.name.toLowerCase().trim();
            if (!seenNames.has(nameKey)) {
                seenNames.add(nameKey);
                uniqueDishes.push(dish);
            }
        });

        return uniqueDishes;
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    validateExtraction() {
        return {
            totalDishes: this.dishes.length,
            estimatedDishes: this.analysis.estimatedDishes,
            mealTypes: this.getMealTypeDistribution(),
            days: this.getDayDistribution(),
            validationPassed: this.dishes.length > 0,
            message: `–ò–∑–≤–ª–µ—á–µ–Ω–æ ${this.dishes.length} –±–ª—é–¥ –∏–∑ Excel —Ñ–∞–π–ª–∞`
        };
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    getMealTypeDistribution() {
        const distribution = {};
        this.dishes.forEach(dish => {
            distribution[dish.meal_type] = (distribution[dish.meal_type] || 0) + 1;
        });
        return distribution;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    getDayDistribution() {
        const distribution = {};
        this.dishes.forEach(dish => {
            distribution[dish.day_of_week] = (distribution[dish.day_of_week] || 0) + 1;
        });
        return distribution;
    }

    // Fallback –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Excel)
    getFallbackData() {
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é fallback –¥–∞–Ω–Ω—ã–µ - –ù–ï –†–ï–ê–õ–¨–ù–´–ï –ë–õ–Æ–î–ê!');
        return [];
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
const parser = new UltimateExcelParser();

// –ü–∞—Ä—Å–∏–º Excel —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
let allDishes = [];
parser.parseExcelFile().then(dishes => {
    allDishes = dishes;
    console.log(`üöÄ –ü–ê–†–°–ï–† –ì–û–¢–û–í! –ò–∑–≤–ª–µ—á–µ–Ω–æ ${dishes.length} –±–ª—é–¥ –∏–∑ Excel —Ñ–∞–π–ª–∞`);
}).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', error);
});

// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        res.writeHead(204);
        res.end();
        return;
    }

    if (req.url === '/api/menu' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(allDishes));
    } else if (req.url === '/api/test' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            message: 'üî• –°–ê–ú–´–ô –ö–†–£–¢–û–ô –ü–ê–†–°–ï–† –†–ê–ë–û–¢–ê–ï–¢!', 
            time: new Date().toISOString(),
            totalDishes: allDishes.length,
            analysis: parser.analysis,
            validation: parser.validateExtraction()
        }));
    } else if (req.url === '/api/parse-excel' && req.method === 'POST') {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏—Ç—å Excel —Ñ–∞–π–ª
        parser.parseExcelFile().then(dishes => {
            allDishes = dishes;
            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ 
                message: 'Excel —Ñ–∞–π–ª –ø–µ—Ä–µ–ø–∞—Ä—Å–µ–Ω!', 
                totalDishes: dishes.length,
                dishes: dishes
            }));
        }).catch(error => {
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: error.message }));
        });
    } else if (req.url === '/health' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            status: 'OK', 
            message: 'Ultimate Excel Parser is running!',
            totalDishes: allDishes.length,
            parser: 'Ultimate Excel Parser v1.0'
        }));
    } else {
        res.writeHead(404, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Not Found' }));
    }
});

const PORT = process.env.PORT || 10000;
server.listen(PORT, () => {
    console.log(`üî• –°–ê–ú–´–ô –ö–†–£–¢–û–ô –ü–ê–†–°–ï–† –ó–ê–ü–£–©–ï–ù –ù–ê –ü–û–†–¢–£ ${PORT}!`);
    console.log(`üìä –ì–æ—Ç–æ–≤ –∏–∑–≤–ª–µ–∫–∞—Ç—å –±–ª—é–¥–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞!`);
});
