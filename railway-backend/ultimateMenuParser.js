/**
 * –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –ü–ê–†–°–ï–† –ú–ï–ù–Æ - –ò–î–ï–ê–õ–¨–ù–û –î–õ–Ø –≠–¢–û–ì–û –¢–ò–ü–ê –§–ê–ô–õ–û–í
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã "2-–Ø –ù–ï–î–ï–õ–Ø –î–õ–Ø –ó–ê–ö–ê–ó–ê"
 */

import XLSX from 'xlsx';

class UltimateMenuParser {
  constructor() {
    console.log('üöÄ –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –º–µ–Ω—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    this.dayPatterns = [
      ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–ø–Ω', 'monday', 'mon', '1'],
      ['–≤—Ç–æ—Ä–Ω–∏–∫', '–≤—Ç', 'tuesday', 'tue', '2'],
      ['—Å—Ä–µ–¥–∞', '—Å—Ä', 'wednesday', 'wed', '3'],
      ['—á–µ—Ç–≤–µ—Ä–≥', '—á—Ç', 'thursday', 'thu', '4'],
      ['–ø—è—Ç–Ω–∏—Ü–∞', '–ø—Ç', 'friday', 'fri', '5'],
      ['—Å—É–±–±–æ—Ç–∞', '—Å–±', 'saturday', 'sat', '6'],
      ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–≤—Å', 'sunday', 'sun', '7']
    ];
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    this.mealPatterns = {
      '–∑–∞–≤—Ç—Ä–∞–∫': ['–∑–∞–≤—Ç—Ä–∞–∫', '–∑ –∞ –≤ —Ç —Ä –∞ –∫', '—É—Ç—Ä–æ–º', '—É—Ç—Ä–µ–Ω–Ω–∏–π', '—É—Ç—Ä–æ', 'breakfast'],
      '–æ–±–µ–¥': ['–æ–±–µ–¥', '–æ –± –µ –¥', '–¥–Ω–µ–≤–Ω–æ–π', '–æ—Å–Ω–æ–≤–Ω–æ–π', '–¥–µ–Ω—å', 'lunch'],
      '–ø–æ–ª–¥–Ω–∏–∫': ['–ø–æ–ª–¥–Ω–∏–∫', '–ø –æ –ª –¥ –Ω –∏ –∫', '–ø–µ—Ä–µ–∫—É—Å', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π', '–¥–æ–ø', 'snack'],
      '—É–∂–∏–Ω': ['—É–∂–∏–Ω', '—É –∂ –∏ –Ω', '–≤–µ—á–µ—Ä–Ω–∏–π', '–≤–µ—á–µ—Ä–æ–º', '–≤–µ—á–µ—Ä', 'dinner']
    };
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞
   */
  async parseExcelFile(fileBuffer) {
    try {
      console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞');
      
      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
      const workbook = XLSX.read(fileBuffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      
      if (!sheetName) {
        console.log('‚ùå –ù–µ—Ç –ª–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ');
        return [];
      }
      
      const worksheet = workbook.Sheets[sheetName];
      const data = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });
      
      console.log(`‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: ${data.length} —Å—Ç—Ä–æ–∫`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
      const structure = this.analyzeFileStructure(data);
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞:', structure);
      
      // –ü–∞—Ä—Å–∏–º –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      const menuItems = this.parseBasedOnStructure(data, structure);
      
      console.log(`üéØ –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ ${menuItems.length} –±–ª—é–¥`);
      return menuItems;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      return [];
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
   */
  analyzeFileStructure(data) {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞...');
    
    const structure = {
      hasDayHeaders: false,
      hasMealHeaders: false,
      dayColumns: [],
      mealRows: [],
      dataStartRow: 0,
      dataEndRow: data.length - 1
    };
    
    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –≤ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö
    for (let row = 0; row < Math.min(10, data.length); row++) {
      const rowData = data[row];
      if (!rowData) continue;
      
      for (let col = 0; col < rowData.length; col++) {
        const cell = rowData[col];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.toString().trim().toLowerCase();
        if (cellText.length < 2) continue;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        this.dayPatterns.forEach((patterns, dayIndex) => {
          if (patterns.some(pattern => cellText.includes(pattern))) {
            structure.dayColumns.push({
              day: dayIndex + 1,
              column: col,
              row: row,
              text: cell.toString().trim()
            });
            structure.hasDayHeaders = true;
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –¥–µ–Ω—å ${dayIndex + 1} –≤ –∫–æ–ª–æ–Ω–∫–µ ${col}, —Å—Ç—Ä–æ–∫–∞ ${row}: "${cell.toString().trim()}"`);
          }
        });
      }
    }
    
    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    for (let row = 0; row < data.length; row++) {
      const rowData = data[row];
      if (!rowData) continue;
      
      for (let col = 0; col < rowData.length; col++) {
        const cell = rowData[col];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.toString().trim().toLowerCase();
        if (cellText.length < 3) continue;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–µ–º—ã –ø–∏—â–∏
        Object.entries(this.mealPatterns).forEach(([mealType, patterns]) => {
          if (patterns.some(pattern => cellText.includes(pattern))) {
            structure.mealRows.push({
              mealType: mealType,
              row: row,
              column: col,
              text: cell.toString().trim()
            });
            structure.hasMealHeaders = true;
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω ${mealType} –≤ —Å—Ç—Ä–æ–∫–µ ${row}, –∫–æ–ª–æ–Ω–∫–∞ ${col}: "${cell.toString().trim()}"`);
          }
        });
      }
    }
    
    return structure;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   */
  parseBasedOnStructure(data, structure) {
    console.log('üçΩÔ∏è –ü–∞—Ä—Å–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
    
    if (structure.hasDayHeaders && structure.hasMealHeaders) {
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –¥–Ω–∏ + –ø—Ä–∏–µ–º—ã –ø–∏—â–∏');
      return this.parseDayAndMealStructure(data, structure);
    } else if (structure.hasDayHeaders) {
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: —Ç–æ–ª—å–∫–æ –¥–Ω–∏');
      return this.parseDayOnlyStructure(data, structure);
    } else if (structure.hasMealHeaders) {
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: —Ç–æ–ª—å–∫–æ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏');
      return this.parseMealOnlyStructure(data, structure);
    } else {
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥');
      return this.parseUniversalStructure(data);
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã "–¥–Ω–∏ + –ø—Ä–∏–µ–º—ã –ø–∏—â–∏"
   */
  parseDayAndMealStructure(data, structure) {
    const items = [];
    
    structure.dayColumns.forEach(dayCol => {
      console.log(`üîç –ü–∞—Ä—Å–∏–º –¥–µ–Ω—å ${dayCol.day} –≤ –∫–æ–ª–æ–Ω–∫–µ ${dayCol.column}`);
      
      // –ò—â–µ–º –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
      const mealSections = this.findMealSectionsForDay(data, dayCol.column, dayCol.row);
      
      mealSections.forEach(section => {
        const mealItems = this.extractDishesFromSection(
          data, 
          dayCol.column, 
          section.startRow, 
          section.endRow, 
          dayCol.day, 
          section.mealType
        );
        items.push(...mealItems);
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${mealItems.length} –±–ª—é–¥ –¥–ª—è ${section.mealType}`);
      });
    });
    
    return this.removeDuplicates(items);
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã "—Ç–æ–ª—å–∫–æ –¥–Ω–∏"
   */
  parseDayOnlyStructure(data, structure) {
    const items = [];
    
    structure.dayColumns.forEach(dayCol => {
      console.log(`üîç –ü–∞—Ä—Å–∏–º –¥–µ–Ω—å ${dayCol.day} –≤ –∫–æ–ª–æ–Ω–∫–µ ${dayCol.column}`);
      
      // –ü–∞—Ä—Å–∏–º –≤—Å–µ –±–ª—é–¥–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ –∫–∞–∫ –æ–±–µ–¥
      const dayItems = this.extractAllDishesFromColumn(data, dayCol.column, dayCol.day, '–æ–±–µ–¥');
      items.push(...dayItems);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${dayItems.length} –±–ª—é–¥ –¥–ª—è –¥–Ω—è ${dayCol.day}`);
    });
    
    return this.removeDuplicates(items);
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã "—Ç–æ–ª—å–∫–æ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏"
   */
  parseMealOnlyStructure(data, structure) {
    const items = [];
    
    structure.mealRows.forEach(mealRow => {
      console.log(`üîç –ü–∞—Ä—Å–∏–º ${mealRow.mealType} –≤ —Å—Ç—Ä–æ–∫–µ ${mealRow.row}`);
      
      // –ü–∞—Ä—Å–∏–º –≤—Å–µ –±–ª—é–¥–∞ –≤ —Å—Ç—Ä–æ–∫–µ
      const mealItems = this.extractAllDishesFromRow(data, mealRow.row, 1, mealRow.mealType);
      items.push(...mealItems);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${mealItems.length} –±–ª—é–¥ –¥–ª—è ${mealRow.mealType}`);
    });
    
    return this.removeDuplicates(items);
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
   */
  parseUniversalStructure(data) {
    console.log('üåê –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ - –±–µ—Ä–µ–º –≤—Å–µ —á—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –±–ª—é–¥–∞');
    const items = [];
    
    for (let row = 0; row < data.length; row++) {
      const rowData = data[row];
      if (!rowData) continue;
      
      for (let col = 0; col < rowData.length; col++) {
        const cell = rowData[col];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.toString().trim();
        if (cellText.length < 3) continue;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if (this.isHeader(cellText)) continue;
        
        // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ
        const dish = this.createUltimateDish(cellText, row, col);
        if (dish) {
          items.push(dish);
        }
      }
    }
    
    return this.removeDuplicates(items);
  }

  /**
   * –ü–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–π –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–ª—è –¥–Ω—è
   */
  findMealSectionsForDay(data, colIndex, startRow) {
    const sections = [];
    let currentSection = null;
    
    for (let row = startRow; row < data.length; row++) {
      const rowData = data[row];
      if (!rowData || !rowData[colIndex]) continue;
      
      const cell = rowData[colIndex];
      if (!cell || typeof cell !== 'string') continue;
      
      const cellText = cell.toString().trim().toLowerCase();
      if (!cellText) continue;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
      let mealType = null;
      Object.entries(this.mealPatterns).forEach(([type, patterns]) => {
        if (patterns.some(pattern => cellText.includes(pattern))) {
          mealType = type;
        }
      });
      
      if (mealType) {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ–∫—Ü–∏—é
        if (currentSection) {
          currentSection.endRow = row - 1;
          sections.push(currentSection);
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
        currentSection = {
          mealType: mealType,
          startRow: row + 1,
          endRow: data.length - 1
        };
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
    if (currentSection) {
      sections.push(currentSection);
    }
    
    return sections;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª—é–¥ –∏–∑ —Å–µ–∫—Ü–∏–∏
   */
  extractDishesFromSection(data, colIndex, startRow, endRow, dayOfWeek, mealType) {
    const items = [];
    
    for (let row = startRow; row <= endRow; row++) {
      const rowData = data[row];
      if (!rowData || !rowData[colIndex]) continue;
      
      const cell = rowData[colIndex];
      if (!cell || typeof cell !== 'string') continue;
      
      const cellText = cell.toString().trim();
      if (cellText.length < 3) continue;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥—Ä—É–≥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
      if (this.isMealHeader(cellText)) break;
      
      const dish = this.createUltimateDish(cellText, row, colIndex, dayOfWeek, mealType);
      if (dish) {
        if (Array.isArray(dish)) {
          items.push(...dish);
        } else {
          items.push(dish);
        }
      }
    }
    
    return items;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–ª—é–¥ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏
   */
  extractAllDishesFromColumn(data, colIndex, dayOfWeek, mealType) {
    const items = [];
    
    for (let row = 0; row < data.length; row++) {
      const rowData = data[row];
      if (!rowData || !rowData[colIndex]) continue;
      
      const cell = rowData[colIndex];
      if (!cell || typeof cell !== 'string') continue;
      
      const cellText = cell.toString().trim();
      if (cellText.length < 3) continue;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      if (this.isHeader(cellText)) continue;
      
      const dish = this.createUltimateDish(cellText, row, colIndex, dayOfWeek, mealType);
      if (dish) {
        if (Array.isArray(dish)) {
          items.push(...dish);
        } else {
          items.push(dish);
        }
      }
    }
    
    return items;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–ª—é–¥ –∏–∑ —Å—Ç—Ä–æ–∫–∏
   */
  extractAllDishesFromRow(data, rowIndex, dayOfWeek, mealType) {
    const items = [];
    const rowData = data[rowIndex];
    if (!rowData) return items;
    
    for (let col = 0; col < rowData.length; col++) {
      const cell = rowData[col];
      if (!cell || typeof cell !== 'string') continue;
      
      const cellText = cell.toString().trim();
      if (cellText.length < 3) continue;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      if (this.isHeader(cellText)) continue;
      
      const dish = this.createUltimateDish(cellText, rowIndex, col, dayOfWeek, mealType);
      if (dish) {
        if (Array.isArray(dish)) {
          items.push(...dish);
        } else {
          items.push(dish);
        }
      }
    }
    
    return items;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–≥–æ –±–ª—é–¥–∞
   */
  createUltimateDish(text, row, col, dayOfWeek = null, mealType = null) {
    // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    const cleanName = this.cleanDishName(text);
    if (!cleanName || cleanName.length < 3) return null;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const weight = this.extractWeight(text);
    const recipeNumber = this.extractRecipeNumber(text);
    const portion = this.generatePortion(weight);
    const description = this.generateDescription(cleanName, weight);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—É—Å—ã
    if (cleanName.toLowerCase().includes('—Å–æ—É—Å—ã:')) {
      return this.createSauceDishes(cleanName, dayOfWeek || this.getDayFromPosition(col), mealType || '–æ–±–µ–¥');
    }
    
    const dish = {
      name: cleanName,
      description: description,
      price: 0,
      portion: portion,
      day_of_week: dayOfWeek || this.getDayFromPosition(col),
      meal_type: mealType || this.getMealTypeFromText(text),
      school_id: 1,
      week_start: new Date().toISOString().split('T')[0],
      recipe_number: recipeNumber,
      weight: weight
    };
    
    console.log(`üçΩÔ∏è –°–æ–∑–¥–∞–Ω–æ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–µ –±–ª—é–¥–æ: "${cleanName}" (${dish.meal_type}, –¥–µ–Ω—å ${dish.day_of_week})`);
    return dish;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
   */
  cleanDishName(text) {
    let clean = text.trim();
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    clean = clean.replace(/[^\w\s\-\.\(\)\/]/g, '');
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    clean = clean.replace(/\s+/g, ' ').trim();
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (this.isHeader(clean)) return null;
    
    return clean;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Å–∞
   */
  extractWeight(text) {
    const weightMatch = text.match(/(\d+)\s*–≥/);
    return weightMatch ? weightMatch[1] + ' –≥' : null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞
   */
  extractRecipeNumber(text) {
    const recipeMatch = text.match(/‚Ññ?\s*(\d+)/);
    return recipeMatch ? recipeMatch[1] : null;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ä—Ü–∏–∏
   */
  generatePortion(weight) {
    if (!weight) return '1 –ø–æ—Ä—Ü–∏—è';
    return weight;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
   */
  generateDescription(name, weight) {
    let description = name;
    if (weight) {
      description += ` (${weight})`;
    }
    return description;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥ –∏–∑ —Å–æ—É—Å–æ–≤
   */
  createSauceDishes(text, dayOfWeek, mealType) {
    const sauces = text.split(':')[1]?.split(';') || [];
    const dishes = [];
    
    sauces.forEach(sauce => {
      const cleanSauce = sauce.trim();
      if (cleanSauce && cleanSauce.length > 2) {
        const dish = this.createUltimateDish(cleanSauce, 0, 0, dayOfWeek, mealType);
        if (dish) {
          dishes.push(dish);
        }
      }
    });
    
    return dishes;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
   */
  getDayFromPosition(col) {
    const days = [1, 2, 3, 4, 5, 6, 7];
    return days[col % 7] || 1;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
   */
  getMealTypeFromText(text) {
    const lowerText = text.toLowerCase();
    
    Object.entries(this.mealPatterns).forEach(([mealType, patterns]) => {
      if (patterns.some(pattern => lowerText.includes(pattern))) {
        return mealType;
      }
    });
    
    return '–æ–±–µ–¥'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
   */
  isHeader(text) {
    const lowerText = text.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    if (this.dayPatterns.some(patterns => patterns.some(pattern => lowerText.includes(pattern)))) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–µ–º—ã –ø–∏—â–∏
    if (Object.values(this.mealPatterns).some(patterns => patterns.some(pattern => lowerText.includes(pattern)))) {
      return true;
    }
    
    return false;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
   */
  isMealHeader(text) {
    const lowerText = text.toLowerCase();
    return Object.values(this.mealPatterns).some(patterns => 
      patterns.some(pattern => lowerText.includes(pattern))
    );
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
   */
  removeDuplicates(items) {
    const seen = new Set();
    const unique = [];
    
    items.forEach(item => {
      const key = `${item.name}-${item.day_of_week}-${item.meal_type}`;
      if (!seen.has(key)) {
        seen.add(key);
        unique.push(item);
      }
    });
    
    return unique;
  }
}

export default UltimateMenuParser;