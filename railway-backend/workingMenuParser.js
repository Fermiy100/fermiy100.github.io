/**
 * –†–ê–ë–û–¢–ê–Æ–©–ò–ô –ü–ê–†–°–ï–† –ú–ï–ù–Æ - –¢–û–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢
 * –ë–µ—Ä–µ—Ç –í–°–ï —è—á–µ–π–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
 */

import XLSX from 'xlsx';

class WorkingMenuParser {
  constructor() {
    console.log('üöÄ –†–∞–±–æ—Ç–∞—é—â–∏–π –ø–∞—Ä—Å–µ—Ä –º–µ–Ω—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞
   */
  async parseExcelFile(fileBuffer) {
    try {
      console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞');
      
      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
      const workbook = XLSX.read(fileBuffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      
      if (!sheetName) {
        console.log('‚ùå –ù–µ—Ç –ª–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ');
        return [];
      }
      
      const worksheet = workbook.Sheets[sheetName];
      const data = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });
      
      console.log(`‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: ${data.length} —Å—Ç—Ä–æ–∫`);
      
      // –ë–µ—Ä–µ–º –í–°–ï —è—á–µ–π–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
      const menuItems = this.parseAllCells(data);
      
      console.log(`üéØ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ ${menuItems.length} –±–ª—é–¥`);
      return menuItems;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      return [];
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —è—á–µ–µ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º
   */
  parseAllCells(data) {
    console.log('üîç –ü–∞—Ä—Å–∏–º –í–°–ï —è—á–µ–π–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º');
    const items = [];
    
    for (let row = 0; row < data.length; row++) {
      const rowData = data[row];
      if (!rowData) continue;
      
      for (let col = 0; col < rowData.length; col++) {
        const cell = rowData[col];
        if (!cell || typeof cell !== 'string') continue;
        
        const cellText = cell.toString().trim();
        if (cellText.length < 2) continue;
        
        // –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–æ –∏–∑ –í–°–ï–ì–û
        const dish = this.createDish(cellText, row, col);
        if (dish) {
          items.push(dish);
        }
      }
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${items.length} –±–ª—é–¥`);
    return items;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞
   */
  createDish(text, row, col) {
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
    let cleanName = text.trim();
    if (cleanName.length < 2) return null;
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    cleanName = cleanName.replace(/[^\w\s\-\.\(\)\/]/g, '');
    cleanName = cleanName.replace(/\s+/g, ' ').trim();
    
    if (cleanName.length < 2) return null;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å
    const weightMatch = text.match(/(\d+)\s*–≥/);
    const weight = weightMatch ? weightMatch[1] + ' –≥' : null;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    const dayOfWeek = (col % 7) + 1;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    const mealType = this.getMealType(text);
    
    const dish = {
      name: cleanName,
      description: cleanName + (weight ? ` (${weight})` : ''),
      price: 0,
      portion: weight || '1 –ø–æ—Ä—Ü–∏—è',
      day_of_week: dayOfWeek,
      meal_type: mealType,
      school_id: 1,
      week_start: new Date().toISOString().split('T')[0],
      recipe_number: null,
      weight: weight
    };
    
    console.log(`üçΩÔ∏è –°–æ–∑–¥–∞–Ω–æ –±–ª—é–¥–æ: "${cleanName}" (${mealType}, –¥–µ–Ω—å ${dayOfWeek})`);
    return dish;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
   */
  getMealType(text) {
    const lowerText = text.toLowerCase();
    
    if (lowerText.includes('–∑–∞–≤—Ç—Ä–∞–∫')) return '–∑–∞–≤—Ç—Ä–∞–∫';
    if (lowerText.includes('–æ–±–µ–¥')) return '–æ–±–µ–¥';
    if (lowerText.includes('–ø–æ–ª–¥–Ω–∏–∫')) return '–ø–æ–ª–¥–Ω–∏–∫';
    if (lowerText.includes('—É–∂–∏–Ω')) return '—É–∂–∏–Ω';
    
    return '–æ–±–µ–¥'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }
}

export default WorkingMenuParser;
