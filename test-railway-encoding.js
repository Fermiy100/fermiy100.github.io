#!/usr/bin/env node

/**
 * üö® –¢–ï–°–¢ –ö–û–î–ò–†–û–í–ö–ò RAILWAY üö®
 */

const https = require('https');

console.log('üîç –¢–ï–°–¢–ò–†–£–Æ –ö–û–î–ò–†–û–í–ö–£ RAILWAY...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(url) {
    return new Promise((resolve, reject) => {
        const req = https.request(url, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(data);
                    resolve({ status: res.statusCode, data: jsonData });
                } catch (e) {
                    resolve({ status: res.statusCode, data: data });
                }
            });
        });
        
        req.on('error', reject);
        req.end();
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testRailwayEncoding() {
    const railwayUrl = 'https://fermiy100githubio-production.up.railway.app';
    
    try {
        console.log('üì° –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å Railway...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        const statusResponse = await makeRequest(`${railwayUrl}/`);
        console.log('üìä –°—Ç–∞—Ç—É—Å:', statusResponse.data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é
        console.log('üçΩÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é...');
        const menuResponse = await makeRequest(`${railwayUrl}/api/menu`);
        console.log('üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥:', menuResponse.data.length);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –ø–µ—Ä–≤–æ–≥–æ –±–ª—é–¥–∞
        if (menuResponse.data.length > 0) {
            const firstDish = menuResponse.data[0];
            console.log('üîç –ü–µ—Ä–≤–æ–µ –±–ª—é–¥–æ:', firstDish.name);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
            if (firstDish.name.includes('?')) {
                console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê –° –ö–û–î–ò–†–û–í–ö–û–ô!');
                console.log('üîß Railway –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            } else {
                console.log('‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!');
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testRailwayEncoding();
